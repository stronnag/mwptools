{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Sweet dreams and flying machines<sup>1</sup></p> <p>mwp (originally \"multi-wii planner\") is a mission planner, ground control station and flight logger for MSP (Multiwiii Serial Protocol) compatible flight controller firmware (INAV and Multiwii at least).</p> <p>From its MultiWii origins mwp has evolved to support navigation capabilities in INAV.</p> <p>INAV is now the main development target, however MultiWii mission planning and ground control remains a supported function.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Mission Planner : Supports all INAV and MultiWii mission planning functions, including all INAV extensions.</li> <li>Ground Control Station : (Near) real time ground control monitoring, using a wide range of telemetry options. Audio status reports.</li> <li>Monitoring and warning of other airspace users (INAV radar, manned aviation ADS-B)</li> <li>Flight log replay  (Blackbox, OTX/ETX logs, BulletGCSS)</li> <li>Embedded video (live and replay)</li> <li>RC Control Using joystick / game controller.</li> <li>Support functions<ul> <li>INAV Safehome editor, FW Auto-Land plans. INAV8 Geozone editor.</li> <li>Survey / Search Area Planner</li> <li>Automatic mission shape generation, block moves, animated mission preview.</li> <li>Terrain Analysis with WP mission rewrite to safe elevation margins</li> <li>Line of sight Analysis along a WP mission file.</li> <li>Favourite sites manager</li> <li>KML/KMZ static overlays</li> <li>UBLOX AssistNow GPS data.</li> </ul> </li> </ul>"},{"location":"#supported-protocols","title":"Supported Protocols","text":"<p>mwp supports the following telemetry protocols :</p> <ul> <li>MSP (MultiWii Serial Protocol)</li> <li>LTM (Lightweight Telemetry)</li> <li>MAVLink (INAV telemetry 'push' subset)</li> <li>Smartport (direct /  via inverter / or from Multi-protocol Module)</li> <li>Crossfire (CRSF)</li> <li>Flysky AA (via Multi-protocol Module)</li> <li>BulletGCSS MQTT</li> </ul>"},{"location":"#monitoring","title":"Monitoring","text":"<p>mwp also supports the real-time display of adjacent aircraft using:</p> <ul> <li>INAV-radar (INAV UAS)</li> <li>SDR ADS-B (dump1090 / readsb / SBS1) live reports for general aviation</li> <li>Other SDR reporting procotols</li> <li>MAVlink Traffic Report / ADSB Vehicle (e.g. general aviation, typically ADS-B via a device such as uAvionix PingRX or Aerobits TT-SC1)</li> <li><code>MSP2_ADSB_VEHICLE_LIST</code> (e.g. general aviation, typically ADS-B via a device such as uAvionix PingRX or Aerobits TT-SC1)</li> <li>Internet providers / aggregators using the REST <code>readsb</code> JSON format.</li> </ul>"},{"location":"#log-replay-formats","title":"Log replay formats","text":"<p>mwp supports replay of:</p> <ul> <li>mwp log files (logged by mwp/GCS)</li> <li>Blackbox logs</li> <li>OpenTX and EdgeTX CSV (sdcard) logs</li> <li>BulletGCSS logs</li> <li>Ardupilot (<code>.bin</code>) log</li> </ul> <p>Log replay requires tools from the flightlog2x project.</p>"},{"location":"#platforms-and-os","title":"Platforms and OS","text":"<p>The tools are designed to be portable and as far as possible platform and architecture agnostic. The suite is developed on Arch Linux and is also tested on Debian (Trixie / Sid), Alpine (Edge), Fedora (current)  and FreeBSD (current release). Being able to satisfy the required dependencies is more important than the actual distro / OS / platform. mwptools also runs on proprietary OS such as MacOS and Windows.</p>"},{"location":"#build-and-installation","title":"Build and installation","text":"<p>Build and installation is described in the following sections:</p> <ul> <li>Generic build and installation.</li> </ul> <p>If you are migrating from the legacy (Gtk+-3.0) version to the extant (Gtk 4) version, you are advised to read the migration guide first.</p>"},{"location":"#this-document","title":"This document","text":"<p>This document describes the most recent (usually the development branch) version on Github. Prior versions may be checked-out from their respective Github commits / branches / tags.</p> <ol> <li> <p>James Taylor, Fire and Rain. Full line is 'sweet dreams and flying machines in pieces on the ground', you may skip the final part.\u00a0\u21a9</p> </li> </ol>"},{"location":"Black-Ops/","title":"Anonymous Maps","text":"<p>mwp provides a pseudo-map proxy that just gives you a black map (or user specified tile). This may be useful for a number of use-cases:</p> <ul> <li>privacy</li> <li>general obstinacy</li> <li>clarity of display</li> </ul>"},{"location":"Black-Ops/#building","title":"Building","text":"<p>This proxy is not build by default, it is necessary to build, install and configure the proxy manually.</p> <pre><code>cd mwptools/qproxy\nmake bproxy\n# copy bproxy somewhere on the PATH\ncp bproxy ~/.local/bin/\n# or\nsudo cp broxy /usr/local/bin\n# or\nsudo cp broxy /usr/bin\n</code></pre>"},{"location":"Black-Ops/#configuration","title":"Configuration","text":"<p>That was the easy bit! Now it is necessary to tell mwp where to find the proxy. This involves a setting and a configuration file.</p> <p>First of all, ensure that the <code>map-sources</code> setting is enabled:</p> <pre><code>$ gsettings get org.stronnag.mwp map-sources\n'sources.json'\n# here this set to a file sources.json (in the configuraion directory ~/.config/mwp/ / $LOCALAPPDATA/mwp)\n</code></pre> <p>if this is not set, then set it:</p> <pre><code>$ gsettings set org.stronnag.mwp map-sources 'sources.json'\n</code></pre> <p>Now we need to edit the configuration file <code>sources.json</code>, there is a sample file in <code>mwptools/samples/sources.json</code>. you file needs a stanza like:</p> <pre><code>{\n \"id\": \"Black\",\n \"name\": \"Black Tiles\",\n \"license\": \"(c) jh \",\n \"license_uri\": \"http://daria.co.uk/\",\n \"min_zoom\": 0,\n \"max_zoom\": 20,\n \"tile_size\": 256,\n \"projection\": \"MERCATOR\",\n \"spawn\" : \"bproxy\",\n}\n</code></pre> <p>So a minimal <code>sources.json</code> looks like:</p> <pre><code>{\n   \"sources\" : [\n      {\n         \"id\": \"Black\",\n         \"name\": \"Black Tiles\",\n         \"license\": \"(c) jh \",\n         \"license_uri\": \"http://daria.co.uk/\",\n         \"min_zoom\": 0,\n         \"max_zoom\": 20,\n         \"tile_size\": 256,\n         \"projection\": \"MERCATOR\",\n         \"spawn\" : \"bproxy\",\n       }\n   ]\n}\n</code></pre> <p>On starting mwp you should see a new map option \"Black Tiles\".</p> <p></p>"},{"location":"Black-Ops/#custom-tile","title":"Custom Tile","text":"<p>It's also possible to have a custom tile (which does not have to be black). The tile must be:</p> <ul> <li>256x256 pixels</li> <li>PNG</li> </ul> <p>The full path is provided in the environment variable <code>MWP_BLACK_TILE</code>, e.g.</p> <pre><code># put this in e.g. ~/.bashrc to make it permanent\nexport MWP_BLACK_TILE=~/.config/mwp/mytile.png\n</code></pre> <p>The environment variable may instead be added to <code>cmdopts</code>.</p> <p>For example:</p> <p></p>"},{"location":"Building-with-meson-and-ninja/","title":"Build / install mwp (Generic)","text":""},{"location":"Building-with-meson-and-ninja/#overview","title":"Overview","text":"<p>If you just want to install mwp on a Debian /derivative,  x64_64, then you can install the reasonably recent binary <code>.deb</code> package from the Release Area.</p> <p>For Arch Linux, you can install the AUR package <code>mwptools-git</code>. This tracks <code>master</code>.</p> <p>Otherwise, if you're using a different (not Debian based) distribution, just curious about building mwptools, you want to explore other tools and scripts in the repository or you're using a different architecture (ia32, Arm7, aarch64, riscv64, ppc etc.), or you want the most recent code, then you can build from source. This is the recommended installation method.</p> <p>The mwptools suite is built using the meson and ninja toolchain. For most users these will be automatically provided by a <code>build-essentials</code> type of package.</p> <p>For Debian and derivatives there is a \"one stop\" installation script, (based on Debian \"Sid\", ymmv), as well as a x86_64 \"Release\" <code>.deb</code> archive. For older Debian based OS, you may need slightly different or additional packages(<code>libxml2-dev/</code>, <code>libsdl2-dev</code> vice <code>libsdl2-compat-dev</code>).</p> <p>For Fedora, the is a also a documented list of packages.</p> <p>For Arch, the <code>PKGBLD</code> lists the required packages.</p> <p>For MacOS, use Homebrew to install required packages, having evinced the names from one of the Linux guides.</p> <p>For Windows (MSys2), see Github discussion #182 for dependencies and workarounds).</p> <p>For any other distribution / platform / OS, any of the above documents should give you an idea of the packages required, typically:</p> <ul> <li>Gtk4 (4.14)</li> <li>libsoup3 (3.2)</li> <li>libshumate (1.3)</li> <li>meson (1.40)</li> <li>blueprint-compiler (0.12.0)</li> <li>libvte4</li> <li>libadwaita-1 (1.5)</li> <li>libsecret-1</li> <li>librsvg</li> <li>sdl2</li> <li>gstreamer / gst-plugins-base-libs etc.</li> <li>readline</li> </ul> <p>Numbers is parenthesis indicate a minimum version. Modern OS should be able to satisfy these requirements.</p>"},{"location":"Building-with-meson-and-ninja/#usage","title":"Usage","text":""},{"location":"Building-with-meson-and-ninja/#normative-guide","title":"Normative guide","text":"<p>Note that the normative build reference is the <code>INSTALL</code> file in the source tree. This is most current documentation.</p>"},{"location":"Building-with-meson-and-ninja/#first-time","title":"First time","text":"<p>Set up the <code>meson</code> build system from the top level. Note that <code>_build</code> is a directory that is created by <code>meson setup</code>; you can use what ever name you wish, and can have multiple build directories for different options (e.g <code>_build</code> for local and <code>_sysbuild</code> for system wide installations.</p> <pre><code>meson setup _build --buildtype=release --strip [--prefix $HOME/.local]\n</code></pre> <ul> <li>For a user / non-system install, set <code>--prefix $HOME/.local</code><ul> <li>This will install the binaries in <code>$HOME/.local/bin</code>, which should be added to <code>$PATH</code> as required.</li> </ul> </li> <li>For a Linux system wide install, set <code>--prefix /usr</code></li> <li>For FreeBSD (*BSD), for a system-wide install,  don't set <code>--prefix</code> as the default (<code>/usr/local</code>) is suitable</li> </ul> <p>Unless you need a multi-user setup, a local install is preferable, as you don't need <code>sudo</code> to install, and you'll not risk messing up build permissions.</p>"},{"location":"Building-with-meson-and-ninja/#easy-first-time-install-on-debian-and-derivatives","title":"\"Easy\" first-time install on Debian and derivatives","text":"<ul> <li>Download the first time build script</li> <li>Make it executable <code>chmod +x deb-install.sh</code></li> <li>Run it <code>./deb-install.sh -y</code></li> <li>Note that the script may ask for a password to install system packages</li> <li>The resulting executables are in <code>~/.local/bin</code>. Ensure this exists on <code>$PATH</code>; modern distros should do this for you.</li> </ul>"},{"location":"Building-with-meson-and-ninja/#build-and-update","title":"Build and update","text":"<pre><code>ninja -C _build\n# for a local install\nninja -C _build install\n# for system install\nninja -C _build\nsudo ninja -C _build install\n</code></pre>"},{"location":"Building-with-meson-and-ninja/#accessing-the-serial-port","title":"Accessing the serial port","text":"<p>The user needs to have read / write permissions on the serial port in order to communicate with a flight controller. This is done by adding the user to a group:</p> <ul> <li>Arch Linux: <code>sudo usermod -aG uucp $USER</code></li> <li>Debian / Fedora (and derivatives): <code>sudo usermod -aG dialout $USER</code></li> <li> <p>All Linux with <code>systemd</code>: In you log in via <code>systemd</code>'s <code>loginctl</code>, then you can create a <code>udev</code> rule that does not rquire the user being a member of a particular group:</p> <pre><code>#less /etc/udev/rules.d/45-stm32.rules\nSUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"0483\", ATTRS{idProduct}==\"5740\", MODE=\"0660\", TAG+=\"uaccess\", ENV{ID_MM_DEVICE_IGNORE}=\"1\", ENV{ID_MM_CANDIDATE}=\"0\"\nSUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"0483\", ATTRS{idProduct}==\"df11\", MODE=\"0660\", TAG+=\"uaccess\"\n</code></pre> </li> <li> <p>FreeBSD: <code>sudo pw group mod dialer -m $USER</code></p> </li> </ul>"},{"location":"Building-with-meson-and-ninja/#files-built-installed","title":"Files built / installed","text":""},{"location":"Building-with-meson-and-ninja/#default","title":"Default","text":"Application Usage <code>mwp</code> Mission planner, GCS, log replay etc. <code>mwp-plot-elevations</code> 1 Mission elevation / terrain analysis <code>cliterm</code> Interact with the CLI <code>fc-get</code>, <code>fc-set</code> 2 Backup / restore CLI diff <code>inav_states.rb</code> Summarise BBL state changes, also installed <code>inav_states_data.rb</code> <code>fcflash</code> FC flashing tool, requires <code>dfu-util</code> and / or <code>stmflash32</code> <code>flashgo</code> Tools to examine, download logs and erase from dataflash <code>bproxy</code> Black maps tiles, for those covert operations"},{"location":"Building-with-meson-and-ninja/#libraries","title":"Libraries","text":"<pre><code>$prefix/lib/libmwpclib.*so.x.0.0\n$prefix/lib/libmwpclib.a\n$prefix/lib/libmwpvlib.*so.x.0.0\n$prefix/lib/libmwpclib.a\n</code></pre> <p>Notes:</p> <p>1. This may either be the new Go executable or the legacy, less functional Ruby script.</p> <p>2. <code>fc-set</code> is a hard link to <code>fc-get</code></p>"},{"location":"Building-with-meson-and-ninja/#optional","title":"Optional","text":"<p>These are only built by explicit target name; they will be installed if built.</p> <pre><code># one of more of the following targets\nninja ublox-cli\nsudo ninja install\n</code></pre> Application Usage <code>ublox-cli</code> Ublox GPS tool <code>gmproxy</code> Proxy for certain commercial TMS"},{"location":"Building-with-meson-and-ninja/#troubleshooting-and-hints","title":"Troubleshooting and Hints","text":""},{"location":"Building-with-meson-and-ninja/#migrate-from-a-system-install-to-a-user-install","title":"Migrate from a system install to a user install","text":"<p>Either use separate build directories, or reconfigure.</p> <pre><code>cd _build\nsudo ninja uninstall\nmeson --reconfigure --prefix=$HOME/.local\nninja install\n</code></pre>"},{"location":"Building-with-meson-and-ninja/#fixing-build-permissions","title":"Fixing build permissions","text":"<p>If you install to system locations, it is possible that <code>sudo ninja install</code> will write as <code>root</code> to some of the install files, and they become non-writable to the normal user.</p> <ul> <li>In the <code>build</code> directory, run <code>sudo chown -R $USER .</code></li> <li>Consider migrating to a local install.</li> </ul>"},{"location":"Building-with-meson-and-ninja/#help","title":"Help!!!!","text":""},{"location":"Building-with-meson-and-ninja/#youve-installed-a-new-version-but-you-still-get-the-old-one","title":"You've installed a new version but you still get the old one!","text":"<p>If you used the <code>deb-install.sh</code> script, then it installed everything into <code>$HOME/.local/bin</code> (and other folders under <code>~/.local</code>). This is  nice because:</p> <ul> <li>mwp does not pollute the system directories;</li> <li>you don't need <code>sudo</code> to install it.</li> </ul> <p>Linux (like most other OS) has the concept of a <code>PATH</code>, a list of places where it looks for executable files). You can see this from a terminal:</p> <pre><code>## a colon separated list\necho $PATH\n</code></pre> <p>So check that <code>$HOME/.local/bin</code> is on <code>$PATH</code>; preferably near the front.</p> <p>If it is, then the problem may be  that the older mwp also exists elsewhere on the PATH, and the system will not re-evaluate the possible chain of locations if it previously found the file it wants.</p> <p>So, maybe you have an old install. You didn't remove it (alas); so the system thinks that mwp is <code>/usr/bin/mwp</code>; in fact it's now <code>$HOME/.local/bin/mwp</code></p> <p>If <code>$HOME/.local/bin</code> is on the PATH before <code>/usr/bin</code>, the you have two choices:</p> <pre><code># reset the path search\nhash -r\n# mwp, where art thou? Hopefully now is ~/.local/bin\nwhich mwp\n# From **this terminal** executing mwp will run the location reported by `which mwp`\n</code></pre> <p>or</p> <p>Log out, log in. The PATH will be re-evaluated.</p> <p>If <code>$HOME/.local/bin</code> is not on PATH. then it needs to be added to a login file (<code>.profile</code>, <code>.bashrc</code>, <code>.bash_profile</code> etc.). Modern distros do this for you, however if you've updated an older install you may have to add it yourself.</p> <pre><code># set PATH so it includes user's private bin if it exists\nif [ -d \"$HOME/bin\" ] ; then\n    PATH=\"$HOME/bin:$PATH\"\nfi\n\n# set PATH so it includes user's private bin if it exists\nif [ -d \"$HOME/.local/bin\" ] ; then\n    PATH=\"$HOME/.local/bin:$PATH\"\nfi\n</code></pre> <p>If an older (perhaps Makefile generated) mwp exists; then you should remove all evidence of an earlier system install.</p> <pre><code>find /usr -iname \\*mwp\\*\n</code></pre> <p>review the list and as root, delete the old files. Do similar for blackbox-decode.</p> <p>If you're content with the list, then (caveat emptor):</p> <pre><code>sudo find /usr -iname \\*mwp\\* -delete\n</code></pre> <p>You'll still have to remove non-empty directories manually.</p>"},{"location":"Building-with-meson-and-ninja/#ninja-error-loading-buildninja-no-such-file-or-directory","title":"\"ninja: error: loading 'build.ninja': No such file or directory","text":"<p>Something, or persons unknown has removed this file.</p> <pre><code>cd mwptools\nmeson setup --reconfigure _build --prefix ~/.local\ncd _build\nninja install\n</code></pre>"},{"location":"Building-with-meson-and-ninja/#error-dependency-not-found-tried-pkgconfig","title":"ERROR: Dependency \"?????\" not found, tried pkgconfig","text":"<p>mwp requires a new dependency. This ~~will~~ should be documented in the wiki Recent Changes document.</p> <ul> <li>Install the newly required dependencies</li> <li>Rerun your build</li> </ul>"},{"location":"Building-with-meson-and-ninja/#supporting-data-files","title":"Supporting data files","text":"File Target Usage <code>src/common/mwp_icon.svg</code> <code>$prefix/share/icons/hicolor/scalable/apps/</code> Desktop icon <code>src/mwp/org.stronnag.mwp.gschema.xml</code> <code>$prefix/share/glib-2.0/schemas/</code> Settings schema <code>src/mwp/volts.css</code> <code>$prefix/share/mwp/</code> Colours used by battery widget <code>src/mwp/beep-sound.ogg</code> <code>$prefix/share/mwp/</code> Alert sound <code>src/mwp/bleet.ogg</code> <code>$prefix/share/mwp/</code> Alert sound <code>src/mwp/menubar.ui</code> <code>$prefix/share/mwp/</code> Menu definition <code>src/mwp/mwp.ui</code> <code>$prefix/share/mwp/</code> UI definition <code>src/mwp/orange.ogg</code> <code>$prefix/share/mwp/</code> Alert sound <code>src/mwp/sat_alert.ogg</code> <code>$prefix/share/mwp/</code> Alert sound <code>src/mwp/mwp.desktop</code> <code>$prefix/share/applications/</code> Desktop launcher <code>src/mwp/mwp_complete.sh</code> <code>$prefix/share/bash-completion/completions/</code> bash completion for <code>mwp</code> <code>src/mwp/pixmaps</code> <code>$prefix/share/mwp/pixmaps/</code> UI Icons <code>docs/debian-ubuntu-dependencies.txt</code> <code>$prefix/share/doc/mwp/</code> Debian / Ubuntu dependencies <code>docs/fedora.txt</code> <code>$prefix/share/doc/mwp/</code> Fedora dependencies"},{"location":"Fly-By-Home-waypoints-%28inav-4-new-feature%29/","title":"Fly By Home Waypoints","text":""},{"location":"Fly-By-Home-waypoints-%28inav-4-new-feature%29/#introduction","title":"Introduction","text":"<p>For INAV 4.0, there is a \"FlyBy Home\" (FBH) waypoint modifier.</p> <p>This will set waypoints of types WAYPOINT, POSHOLD_TIME and LAND to execute at the arming home location (any safehome is ignored).</p> <p>The flight controller applies FBH behaviour to waypoints having one (or both) of the following characteristics:</p> <ul> <li>The latitude and longitude are 0</li> <li>The mission item <code>flag</code> field is set to 0x48 (72 decimal, 'H')</li> </ul> <p>In this case, the waypoint position is determined at run time (when the WP is actually used) and is set to the arming location. Note that the arming location must be set with a valid GPS fix.</p> <p>As the waypoint location is determined during execution, it is not stored; so downloading a completed mission will return the original locations, not the locations used during the mission.</p> <p>mwp will perform the following checks when importing WAYPOINT, POSHOLD_TIME and LAND points:</p> <ul> <li>If the latitude and longitude are 0, then the flag is set to 0x48</li> <li>If the flag is set to 0x48 and latitude and longitude are 0, the latitude and longitude are set to the mission file home (which may also be 0)</li> </ul> <p>This will ensure, as far as possible, that when such a mission is exported, it is safe on earlier INAV firmware. Note that this excludes using exactly 0,0 as an actual waypoint location (but 0.00001,0.00001 would be OK); in practical terms this is only likely to affect 007 villains.</p>"},{"location":"Fly-By-Home-waypoints-%28inav-4-new-feature%29/#implications-for-a-graphical-mission-planner","title":"Implications for a graphical mission planner","text":"<p>INAV (and mwp) do not require a planned homed location, so providing graphical support for waypoints whose location is indeterminate prior to mission execution is an interesting challenge. mwp incorporates a number of new features to support FBH.</p> <ul> <li>The concept of a planned home location is embedded in the planning function. The planned home location is indicated by a brown icon.</li> <li>The planned home location is stored as metadata in the XML mission files.</li> <li>The <code>flag</code> attribute has been added the XML mission file schema.</li> </ul> <p>The practical results being:</p> <ul> <li>A common mission file format continues to be used by mwp and the INAV configurator planner; maintaining mission file interoperability between the two applications.</li> <li>The planned home is recorded and may be used for subsequent re-planning of a mission.</li> <li>FBH waypoints have a position (the planned home) and the <code>flag</code> set. This means they will behave predictably when uploaded to older firmware.</li> </ul>"},{"location":"Fly-By-Home-waypoints-%28inav-4-new-feature%29/#usage-in-mwp","title":"Usage in mwp","text":"<p>A waypoint may set set to FBH (or have FBH removed) from either the right mouse popup or the MiWP List menu.</p> <p></p> <p>Legacy Images</p> <p>The images this section are from legacy mwp, however the capability is the same.</p> <p>In the first image, no FBH waypoints have been set. We can see the planned home (the brown icon, which was read from the extant mission file), and the popup menu and mission editor. Note: the popup entry has since been renamed 'Fly By Home' for consistency.</p> <p></p> 1. Initial state, no FBH <p>In the second image, WP2 has been made a FBH WP; we can see that it is now attached the home icon (and slightly faded). The home icon can be dragged, the attached FBH waypoint is no longer independently draggable.</p> <p></p> 2. WP2 set as FBH <p>In the third image, the planned home has been moved slightly north, WP2 has moved with it.</p> <p></p> 3. Home moved, WP2 moved as FBH <p>In the forth image, a second waypoint (WP14) has been set as FBH; it is also now locked to the planned home location.</p> <p></p> 4. Add WP14 as FBH <p>In the fifth image, the FBH attribute as been cleared on WP2; it has been independently dragged to a new location.</p> <p></p> 5. Remove FBH from WP2"},{"location":"Fly-By-Home-waypoints-%28inav-4-new-feature%29/#mwp-ground-control-station-and-replay-modes","title":"mwp Ground Control Station and Replay modes","text":"<p>If a mission is loaded when mwp is used as ground control station or for log replay, and the mission contains FBH waypoints, then the mission will be redrawn with the actual home location when the home location is established.</p>"},{"location":"Mission-Elevation-Plot-and-Terrain-Analysis/","title":"Mission Elevations","text":""},{"location":"Mission-Elevation-Plot-and-Terrain-Analysis/#overview","title":"Overview","text":"<p>Prior to INAV 3.0, mission altitudes are relative to the HOME (arming) location, which is not part of a mission definition. As a result, the pilot has to be ensure by some other means that the mission will clear any raised elevations on the mission path. For INAV 3.0, missions may be either relative to home or absolute (above a datum, see below).</p> <p>mwp includes a <code>mwp-plot-elevations</code> tool that performs mission and terrain analysis. This tool is platform independent and can be used without mwp for mission terrain analysis.</p> <p><code>mwp-plot-elevations</code> can rewrite the mission file with new elevations to provide a specified ground clearance.</p> <p>Legacy Images</p> <p>The images this section are from legacy mwp, however the capability is the same.</p>"},{"location":"Mission-Elevation-Plot-and-Terrain-Analysis/#video-tutorial-ui-integration","title":"Video Tutorial &amp; UI integration","text":"<p>From of 2018-12-06, <code>mwp-plot-elevations</code> is integrated into the <code>mwp</code> application.</p> <p></p> <p>There is a video tutorial.</p> <p>Obsolescence Note</p> <p>The video uses the older ruby application, but that doesn't really affect basic functionality.</p>"},{"location":"Mission-Elevation-Plot-and-Terrain-Analysis/#sample-output","title":"Sample output","text":"<p>Given the mission shown below:</p> <p></p> <p>and knowing that the land rises to the north and west, we can check that we do indeed have adequate clearance with the planned route and elevations:</p> <pre><code>    # for decimal '.' locales\n    $ mwp-plot-elevations -- home 50.9104826,-1.5350745 --plotfile profile.svg  west_field.mission\n    # for decimal ',' locales\n    $ mwp-plot-elevations --home \"50,9104826 -1,5350745\" --plotfile profile.svg  west_field.mission\n</code></pre> <p>where:</p> <ul> <li><code>west_field.mission</code> is the MW-XML mission file (via mwp, INAV configurator, [ezgui, mission planner for INAV] or impload)</li> <li>the <code>--home lat,lon</code> option defines the home position (which may also be set by the environment variable <code>MWP_HOME</code>), the command line having preference. Note that for modern mwp generated mission files, this information is provided in the mission file.</li> <li>The graphical output is <code>profile.svg</code>, via the <code>--plotfile</code> option.</li> </ul> <p>The result from this command is an SVG file, which can be displayed with common image tools (<code>eog</code>, ImageMagick <code>display</code> et al). It can also be converted to a raster image using e.g. <code>rsvg-convert</code>); a sample is shown below:</p> <p></p> <p>The red line represents the planned mission altitudes (which are defined relative to the estimated home location), and the green area represents the terrain. As we can see, we clear the hill (and other terrain), but cannot guarantee that we have LOS to lowest point of the mission, or that we're clear of the trees.</p> <p>We can also specify a \"clearance\" option, in the image below this was set to 16m. Where the blue line is above the red line, one should review that the mission elevations are adequate.</p> <p></p>"},{"location":"Mission-Elevation-Plot-and-Terrain-Analysis/#creating-a-new-mission-file","title":"Creating a new mission file","text":"<p>It is also possible (see command line options below) to write out a new mission that takes into account the clearance (<code>margin</code> parameter). If we then plot this new mission file, we can see that we are at least <code>margin</code> (in this example 16m) distance clear of the terrain.</p> <p></p> <p>Note that the original mission elevations are still taken into account. We can also ignore these, so we end up the absolute clearance distance above the terrain.</p> <pre><code>$ mwp-plot-elevations nm_west_field.mission --output /tmp/p1.mission --no-mission-alts\n</code></pre> <p></p>"},{"location":"Mission-Elevation-Plot-and-Terrain-Analysis/#dependencies","title":"Dependencies","text":"<p>The <code>mwp-plot-elevations</code> has NO dependency on mwp or Linux / FreeBSD, it can just as easily be run on MacOS or MS Windows. It does however has some dependencies:</p>"},{"location":"Mission-Elevation-Plot-and-Terrain-Analysis/#go-version","title":"Go version","text":"<ul> <li> <p>Go compiler (1.18 or later)</p> </li> <li> <p>gnuplot</p> </li> </ul> <p><code>gnuplot</code> is easily provided (by your distro or from a binary download).</p> <p>On all operating systems, the terrain graph is also plotted interactively, regardless of whether the <code>-p</code> (save SVG plot) option has been specified. The following shows the UI on Windows (it's pretty much the same on other OS).</p> <p></p>"},{"location":"Mission-Elevation-Plot-and-Terrain-Analysis/#caveats","title":"Caveats","text":"<ul> <li>3rd party terrain data is not guaranteed, either as to its absolute accuracy, nor to its coverage.</li> <li>Terrain data does not take into account other obstacles (trees, buildings, power lines etc).</li> <li>The tool does not faithfully model the vehicle motion. As multi-rotor and fixed-wing have different climb behaviours, this would be quite complex.</li> <li>RTH altitude has to specified if you wish to model it, and assumes 'AT LEAST' behaviour.</li> </ul>"},{"location":"Mission-Elevation-Plot-and-Terrain-Analysis/#datum","title":"Datum","text":"<p>Digital elevation services can use the WGS84 Ellipsoid or \"sea level\"; survey maps typically use AMSL (Above Mean Sea Level); GPS can report either or both of WGS Ellipsoid and above MSL (mean sea level). INAV and mwp both use AMSL.</p> <ul> <li>mwp currently uses locally (and transparently) hosted Mapzen DEM DEMs to obtain elevations. The user should apply a suitable margin.</li> <li>INAV firmware uses the GPS' AMSL value, so INAV and mwp are consistent on this.</li> </ul> <p>There may be a difference  between ASML, \"sea level\", WGS84 Ellipsoid and Survey heights, for example, for a test point of  54.149461 -4.669315 (summit of South Barrule, Isle of Man):</p> <ul> <li>Ordnance Survey (OS) Map (official survey): 483m</li> <li>Mapzen DEM (mwp) 476m</li> <li>OpenTopoData: 476m (mapzen)</li> <li>OpenTopoData: 485 (aster30m)</li> <li>Google Earth : 470m</li> <li>Bing Ellipsoid (Configurator): 526m</li> <li>Bing \"Sea Level\" (Configurator): 470m</li> </ul> <p>Note that while OpenTopo appears to be an accurate web service, it has significant issues that mean it is unacceptable as a reliable data source:</p> <ul> <li>Rate limited to one query per second.</li> <li>Limited to 100 points per query (INAV supports 120 point missions...).</li> <li>Limited to 1000 queries per 24 hour period.</li> </ul> <p>For these reasons, mwp used locally hosted Mapzen DEMs.</p> <p>There is a more detailed analysis of the available DEMs on the wiki.</p>"},{"location":"Mission-Elevation-Plot-and-Terrain-Analysis/#so-whos-right","title":"So who's right?","text":"<p>Many years ago, I took a GPS up South Barrule.</p> <p></p> <p>It reads 485m, this pretty much agrees with the OS (Survey) height (AMSL). So the real issue is with the DEM available online (either Bing or Google). The 'sea-level\" height DEM reports for this location is c. 13m below Ordnance Survey AMSL value whilst the WGS84 ellipsoid value is 43m above the OS AMSL value.</p>"},{"location":"Mission-Elevation-Plot-and-Terrain-Analysis/#command-line-help-and-options","title":"Command line help and options","text":"<pre><code>$ mwp-plot-elevations --help\n  -dump\n    Dump  internal data, exit\n  -force-alt int\n    Force Altitude Mode (-1=from mission, 0=Relative, 1=Absolute (default -1)\n  -home string\n    home as DD.dddd,DDD.dddd\n  -keep\n    Keep intermediate plt files\n  -margin int\n    Clearance margin (m)\n  -no-graph\n    No interactive plot\n  -no-mission-alts\n    Ignore extant mission altitudes\n  -output string\n    Revised mission file\n  -rth-alt int\n    RTH altitude (m)\n  -svg string\n    SVG graph file\n  -upland\n    Update landing elevation offset\n</code></pre> <p>Note that Go considers <code>-foo</code> and <code>--foo</code> to the equivalent. The ruby script requires the <code>--</code> notation.</p>"},{"location":"Mission-Elevation-Plot-and-Terrain-Analysis/#configuration-file","title":"Configuration File","text":"<p>As well as specifying options such as home location, clearance margin and RTH altitude on the command line (or as an environment variable), some or all of these options may be set in a configuration file.</p> <p><code>mwp-plot-elevations</code> looks for options in one of the following (in order) <code>./.elev-plot.rc</code> (i.e. current directory), <code>$HOME/.config/mwp/elev-plot</code>,  and <code>$HOME/.elev-plot.rc</code>. The configuration file is a plain text file containing <code>key=value</code> pairs. Blank lines and lines beginning with <code>#</code> are ignored; the following example illustrates the recognised keys. Note that  <code>$HOME/.config/mwp/elev-plot</code> is the preferred location, as this is also used by <code>mwp</code> to populate its graphical dialogue to launch the analysis tool.</p> <pre><code># settings for mwp-plot-elevations\nmargin = 16\nhome = 50.910476,-1.535038\n# for ',' locales\n# home = 50,910476 -1,535038\nrth-alt=25\n# 'sanity' is the home -&gt; WP1 distance check; default if not set here is 100m\nsanity = 200\n</code></pre>"},{"location":"Mission-Elevation-Plot-and-Terrain-Analysis/#usage-examples","title":"Usage Examples","text":"<pre><code># Interactive plot, using the above configuration file:\n$ mwp-plot-elevations nm_west_field.mission\n\n# Interactive plot. save SVG file\n$ mwp-plot-elevations --plotfile /tmp/mission.svg nm_west_field.mission\n\n# Interactive plot. save SVG file, rewrite mission file\n$ mwp-plot-elevations --plotfile /tmp/mission.svg --output new_west_field.mission nm_west_field.mission\n\n# Interactive plot. save SVG file, rewrite mission file, override clearance margin (20m)\n$ mwp-plot-elevationsb --plotfile /tmp/mission.svg --outout new_west_field.mission --margin 20 nm_west_field.mission\n\n# Interactive plot. save SVG file, rewrite mission file,\n# override clearance margin (20m), reduce RTH altitude (22m)\n$ mwp-plot-elevations --plotfile /tmp/mission.svg --output new_west_field.mission --margin 20 --rth-alt 22 nm_west_field.mission\n</code></pre> <p>Another contrived example ... create a mission in Google Earth (tied to ground), save as KMZ, convert to MWXML mission file with impload (0 altitude). Use <code>mwp-plot-elevations.rb</code> to calculate a safe mission.</p>"},{"location":"Mission-Elevation-Plot-and-Terrain-Analysis/#kmz-planned-in-google-earth","title":"KMZ planned in Google Earth","text":""},{"location":"Mission-Elevation-Plot-and-Terrain-Analysis/#conversion-tools","title":"Conversion tools","text":"<pre><code># convert the saved KMZ file to a MWXML mission file\n$ impload convert  /tmp/IOM.kmz /tmp/perwick.mission\n\n# Verify the elevations and clearance with plot-elevations.rb\n$ mwp-plot-elevations.rb -h  54.068826,-4.735472   -m 40 /tmp/perwick.mission\n</code></pre> <p>Looks OK (well, apart from the flying through the hill, due to impload's default altitude of 20m).</p> <p>If we specify that a new mission file be generated (<code>--output</code>), the updated mission is also plotted, and we can see that this clears the hill.</p> <pre><code>mwp-plot-elevations --home  54.068826,-4.735472 --margin 40 --output /tmp/perwick-ok.mission /tmp/perwick.mission\n</code></pre> <p></p> <p>It's not yet perfect, we could be more aggressive in reaching just the clearance altitude, but we clear the hill!.</p>"},{"location":"Mission-Elevation-Plot-and-Terrain-Analysis/#climb-and-dive-angle-report","title":"Climb and Dive Angle Report","text":"Mission used for climb /dive example <p>As of 2021-06, it's also possible to get climb and dive angles for the calculated mission. Before I added the WP12 =&gt; WP7 jump in the mission shown below, it was almost OK; below the desired clearance in a couple of places and just failing to clear the hill at WP15. After adding the JUMP, it hits the terrain pretty conclusively between WP12 and WP7. The modified mission is interesting, as it has to adjust the WPs within the JUMP for the worst case (so the WP7, the second pass is definitive).</p> <p>The final result:</p> <p></p> <p>We also get a climb / dive report, currently to STDOUT and <code>$TMP/mwpmission-angles.txt</code> (tab separated for easy analysis).</p> <pre><code>$ mwp-plot-elevations --margin 25 -no-mission-alts --output /tmp/n.mission \\\n --home 54.125205,-4.730322 -rth-alt 40 mwp/missions/IoM/barrule-jump.mission\nHOME -  WP1  21.3\u00b0  (climb)\n WP1 -  WP2 -13.9\u00b0  (dive)\n WP2 -  WP3  16.2\u00b0  (climb)\n WP3 -  WP4  -8.1\u00b0  (dive)\n WP4 -  WP5  11.4\u00b0  (climb)\n WP5 -  WP6   4.9\u00b0  (climb)\n WP6 -  WP7  -6.6\u00b0  (dive)\n WP7 -  WP8  -8.9\u00b0  (dive)\n WP8 -  WP9   1.3\u00b0  (climb)\n WP9 - WP10   7.0\u00b0  (climb)\nWP10 - WP11   4.4\u00b0  (climb)\nWP11 - WP12 -11.9\u00b0  (dive)\nWP12 -  WP7   0.3\u00b0  (climb)\n WP7 -  WP8  -8.9\u00b0  (dive)\n WP8 -  WP9   1.3\u00b0  (climb)\n WP9 - WP10   7.0\u00b0  (climb)\nWP10 - WP11   4.4\u00b0  (climb)\nWP11 - WP12 -11.9\u00b0  (dive)\nWP12 - WP14   2.5\u00b0  (climb)\nWP14 - WP15  -5.2\u00b0  (dive)\nWP15 -  RTH  -3.6\u00b0  (dive)\n</code></pre> <p>If you run mwp-plot-elevations via mwp, the information is presented in a separate window.</p> <p></p> <p>mwp can also highlight any legs that exceed user-defined (not 0) climb and dive angle limits. However, it's up to you to work out the best solution.</p> <p></p> <p>The steep hill and valley at the start are just too much here; best to reroute.</p>"},{"location":"Replaying-Ardupilot-logs/","title":"Ardupilot log replay","text":""},{"location":"Replaying-Ardupilot-logs/#requirements","title":"Requirements","text":"<p>It is possible to replay Ardupilot logs in the same way as one can replay blackbox, OpenTX / EdgeTX and BulletGCCS logs. This also requires flightlog2x tools 1.0.24 or more recent.</p> <ul> <li>It is necessary to install an Ardupilot tool to decode the logs mavlogdump.py.</li> </ul> <p>As the author does not have any (useful) AP logs, contributions are welcome.</p> <p></p>"},{"location":"Support-for-inav-3.0-WP-features/","title":"mwp and INAV 3.0 Mission Updates","text":""},{"location":"Support-for-inav-3.0-WP-features/#overview","title":"Overview","text":"<p>INAV 3.0 adds a couple of changes to INAV mission planning:</p> <ul> <li>Absolute WP altitudes</li> <li>Land WP ground elevation setting</li> </ul>"},{"location":"Support-for-inav-3.0-WP-features/#absolute-wp-altitudes","title":"Absolute WP altitudes","text":"<p>For Multiwii and INAV prior to 3.0, waypoint altitudes were always relative to the arming location. If you always fly in a flat area, or always arm at the same point, this wasn't really an issue; you could always use mwp's terrain analysis to check that you'd clear any obstructions.</p> <p>However, if you armed some (vertical) distance from the arming point assumed when the plan was created, the absolute, (AMSL) elevation of the WP would differ by the ground difference between the assumed arming point at planning time and the actual arming point at take off. In the worst case (arming at an 'zero' absolute elevation well below the 'assumed at planning time' location), this could result in automated flight into terrain, which is generally undesirable.</p> <p>Absolute mission altitudes addresses this issue, as the AMSL elevation of the WP is fixed and does not depend on arming location.</p>"},{"location":"Support-for-inav-3.0-WP-features/#land-wp-ground-elevation-setting","title":"Land WP ground elevation setting","text":"<p>A similar issue existed prior to INAV 3.0 for the LAND WP; the initial implementation assumed that the LAND WP site ground elevation was at approximately the same ground elevation as the arming location. INAV computes landing behaviour based on relative altitude from home; if the actual LAND site was lower than home, then the descent would be slow; if it was higher, then slowdown might not occur and there would be a hard landing (for MR). For FW the final approach and motor-off would be sub-optimal.</p> <p>The required land elevation uses the <code>P2</code> WP parameter, in metres.</p> <ul> <li>If LAND is a relative altitude WP, then this is the altitude difference between the assumed home and the LAND location.</li> <li>If LAND is an absolute altitude WP, then this is the absolute (AMSL) altitude of the LAND location.</li> </ul>"},{"location":"Support-for-inav-3.0-WP-features/#mwp-support-for-30-features","title":"mwp support for 3.0 features","text":"<p>mwp supports the new feature in the WP Editor and Terrain Analysis.</p>"},{"location":"Support-for-inav-3.0-WP-features/#terrain-analysis","title":"Terrain Analysis","text":"<p>mwp's terrain analysis function has been upgraded to handle INAV 3.0 features (Relative / Absolute Elevations, Land Ground Elevation). The mwp terrain analysis article describes the new analysis tool.</p> <p>In the image below, the dialogue has been enhanced to allow selection of the altitude mode and adjustment of LAND elevation. The orange graph line shows the generated mission with a 40m clearance of all obstacles.</p> <p></p> <p>The user can select the following altitude modes:</p> <p></p> <ul> <li>Mission - use the altitude mode from the mission</li> <li>Relative to home</li> <li>Absolute (AMSL).</li> </ul>"},{"location":"Support-for-inav-3.0-WP-features/#further-reading","title":"Further reading","text":"<p>The INAV wiki describes WP mission parameters in some detail.</p> <p>Discussion of the meaning of \"sea level\". It's confusing.</p>"},{"location":"dock/","title":"Side Bar Concepts and Usage","text":""},{"location":"dock/#side-bar-overview","title":"Side Bar Overview","text":"<p>The Side Bar, items 4 and 6 in the main window guide provides an area for optional widgets.</p> <p></p> <p>A very simple, bespoke panel comprising embedded resizeable panes has been implemented.</p> <ul> <li>The panel consists for four vertical panels</li> <li>The top panel can hold three horizontal panes</li> <li>The other panels can hold two horizontal panes.</li> </ul> <p>Each pane has a divider line between it and adjacent panels. The size of individual panes may be adjusted by moving the dividers. mwp will remember the relative sizing of the panels.</p> <p>The main sidebar (dock) controls are shown below. Please note some of these images are from the legacy version of mwp.:</p>"},{"location":"dock/#side-bar-items-dockets","title":"Side Bar Items (Dockets)","text":"<p>The following items are provided.</p>"},{"location":"dock/#artificial-horizon","title":"Artificial Horizon","text":""},{"location":"dock/#direction-view","title":"Direction View","text":""},{"location":"dock/#flight-view","title":"Flight View","text":""},{"location":"dock/#rssi-lq-status","title":"RSSI / LQ Status","text":""},{"location":"dock/#battery-monitor","title":"Battery Monitor","text":""},{"location":"dock/#vario-view","title":"Vario View","text":""},{"location":"dock/#wind-estimator-new-gtk4","title":"Wind Estimator (new / Gtk4)","text":""},{"location":"dock/#side-bar-configuration","title":"Side Bar Configuration","text":"<p>The configuration may be user defined by a simple text file <code>~/.config/mwp/panel.conf</code>.</p> <p>Each entry is defined by a comma separated line defining the panel widget name, the row (0-3) and the column (0-2) and an optional minimum size (only required for the artificial horizon).</p> <p>The default panel is defined (in the absence of a configuration file) as:</p> <pre><code># default widgets\nahi,0,1,100\nrssi, 1, 0\ndirn, 1, 1\nflight, 2, 0\nvolts, 3, 0\n</code></pre> <p>Which appears as: </p>"},{"location":"dock/#in-line-editor","title":"In line editor","text":"<p>From 25.04.15, it is possible to edit the panel in-line. A popup menu is displayed on right mouse press on a panel pane. Note that in the default configuration, some of the pane dividers may be flush against an edge, and it will be necessary to drag the dividers to expose all the unused panels.</p> <p>On a blank pane, the popup menu offers all non-deployed widgets. Here only \"WindSpeed\" is available to be added.</p> <p></p> <p>The result after adding \"WindSpeed\":</p> <p></p> <p>When the popup menu is invoked for a populated pane, only \"Remove Item\" is available.</p> <p>Video example showing right mouse button menu usage.</p>"},{"location":"dock/#available-widgets","title":"Available Widgets","text":"<p>The available panel widgets are named as:</p> Name Usage <code>ahi</code> Artificial horizon <code>dirn</code> Direction comparison <code>flight</code> \"Flight View\" Position / Velocity / Satellites etc, <code>volts</code> Battery information <code>vario</code> Vario indicator <code>wind</code> Wind Estimator (BBL replay only) <p>No other legacy widgets have been migrated.</p> <p>So using the following <code>~/.config/mwp/panel.conf</code></p> <pre><code># default + vario + wind widgets\nahi, 0, 1, 100\nvario,0,2\nrssi, 0, 0\nwind, 1, 0\ndirn, 1, 1\nflight, 2, 0\nvolts, 3, 0\n</code></pre> <p>would appear as: </p> <p>Panel sizes have been adjusted to make best use of available space.</p>"},{"location":"gcs-features/","title":"Ground Control Station Features","text":""},{"location":"gcs-features/#gcs-usage","title":"GCS Usage","text":""},{"location":"gcs-features/#basic-functionality","title":"Basic functionality","text":"<ul> <li>Real time tracking of vehicle via telemetry</li> <li>Audio status reports</li> <li>OSD style WP information</li> <li>Radar view of other aircraft</li> <li>In picture video feed display.</li> </ul>"},{"location":"gcs-features/#vehicle-track-waypoints-colour-schemes","title":"Vehicle Track / Waypoints Colour Schemes","text":""},{"location":"gcs-features/#flight-mode-colours","title":"Flight Mode colours","text":"Mode Colour Piloted Cyan <code>#00ffff</code> Alt Hold Blue <code>#03c0fa</code> Cruise Purple <code>#bf88f7</code> FW Land Pink <code>#ff92f0</code> PosHold Green <code>#4cfe00</code> RTH Yellow <code>#fafa00</code> WP White <code>#ffffff</code> Undefined Orange <code>#ff8000</code>"},{"location":"gcs-features/#waypoint-colours","title":"Waypoint Colours","text":"Type Colour WAYPOINT Cyan <code>#00ffff</code> POSHOLD_TIME Purple <code>#9846eb</code> POSHOLD_UNLIM (MW) Green <code>#4cfe00</code> RTH Blue <code>#00aaff</code> LAND Pink <code>#ff9af0</code> JUMP Magenta <code>#ed51d7</code> SET_POI / SET_HEAD Yellow <code>#ff9af0</code> UNDEFINED Grey <code>#e0e0e0</code> (Home) Brown <code>#8c4343</code>"},{"location":"gcs-features/#osd-information","title":"OSD information","text":"<p>When flying waypoints, if the mission is also loaded into mwp, mwp can display some limited \"OSD\" information.</p> <p></p> <p>Various settings (colour, items displayed etc.) are defined by settings.</p>"},{"location":"gcs-features/#gcs-location-icon","title":"GCS Location Icon","text":"<p>A icon representing the GCS location can be activated from the View/GCS Location\" menu option.</p> <p>By default, it will display a tasteful yellow / blue icon which one may drag around. It has a few other  purposes beyond showing some user specified location (but see below).</p> <p></p> <p>If you don't like the icon, you can override it by creating your own icon.</p> <ul> <li> <p>If <code>gpsd</code> is detected (on <code>localhost</code>), then the position will be driven by <code>gpsd</code>, as long as it has  a 3D fix.</p> </li> <li> <p>The one  usage is when inav-radar is active; if the GCS icon is enabled (either by manual location or driven by <code>gpsd</code>), then rather than being a passive 'GCS' node, mwp will masquerade as an 'INAV' node and advertise the GCS (icon) location to other nodes. This implies that you have sufficient LoRa slots to support this node usage. </p> </li> <li>Another use is for INAV Follow Me where the followed location can be driven by <code>gpsd</code>.</li> </ul>"},{"location":"inav-4.0-multi-missions/","title":"INAV 4.0 Multi-Mission Support","text":""},{"location":"inav-4.0-multi-missions/#overview","title":"Overview","text":"<p>Note: The images in this section are from the legacy version, however the concepts are the same.</p> <p>In INAV 4.0, the FC supports \"multi-missions\", that is allowing the user to upload and store multiple missions.</p> <p>The mission to be executed may be set when the mission set is uploaded, or selected by OSD command (or stick command).</p>"},{"location":"inav-4.0-multi-missions/#mwp-support","title":"mwp support","text":"<p>The means by which this function is provided by the FC is a little inconvenient (for the planner) but expedient; it's hard to see how else it could have been implemented.</p> <p>In general and in summary, the functionality allows multiple missions to exist in a single \"mission file\" and either one or all of those mission can be uploaded to the FC.</p> <p>When a \"multi-mission\" set is downloaded from the FC, mwp will set the active mission to that set as active in the FC.</p> <p>When a \"multi-mission\" set is uploaded to the FC, mwp will set the active FC mission to its active mission.</p>"},{"location":"inav-4.0-multi-missions/#mwp-changes","title":"mwp changes","text":""},{"location":"inav-4.0-multi-missions/#top-bar","title":"Top Bar","text":"<p>The top bar how includes an \"Active Mission\" item. This always has mission 1 (the legacy mission) and offers \"New\", allowing multiple missions to be maintained in one mwp session.</p> <p></p>"},{"location":"inav-4.0-multi-missions/#open-mission-file","title":"Open Mission file","text":"<p>The file open dialog has a preview pane that displays the missions in a multi-mission file. The user can select the mission to be the active mission.</p> <p></p>"},{"location":"inav-4.0-multi-missions/#append-mission-file","title":"Append Mission File","text":"<p>It is now possible to append an existing mission file (which may hold multiple missions) into a multi-mission set. This uses same dialog as Open Mission File.</p> <p></p>"},{"location":"inav-4.0-multi-missions/#save-as-mission-file","title":"Save As Mission file","text":"<p>The file \"Save as\" dialog has an option to exclude specific segments from a multi-mission (via the Remove Segments from file button in the following image). Note that \"Save\" will always save all mission segments.</p> <p></p> <p>In this case, only segment 1 of the multi-mission would be saved.</p>"},{"location":"inav-4.0-multi-missions/#upload-download-menu-options","title":"Upload / Download Menu Options","text":"<p>The menu options reflect the new capability to upload all or the active mission. The \"Save to EEPROM\" option may also change to this pattern in future.</p> <p></p>"},{"location":"inav-4.0-multi-missions/#multi-mission-manager","title":"Multi-Mission Manager","text":"<p>The Edit menu has a Multi Mission Manager option. This allows the user to delete one or more missions from a multi-mission scenario.</p> <p></p>"},{"location":"inav-4.0-multi-missions/#fc-limits","title":"FC Limits","text":"<p>INAV 4.0 limits the total number of waypoints to 120 and the number of mission segments within a multi-mission scenario to 9.</p> <p>mwp will allow the user to exceed these limits while creating / editing multi-mission scenarios, but enforces the limits for upload. So it would be possible to open / append files containing a total of (for example) 11 mission segments and 150 WPs. It would be necessary to reduce the mission set to the FC limits before it could be uploaded.</p>"},{"location":"inav-4.0-multi-missions/#legacy","title":"Legacy","text":"<p>mwp still supports prior FC firmware, including MW. It is a bug if this is not the case. However, the user needs to be aware of the capabilities of the FC firmware.</p>"},{"location":"inav-4.0-multi-missions/#caveats","title":"Caveats","text":"<ul> <li>This is all quite novel and has required some significant changes in mwp; however it appears quite stable.</li> <li>By default, mwp writes mission files in \"reset / per segment metadata\" style.</li> <li>Multi-mission files may be written in the (IMO) ugly / confusing \"sequential\" style required by the configurator if the environment variable CFG_UGLY_XML is set (to any value). See the schema definition for details. mwp can read either style.</li> </ul>"},{"location":"inav-4.0-multi-missions/#example-xml-multi-mission-file","title":"Example XML multi-mission file","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;mission&gt;\n  &lt;!--mw planner 0.01--&gt;\n  &lt;version value=\"42\"&gt;&lt;/version&gt;\n  &lt;mwp save-date=\"2021-11-11T07:22:43+0000\" zoom=\"14\" cx=\"-3.2627249\" cy=\"54.5710168\" home-x=\"-3.2989342\" home-y=\"54.5707123\" generator=\"mwp (mwptools)\"&gt;&lt;details&gt;&lt;distance units=\"m\" value=\"3130\"&gt;&lt;/distance&gt;&lt;nav-speed units=\"m/s\" value=\"10\"&gt;&lt;/nav-speed&gt;&lt;fly-time units=\"s\" value=\"319\"&gt;&lt;/fly-time&gt;&lt;loiter-time units=\"s\" value=\"0\"&gt;&lt;/loiter-time&gt;&lt;/details&gt;&lt;/mwp&gt;\n  &lt;missionitem no=\"1\" action=\"WAYPOINT\" lat=\"54.5722109\" lon=\"-3.2869291\" alt=\"660\" parameter1=\"0\" parameter2=\"0\" parameter3=\"0\" flag=\"0\"&gt;&lt;/missionitem&gt;\n  &lt;missionitem no=\"2\" action=\"WAYPOINT\" lat=\"54.5708178\" lon=\"-3.2642698\" alt=\"755\" parameter1=\"0\" parameter2=\"0\" parameter3=\"0\" flag=\"0\"&gt;&lt;/missionitem&gt;\n  &lt;missionitem no=\"3\" action=\"WAYPOINT\" lat=\"54.5698227\" lon=\"-3.2385206\" alt=\"513\" parameter1=\"0\" parameter2=\"0\" parameter3=\"0\" flag=\"165\"&gt;&lt;/missionitem&gt;\n  &lt;mwp save-date=\"2021-11-11T07:22:43+0000\" zoom=\"15\" cx=\"-3.2778311\" cy=\"54.5568837\" home-x=\"-3.2983737\" home-y=\"54.5622331\" generator=\"mwp (mwptools)\"&gt;&lt;details&gt;&lt;distance units=\"m\" value=\"9029\"&gt;&lt;/distance&gt;&lt;nav-speed units=\"m/s\" value=\"10\"&gt;&lt;/nav-speed&gt;&lt;fly-time units=\"s\" value=\"929\"&gt;&lt;/fly-time&gt;&lt;loiter-time units=\"s\" value=\"0\"&gt;&lt;/loiter-time&gt;&lt;/details&gt;&lt;/mwp&gt;\n  &lt;missionitem no=\"1\" action=\"WAYPOINT\" lat=\"54.5599696\" lon=\"-3.2958555\" alt=\"236\" parameter1=\"0\" parameter2=\"0\" parameter3=\"0\" flag=\"0\"&gt;&lt;/missionitem&gt;\n  &lt;missionitem no=\"2\" action=\"WAYPOINT\" lat=\"54.5537978\" lon=\"-3.2958555\" alt=\"136\" parameter1=\"0\" parameter2=\"0\" parameter3=\"0\" flag=\"0\"&gt;&lt;/missionitem&gt;\n  &lt;missionitem no=\"3\" action=\"WAYPOINT\" lat=\"54.5547933\" lon=\"-3.2864141\" alt=\"238\" parameter1=\"0\" parameter2=\"0\" parameter3=\"0\" flag=\"0\"&gt;&lt;/missionitem&gt;\n  &lt;missionitem no=\"4\" action=\"WAYPOINT\" lat=\"54.5597705\" lon=\"-3.2695913\" alt=\"570\" parameter1=\"0\" parameter2=\"0\" parameter3=\"0\" flag=\"0\"&gt;&lt;/missionitem&gt;\n  &lt;missionitem no=\"5\" action=\"WAYPOINT\" lat=\"54.5552910\" lon=\"-3.2598066\" alt=\"502\" parameter1=\"0\" parameter2=\"0\" parameter3=\"0\" flag=\"0\"&gt;&lt;/missionitem&gt;\n  &lt;missionitem no=\"6\" action=\"JUMP\" lat=\"0.0000000\" lon=\"0.0000000\" alt=\"0\" parameter1=\"1\" parameter2=\"1\" parameter3=\"0\" flag=\"165\"&gt;&lt;/missionitem&gt;\n  &lt;mwp save-date=\"2021-11-11T07:22:43+0000\" zoom=\"20\" cx=\"-3.2501935\" cy=\"54.5714148\" generator=\"mwp (mwptools)\"&gt;&lt;details&gt;&lt;distance units=\"m\" value=\"0\"&gt;&lt;/distance&gt;&lt;/details&gt;&lt;/mwp&gt;\n  &lt;missionitem no=\"1\" action=\"WAYPOINT\" lat=\"54.5714148\" lon=\"-3.2501935\" alt=\"50\" parameter1=\"0\" parameter2=\"0\" parameter3=\"0\" flag=\"165\"&gt;&lt;/missionitem&gt;\n&lt;/mission&gt;\n</code></pre> <p>Download sample mission</p>"},{"location":"licence-misc-info/","title":"Licence and Alternative Tools","text":"<p>GPL v3 or later. (c) Jonathan Hudson and contributors.</p>"},{"location":"licence-misc-info/#alternative-tools","title":"Alternative Tools","text":"<p>In addition to mwp, the following INAV mission planners (and GCS in some cases) exist, in various states of usefulness, at least:</p> <ul> <li>INAV Configurator (for inav 2.x), limited planning support</li> <li>INAV Configurator (for inav 3.x and later), supports almost all current WP types. Development branch / Preview builds are also available; current and previews may be augmented with impload to upload missions to 2.x firmware.</li> <li>Drone Helper (Windows 10), reportedly discontinued 2024-09.</li> <li>Ezgui, MissionPlanner for INAV (Android) Unsupported, obsolete. May not work with either contemporary Android or INAV firmware.</li> <li>Mobile Flight (IOS) Unsupported, obsolete. May not work with either contemporary IOS or INAV firmware.</li> <li>Apmplanner2 with impload. Ardupilot planner, missions can be uploaded to INAV using impload.</li> <li>qgroundcontrol with impload. Ardupilot planner, missions can be uploaded to INAV using impload.</li> <li>Side-Pilot with impload  (untested). Ardupilot mission planner and telemetry viewer for IOS. Recommended by a 3rd party,</li> </ul> <p>The following alternatives exist for mwp's survey / area planner :</p> <ul> <li>iforce2d's online planner</li> <li>qgroundcontrol with impload. Generic surveys and corridor plans are supported. Example images.</li> </ul>"},{"location":"misc-ui-elements/","title":"Miscellaneous UI Elements","text":""},{"location":"misc-ui-elements/#preferences","title":"Preferences","text":"<p>The \"Edit &gt; Preferences\" menu provides a UI for some <code>gsetting</code> / <code>dconf</code> settings. The settings here are applied immediately if 'Apply' is clicked.</p>"},{"location":"misc-ui-elements/#general-preferences","title":"General Preferences","text":""},{"location":"misc-ui-elements/#units-preferences","title":"Units Preferences","text":"<p>Unit preferences should be instantly reflected in the UI when 'Apply' is clicked.</p>"},{"location":"misc-ui-elements/#favourite-places","title":"Favourite Places","text":"<p>mwp maintains a list of favourite places, from \"View &gt; Centre on Location\" menu item.</p> <p></p> <p>The \"Place\" combo menu holds all places defined in <code>~/.config/mwp/places</code> (see the configuration reference).</p> <p>For convenience, clicking the 'Editor ...' button will load the \"Places Editor\".</p> <p></p> <ul> <li>New items are added with the + button.</li> <li> <p>Locations can be edited clicking the \"Document Edit\" icon at the end of the row.   </p> </li> <li> <p>The context (right mouse button) menu:</p> <ul> <li>Zoom to location : Zooms to the place</li> <li>Set location from current view : Sets the location to the centre of the current map view</li> <li>Delete location : Deletes the location without question.</li> </ul> </li> <li>OK Saves the locations to <code>~/.config/mwp/places</code></li> <li>Closing using the window manager X icon closes without saving.</li> </ul>"},{"location":"misc-ui-elements/#useful-shortcuts","title":"Useful Shortcuts","text":"<ul> <li>Control-D : Enters distance measure mode. Click on the map to add more points to measure distance along a path. Press Control-D again to get the distance, with an option to continue to add points. The points may also be dragged.</li> </ul> <p>In the image, we are measuring the distance between the take off home (brown icon) and the landing home (orange icon); the distance markers are the black/white circles. Ctrl-D has been pressed a second time to display the result.</p> <ul> <li>Control L : Control-Shift L : Copy the pointer location to the clip board (Ctrl-L, decimal degrees, Ctrl-Shift-L formatted).</li> </ul>"},{"location":"misc-ui-elements/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":""},{"location":"misc-ui-elements/#menu-and-replay","title":"Menu and Replay","text":""},{"location":"misc-ui-elements/#map-and-tools","title":"Map and Tools","text":""},{"location":"mission-editor/","title":"Mission Editor","text":""},{"location":"mission-editor/#overview","title":"Overview","text":"<p>The following chapters provide specific information for advanced INAV capability topics:</p> <ul> <li>INAV multi-missions</li> <li>INAV fly-by-home</li> </ul> <p>Please note that some of the images in this chapter are from the legacy version of mwp.</p>"},{"location":"mission-editor/#map-features","title":"Map Features","text":"<p>Missions may be added on the map by enabling mission add mode:</p> <p></p> <p>This will:</p> <ul> <li>Display a notional home location (brown icon)</li> <li>Allow new WPs to be created by clicking on the map</li> </ul> <p>WPs have a context popup menu via right click on a WP icon</p> <p></p> <p>Almost all functions are available here, however some advanced functions, acting on multiple WP,  etc. requires the tabular mission editor.</p>"},{"location":"mission-editor/#edit-waypoint","title":"Edit Waypoint","text":"<p>The Edit Waypoint option opens an edit form for the current waypoint. The items displayed depend on the type of waypoint.</p> <p></p> <p>In this image, note:</p> <ul> <li>The Way Point type <code>WAYPOINT</code>.</li> <li>The WP location (and absolute elevation AMSL)</li> <li>The WP Altitude, either absolute (here the ASML box is checked) or relative. Whether this is a Fly By Home (FBH) waypoint</li> <li>The speed (m/s)</li> <li>Additional attributes which may be enabled or disabled:<ul> <li>Set Heading (-1 to clear a previous set head)</li> <li>JUMP parameters (-1 Iterations == infinite)</li> <li>Return to Home (and land).</li> </ul> </li> <li>INAV 6.0, user defined actions 1-4. Invoked via INAV logic conditions.</li> <li>INAV 7.1.0, edit FW Approach (Auto-land) parameters for <code>LAND</code> WP types.</li> </ul> <p>Multiple attributes may be set.</p> <p>If the AMSL button is toggled, and a valid planned home location is set, then the altitude will be adjusted. For the above example, if the AMSL box is cleared, the dialogue shows:</p> <p></p> <p>Note that the Altitude box has an orange border to show that the altitude has been automatically updated.</p> <p>If there is no planned home location, and the AMSL box is toggled, then the Altitude box assumes a red border to indicate to the user that manual intervention is required.</p> <p></p> <p>In the above image, a relative altitude of 16m has been toggled to absolute; there is no home position, so the altitude entry has a red border, as this is now below the absolute altitude of the terrain.</p> <p>Note also that this example has multiple option set (SET HEAD and JUMP).</p> <p>For a <code>LAND</code> WP, the FW Approach parameters are available.</p> <p></p>"},{"location":"mission-editor/#mission-wp-list","title":"Mission WP List","text":"<p>The Mission WP List may be invoked from the WP context menu.</p> <p>It provides the following functions:</p> <ul> <li>Create, delete, modify, reorder waypoints.</li> <li>Context sensitive column titles for parameters</li> <li>Bulk updates (altitudes, speeds, position offsets)</li> <li>Automated path (polygon around a shape) generation.</li> <li>Terrain Analysis and Line of Sight Analysis.</li> </ul> <p>There is a right mouse context menu, the availability of items depending on whether zero, one or multiple items are selected.</p> <p></p> <p>The <code>param3</code> value is presented as:</p> <ul> <li><code>R</code> : Relative Altitude</li> <li><code>A</code> : Absolute (AMSL) Altitude</li> <li><code>[1234]</code> : User action set</li> </ul> <p>The <code>flags</code> values are presented as:</p> <ul> <li><code>EoM</code> : End of mission marker</li> <li><code>FBH</code> : Fly By Home (FBH) waypoint</li> </ul>"},{"location":"mission-editor/#common-operations","title":"Common Operations","text":"<p>Many of the operations described below are shown in the videos, which probably provide a clearer explanation that any textual description could. Note also that many of these (images and videos) are legacy, but the concepts are still valid.</p>"},{"location":"mission-editor/#add-shape","title":"Add Shape","text":"<p>If a SET POI point is added to the mission, (there may also be other extant way-points), this option will display a dialogue to enter the number of points in a shape, the radial distance (from the SET POI to each point), an offset angle and the direction of rotation. i.e this defines a polygon around the POI.</p> <p></p> <ul> <li>The offset is relative to North. If you wanted the lines to be horizontal / vertical, specify an offset of 45\u00b0 for a square.</li> <li>Shape points are appended to any extant mission points, and the shape tool may be invoked multiple times, for example to create 'concentric' circles.</li> <li>Once the shape is generated, the <code>SET_POI</code> point may be deleted, unless you really want <code>SET_POI</code> functionality.</li> </ul>"},{"location":"mission-editor/#location-updates","title":"Location Updates","text":"<p>Bulk location updates may be applied to selected waypoints.</p> <p></p> <p>If an item if left black (or 0), then no adjustment is applied to that axis. Offsets are in metres, regardless of the user's preference distance unit.</p>"},{"location":"mission-editor/#speed-and-altitude-updates","title":"Speed and Altitude updates","text":"<p>Bulk speed and altitude updates may be applied to selected waypoints. The altitude update allows either relative (to home) to absolute (ASL) altitudes.</p>"},{"location":"mission-editor/#preview-mission","title":"Preview Mission","text":"<p>\"Flys\" an aircraft icon around the mission; this may be useful for predicting the behaviour of multiple embedded JUMPs.</p>"},{"location":"mission-editor/#clear-mission","title":"Clear Mission","text":"<p>The Clear Mission option clears the mission. There is no confirmation, so be sure you really want to do this.</p>"},{"location":"mission-editor/#uncommitted-changes","title":"Uncommitted Changes","text":"<p>If mwp detects uncommitted changes when opening a new mission / downloading from the FC / cleanly exiting the application, then the user is presented with the following dialogue.</p> <p></p> <ul> <li>Don't Save : The mission is not saved, the original action completes.</li> <li>Save : The user is presented with a Save Dialog to save the mission.</li> <li>Cancel : The original action is cancelled.</li> </ul>"},{"location":"mission-editor/#advanced-wp-types-video-tutorials","title":"Advanced WP types / Video Tutorials","text":""},{"location":"mission-editor/#jump-poshold-timed-land","title":"JUMP, POSHOLD TIMED, LAND","text":"<p>Video example setting up JUMP, POSHOLD TIMED and LAND waypoints.</p>"},{"location":"mission-editor/#set_poi-set_head-as-mission-elements","title":"SET_POI, SET_HEAD as mission elements","text":"<p>Video example SET_POI and SET_HEAD (real mission usage).</p>"},{"location":"mission-editor/#mission-preview","title":"Mission Preview","text":"<p>Video example of preview for a complex (multiple jumps, timed POSHOLD) mission (preview from the first video).</p>"},{"location":"mqtt---bulletgcss-telemetry/","title":"BulletGCSS Telemetry","text":""},{"location":"mqtt---bulletgcss-telemetry/#mwp-requirements","title":"mwp requirements","text":"<p>mwp works with the web-based Ground Control Station BulletGCSS MQTT protocol, tested with both a <code>fl2mqtt</code> simulation and a recorded live session.</p> <p>The MQTT component is build if either <code>paho-mqtt</code> or <code>mosquitto</code> libraries are detected; <code>paho-mtqq</code> is preferred.</p> <pre><code>## Arch ##\nyay -S paho-mqtt-c-git  ## or you favourite AUR helper\n# or #\nsudo pacman -S mosquitto\n\n## Debian and derivatives ##\n### Debian testing / Ubuntu 20.10 + for paho ###\nsudo apt install libpaho-mqtt-dev\n# or #\nsudo apt install libmosquitto-dev\n\n## Fedora ##\ndnf install paho-c-devel\n# or #\ndnf install mosquitto-devel\n\n## FreeBSD ##\n## paho-mqtt\n# Clone github repo and build from source. Configure with cmake -DPAHO_WITH_SSL=true ..\ngit clone https://github.com/eclipse/paho.mqtt.c.git\ncd paho.mqtt.c\nmkdir build\ncd build\ncmake -DPAHO_WITH_SSL=true ..\nmake &amp;&amp; sudo make install\n\n# or #\nsudo pkg install mosquitto\n</code></pre> <p>If you have both <code>paho-mqtt</code> and <code>mosquitto</code> installed, then <code>paho-mqtt</code> is preferred.</p>"},{"location":"mqtt---bulletgcss-telemetry/#usage","title":"Usage","text":"<p>Once mwp is built with a MQTT library, you can use an MQTT URL as a device name, for example for the demo that runs every other hour (00:00, 02:00 .. 22:00) UTC on <code>broker.emqx.io</code> with topic <code>org/mwptools/mqtt/otxplayer</code>, the mqtt URI for mwp would be:</p> <pre><code>mqtt://broker.emqx.io/org/mwptools/mqtt/otxplayer\n</code></pre> <p>Or in general:</p> <pre><code>mqtt://[user[:pass]@]broker[:port]/topic[?cafile=file]\n</code></pre> <p>Note:</p> <ul> <li>port is the mqtt port (typically and by default 1883), not the websocket port.</li> <li>if you want to use TLS, then the port will be different, often 8883, and you might need to provide the broker's CA file.</li> <li>As mwp uses a pseudo-URL for the broker,topic etc, the topic should comply with rules for a URL rather than the more relaxed MQTT topic specification. This is a feature.</li> </ul> <p>The scheme part (<code>mqtt://</code>) in the example is interpreted as:</p> <ul> <li><code>ws://</code> - Websocket (vice TCP socket), ensure the websocket port is also specified, requires 'paho-mqtt' as the provider.</li> <li><code>wss://</code> - Encrypted websocket, ensure the TLS websocket port is also specified. TLS validation is performed using the operating system. Not supported by <code>mosquitto</code>; requires <code>paho-mqtt</code> 1.39 or later.</li> <li><code>mqtts://</code>,<code>ssl://</code> - Secure (TLS) TCP connection. Ensure the TLS port is specified. TLS validation is performed using the operating system, unless <code>cafile</code> is provided.</li> <li><code>mqtt://</code> - TCP connection. If <code>?cafile=file</code> is specified, then that is used for TLS validation (and the TLS port should be specified).</li> </ul> <p>MQTT looks like an incredibly elegant solution to long range telemetry.</p> <p>More information on the BulletGCSS website and BulletGCSS wiki</p> <p>See also fl2mqtt, a tool to replay Blackbox and OpenTx logs as MQTT and BulletGCSS mosquitto hosting guide for hosting your own MQTT broker.</p> <p></p>"},{"location":"mwp-Configuration/","title":"mwp Configuration","text":""},{"location":"mwp-Configuration/#overview","title":"Overview","text":"<p>mwp stores configuration in a number of places, to some degree at the developer's whim, but also in accordance with the data item's volatility.</p> <ul> <li>Command line options</li> <li>Configuration Files</li> <li>dconf / gsettings</li> </ul> <p>Each type is further discussed below.</p>"},{"location":"mwp-Configuration/#command-line-options","title":"Command line options","text":"<p>Command line options provide a 'per instantiation' means to control mwp behaviour; the current set of command line options may be viewed by running mwp from the command line with the single option <code>--help</code>:</p> <pre><code>$ mwp --help\n</code></pre> <p>Where it is required to give permanence to command line options, they can be added to the configuration file <code>$HOME/.config/mwp/cmdopts</code> (on Windows <code>$LOCALAPPDATA/mwp/cmdopts</code>), which is described in more detail in the following section.</p> <p>Note that the documentation will habitually refer to the configuration base directory as <code>~/.config</code> as that is where it is found on the majority of OS; if you're using Windows, please adjust as necessary.</p> <p>You can also use a system-wide \"cmdopts\" file, <code>/etc/default/mwp</code>. If this flie exists, it will read before the user's file.</p> <ul> <li>For singular options, any option in the user file will override the system file</li> <li>For multiply occurring options, e.g. <code>--radar-device</code>, definitions will be additive.</li> <li>Environment variables can be set from either or both files.</li> </ul>"},{"location":"mwp-Configuration/#debug-flags","title":"Debug flags","text":"<p>The <code>--debug-flags</code> option takes a numeric value defines areas where additional debug information may be output.</p> Value Usage 1 Waypoints 2 Startup 4 MSP 8 ADHOC 16 RADAR 32 (unused) 64 SERIAL 128 VIDEO 256 GCS Location 512 Line of sight 1024 Radar 2048 Maps <p>Values may be ORd together (so 4095 means all).</p>"},{"location":"mwp-Configuration/#configuration-files","title":"Configuration Files","text":"<p>mwp configuration files are stored in a standard directory <code>$HOME/.config/mwp</code>. This directory is created on first invocation if it does not exist.</p>"},{"location":"mwp-Configuration/#platform-differences","title":"Platform differences","text":"<ul> <li>POSIX XDG compliance :  User Configuration directory (<code>$XDG_CONFIG_HOME</code>)</li> <li>POSIX fallback : <code>$HOME/.config</code></li> <li>Windows / Msys : <code>$LOCALAPPDATA</code> / <code>%LOCALAPPDATA%</code> / <code>$Env:LOCALAPPDATA</code></li> </ul> <p>The following files may be found in the <code>mwp</code> directory:</p>"},{"location":"mwp-Configuration/#cmdopts","title":"<code>cmdopts</code>","text":"<p>The file <code>cmdopts</code> contains command line options that the user wishes to apply permanently (and conveniently when run from a launcher icon rather than the command line).</p> <p>The file contains CLI options exactly as would be issued from the terminal. Options may be on separate lines, and blank lines and line prefixed with a hash '#' are ignored. For example:</p> <p>In addition to options (<code>--</code>), the file may also contain environment variables e.g. <code>FOO=BAR</code>.</p> <pre><code># Default options for mwp\n--rings 50,20\n#--voice-command \"spd-say -t female2 -e\"\n#--debug-flags=2\n--dont-maximise\n#-S 8192\n# set the anonymous tile file.\nMWP_BLACK_TILE=/home/jrh/.config/mwp/mars.png\n</code></pre> <p>So here the only current, valid options are  <code>--rings 50,20 --dont-maximise</code>, and the environment variable MWP_BLACK_TILE is set (for anonymous maps).</p> <p>The environment is set before any GTK / UI calls are made.</p>"},{"location":"mwp-Configuration/#map-sources","title":"Map Sources","text":"<p>mwp provides by default:</p> <ul> <li>OpenStreetMap Mapnik</li> <li>OpenStreetMap Cycle Map</li> <li>OpenStreetMap Transport Map</li> <li>Maps for Free Relief</li> <li>Bing Maps (no API key required, for as long as the service remains available).</li> <li>MapBox (requires API key)</li> <li>Esri Clarity</li> <li>Esri World Imagery</li> <li>Esri Places and Transportation layers as an optional overlay.</li> </ul>"},{"location":"mwp-Configuration/#mapbox-api-key-management","title":"Mapbox API Key management","text":"<p>In preparation for the announced removal of the Bing Maps service, <code>mwp</code> adds a <code>MapBox</code> entry where the user has acquired a Mapbox API key.</p> <p>This key may be either stored in the Desktop keyring (managed by <code>libsecret</code>) or as a plain text string in the <code>gsettings</code> database.</p>"},{"location":"mwp-Configuration/#keyring","title":"Keyring","text":"<p>Add to the keyring using <code>secret-tool</code> with the following attributes:</p> <pre><code>secret-tool store --label=\"Mapbox API\" name mapbox-api-key domain org.stronnag.mwp\nPassword: *************************************************\n</code></pre>"},{"location":"mwp-Configuration/#gsettings","title":"Gsettings","text":"<p>Alternatively, the key can be added to the <code>gsettings</code> database: <pre><code> gsettings set org.stronnag.mwp mapbox-apikey 'pk.xxxxxxx'\n # where 'pk.xxxxxxx' is your MapBox API Key\n</code></pre></p> <p>Note that sadly <code>libshumate</code> creates a cache directory name from which the MapBox access token may be recovered, so there is little security / privacy gain by using the secret key-ring, alas. See Gitlab issue.</p>"},{"location":"mwp-Configuration/#additional-map-sources-sourcesjson","title":"Additional Map Sources: <code>sources.json</code>","text":"<p><code>sources.json</code> facilitates adding non-standard map sources to mwp. See the  anonymous maps section and comments in the source files in the <code>qproxy</code> directory.</p> <p>Here is an example <code>mwptools/src/samples/sources.json</code>.</p> <pre><code>{\n \"sources\" : [\n  {\n      \"id\": \"OpenTopoMP\",\n      \"name\": \"OpenTopo\",\n      \"license\": \"(c) OSM\",\n      \"license_uri\": \"http://www.openstreetmap.org/copyright\",\n      \"min_zoom\": 0,\n      \"max_zoom\": 19,\n      \"tile_size\": 256,\n      \"projection\": \"MERCATOR\",\n      \"uri_format\": \"http://map-proxy/mapproxy/tiles/1.0.0/opentopo/EPSG3857/{z}/{x}/{y}.png\"\n  },\n  {\n      \"id\": \"LandscapeMP\",\n      \"name\": \"Landscape\",\n      \"license\": \"(c) OSM\",\n      \"license_uri\": \"http://www.openstreetmap.org/copyright\",\n      \"min_zoom\": 0,\n      \"max_zoom\": 19,\n      \"tile_size\": 256,\n      \"projection\": \"MERCATOR\",\n      \"uri_format\": \"http://map-proxy/mapproxy/tiles/1.0.0/landscape/EPSG3857/{z}/{x}/{y}.png\"\n  },\n  {\n      \"id\": \"CyclemapMP\",\n      \"name\": \"Cyclemap\",\n      \"license\": \"(c) OSM\",\n      \"license_uri\": \"http://www.openstreetmap.org/copyright\",\n      \"min_zoom\": 0,\n      \"max_zoom\": 19,\n      \"tile_size\": 256,\n      \"projection\": \"MERCATOR\",\n      \"uri_format\": \"http://map-proxy/mapproxy/tiles/1.0.0/cyclemap/EPSG3857/{z}/{x}/{y}.png\"\n  },\n  {\n      \"id\": \"Black\",\n      \"name\": \"Black Tiles\",\n      \"license\": \"(c) jh \",\n      \"license_uri\": \"http://daria.co.uk/\",\n      \"min_zoom\": 0,\n      \"max_zoom\": 20,\n      \"tile_size\": 256,\n      \"projection\": \"MERCATOR\",\n      \"spawn\" : \"bproxy\"\n  }\n ]\n}\n</code></pre> <p>In this example, <code>https://map-proxy/....</code> refers to a local <code>mapproxy</code> server configured in accordance with this guide. Note that in this instance <code>mapproxy</code> is used as a means to share the data across a LAN (and with INAV Configurator). As the first three sources are TMS, they could be consumed directly by mwp.</p> <p>See also anonymous maps to customise the \"black tile\". The <code>spawn</code> stanza uses a proxy for non-TMS formats (see <code>mwptools/src/qproxy</code> for some examples).</p>"},{"location":"mwp-Configuration/#mwpcss","title":"<code>mwp.css</code>","text":"<p><code>mwp.css</code> contains alternate CSS themeing for the application. An example file is provided as <code>&lt;PREFIX&gt;/share/mwp/mwp.css</code> which can be copied into <code>~/.config/mwp/</code> if modifications are required (i.e. override the <code>Monospace</code> font, especially on Windows where it's too large and ugly (in the developer's opinion)).</p>"},{"location":"mwp-Configuration/#voltscss","title":"<code>volts.css</code>","text":"<p><code>vol.css</code> contains alternate CSS themeing for the battery voltage dock item that may work better on dark desktop themes. An default file is provided as <code>&lt;PREFIX&gt;/share/mwp/mwp/vcol.css</code> which can be copied into <code>~/.config/mwp/</code> if modifications are required.</p>"},{"location":"mwp-Configuration/#places","title":"<code>places</code>","text":"<p>The <code>places</code> (<code>~/.config/mwp/places</code>) file is a delimited (CSV) file that defines a list of \"shortcut\" home locations used by the \"View / Centre on Position ...\" menu item. It consists of a Name, Latitude, Longitude and optionally zoom level, separated by a <code>TAB</code>,<code>|</code>,<code>:</code> or <code>;</code>. Note that positions may be localised in the file and thus <code>.</code> is no longer recognised as a field separator.</p> <p>Example <code>places</code></p> <pre><code># mwp places name,lat,lon [,zoom]\nBeaulieu|50.8047104|-1.4942621|17\nJurby:54.353974:-4.523600:-1\n</code></pre> <p>The user may maintain these files manually if used, or use the graphic places editor. The command line option <code>--centre</code> accepts a place name as well as a geographic coordinates.</p>"},{"location":"mwp-Configuration/#keyboard-accelerators","title":"Keyboard Accelerators","text":"<p>The keyboard accelerators (to invoke functions) may be defined / overwritten by the file <code>~/.config/mwp/accels</code>. This file consists of lines listing the action name and the accelerator key, for example:</p> <pre><code># Action name (with or without \"win.\" prefix), a space, key definition\nradar-devices &lt;control&gt;&lt;shift&gt;r\nwin.vlegend &lt;control&gt;&lt;shift&gt;v\n</code></pre> <p>The first (non-comment) line adds a new accelerator, the second replaces the existing <code>&lt;control&gt;&lt;shift&gt;v</code> for toggle the ADSB altitude / colour legend.</p> <p>The list of recognised action names and accelerators (aka shortcuts) may be found in mwp-window.vala and the main menu definition.</p> <p>The accelerator key format is described in the Gtk Documentation.</p>"},{"location":"mwp-Configuration/#panel-settings","title":"Panel settings","text":"<p>See the migration guide for information concerning:</p> <ul> <li><code>~/.config/mwp/panel.conf</code></li> <li><code>~/.config/mwp/.paned</code></li> </ul>"},{"location":"mwp-Configuration/#dconf-gsettings","title":"Dconf / gsettings","text":"<p>The underlying infrastructure used by mwp has a facility for storing configuration items in a registry like store. This is used extensively by mwp. The items can viewed and modified using a number of tools:</p> <ul> <li>mwp preference dialogue (for a small subset of the items)</li> <li>The mwpset graphical settings editor (all platforms).</li> <li>The <code>dconf-editor</code> graphical settings editor (Linux, FreeBSD)</li> <li>The command line <code>gsettings</code> tool (Linux, FreeBSD, Windows)</li> <li>Regedit (Windows)</li> <li>Text Editor (MacOS)</li> </ul>"},{"location":"mwp-Configuration/#macos-exception","title":"MacOS (exception)","text":"<p>Gtk on MacOS does not support <code>gsettings</code> in a useful way. As a work around, MacOS settings are stored in a text <code>.ini</code> file, <code>$HOME/.config/mwp/mwp.ini</code>. This may be edited with mwpset.</p>"},{"location":"mwp-Configuration/#linux-freebsd-windows","title":"Linux, FreeBSD, Windows","text":"<p>For <code>gsettings</code> and <code>dconf-editor</code>, the name-space is <code>org.stronnag.mwp</code>, so to view the list of items:</p> <pre><code>$ gsettings list-recursively  org.stronnag.mwp\n</code></pre> <p>and to list then get / set a single item:</p> <pre><code>$ gsettings get org.stronnag.mwp log-save-path\n..\n$ gsettings set org.stronnag.mwp log-save-path ~/flight-logs/\n</code></pre> <p>Windows specific detail.</p>"},{"location":"mwp-Configuration/#dconf-editor","title":"dconf-editor","text":"<p>This may not be installed by default, but should be available via the OS package manager / software centre.</p> <p></p> Initial dconf-editor showing all mwp settings <p></p> dconf-editor, editing a setting"},{"location":"mwp-Configuration/#gsettings-description","title":"Gsettings Description","text":"<p>The full list of settings is maintained in a separate article, machine generated from the source code.</p>"},{"location":"mwp-Configuration/#replicating-gsettings-between-machines-or-users","title":"Replicating gsettings between machines or users","text":"<p>Either mwpset or the standard system <code>dconf</code> application can be used to back up and restore the above <code>gsettings</code>. To backup the settings:</p> <pre><code>dconf dump /org/stronnag/mwp  &gt;/tmp/mwp-dconf.txt\n</code></pre> <p>To restore the settings (overwrite). This could be for a different user or on a new machine.</p> <pre><code>dconf load /org/stronnag/mwp  &lt;/tmp/mwp-dconf.txt\n</code></pre>"},{"location":"mwp-Configuration/#settings-precedence-and-user-updates","title":"Settings precedence and user updates","text":"<p>mwp installs a number of icon files in <code>$prefix/share/mwp/pixmaps</code>. The user can override these by creating an eponymous file in the user configuration directory, <code>~/.config/mwp/pixmaps/</code>. Such user configurations are never over-written on upgrade.</p> <p>For example, to replace a mwp specific icon; i.e. replace the GCS Location icon (<code>$prefix/share/mwp/pixmaps/gcs.svg</code>) with a user defined file <code>~/.config/mwp/pixmaps/gcs.svg</code>.</p> <p>All loadable icon / symbol files must be SVG.</p> <p>All icons are drawn as their \"natural\" size (from the <code>svg</code> element), and then may be scaled by the <code>symbol-scale</code> and <code>touch-scale</code> settings.</p>"},{"location":"mwp-Configuration/#svg-customisation","title":"SVG customisation","text":"<p>SVG files for ADSB reported aircraft will be recoloured according to altitude where the path has an <code>id</code> attribute of <code>mwpbg</code> (fill) or <code>mwpfg</code> (stroke). See <code>src/samples/adsb-extra/gradient/README.md</code> for details.</p> <p>Where mwp is built against <code>libshumate 1.5</code> (i.e. supporting symbol alignment), and where user defined override icons are used, it is possible to set the location of the \"hot spot\" in a SVG icon.</p> <p>Hot spot location uses the GTK <code>xalign</code> and <code>yalign</code> parameters. There are floating point numbers in the range (0.0 - 1.0) defining a coordinate system where (0,0) is top left and (1,1) is bottom right. These values are set using special tags (<code>mwp:xalign</code> and <code>mwp:yalign</code>) in the icon's <code>svg</code> element:</p> <p>Given the header:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\"\n     xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n     xmlns:mwp=\"http://www.daria.co.uk/namepaces/mwp\"\n     mwp:yalign=\"0.83\"\n     width=\"48\" height=\"48\" viewBox=\"0 0 48 48\"&gt;\n</code></pre> <p>The GCS icon (co-incident with the home icon) has its hot spot at the bottom of the blue shape (same as the pointy bit of the brown home icon).</p> <p></p> <p>Note also that for mwp to load SVG icons, <code>librsvg</code> requires that the <code>svg</code> element contains <code>width</code> and <code>height</code> attributes.</p>"},{"location":"mwp-Configuration/#environment-variables","title":"Environment variables","text":"<p>mwp recognises the following application specific environment variables</p> Name  \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Usage <code>CFG_UGLY_XML</code> Generate ugly multi-mission XML, so as not to confuse the (older?) inav configurator <code>MWP_ARGS</code> Extra command line arguments <code>MWP_BLACK_TILE</code> Specify a black tile to be used by the Black Tiles map proxy <code>MWP_LOG_DIR</code> Location of console logs ($HOME if undefined) <code>MWP_PRINT_RAW</code> If defined, output hex bytes from serial I/O <code>MWP_STATS_LOG</code> Time (seconds, &gt;0) to automatically log \"serial\" statistics <code>MWP_TIME_FMT</code> The time format for log output; by default \"%FT%T%z\", any GLib2 DateTime (strftime-like) format may be used; \"%T.%f\" works well on modern GLib."},{"location":"mwp-Configuration/#mime-types-for-common-file-formats","title":"Mime types for common file formats","text":"<p>mwp adds XDG mime types for certain file types handled by mwp.</p> Data Source Mime Type File Manager DnD Multiwii Mission (XML) application/vnd.mw.mission Yes 1 Yes 2 Blackbox log application/vnd.blackbox.log Yes Yes Mwp telemetry log application/vnd.mwp.log Yes Yes Multiwii mission (mwp JSON) application/vnd.mwp.json.mission Yes Yes OTX telemetry log application/vnd.otx.telemetry.log No Yes <p>Notes:</p> <p>1. The file manager (at least Nautilus / Gnome) will offer mwp as the default application to open the file.</p> <p>2.  DnD. The file can be dropped onto the mwp map and will be opened. The file may also be provided on the mwp command line without <code>--option</code>; e.g. <code>mwp --mission demo.mission</code> and <code>mwp demo.mission</code> will behave in the same way.</p>"},{"location":"mwp-Dbus-API/","title":"DBus API","text":""},{"location":"mwp-Dbus-API/#introduction","title":"Introduction","text":"<p>mwp provides a Dbus API to permit remote control or monitoring of mwp by third party applications.</p> <p>Dbus is a common Linux API for inter-process communications, and can be used from most programming languages. <code>mwptools/src/samples</code> provides examples in <code>python</code>, <code>ruby</code> and <code>bash</code>.</p> <p>It is intended that that the <code>ruby</code> examples cover the majority of the  API and provide canonical examples of usage.</p> <p>As this is a developer topic, please raise GitHub issues if clarification is needed or you have a use case that would benefit from extending the API.</p> <p>Please also note that the definitive definition of the DBus API is provided by DBus inspection.</p>"},{"location":"mwp-Dbus-API/#dbus-object-and-interface","title":"DBus object and interface","text":"<p>The mwp Dbus API exists on the session bus when mwp is running.</p> <ul> <li>Object Path: <code>/org/stronnag/mwp</code></li> <li>Interface: <code>\"org.stronnag.mwp\"</code></li> </ul>"},{"location":"mwp-Dbus-API/#flight-status-and-geo-location-information","title":"Flight Status and geo-location information","text":"<p>A set of APIs is provided for synchronous and asynchronous (signals, event by event) notification of vehicle status and location. A use case might be to drive an antenna tracker.</p>"},{"location":"mwp-Dbus-API/#flight-status-and-geo-location-methods","title":"Flight status and geo-location methods","text":""},{"location":"mwp-Dbus-API/#getmodenames","title":"GetModeNames","text":"<p>Returns human-readable names for the FC 'mode' returned by <code>GetState</code>, as an array of strings. The size of the array is the return value. These are effectively LTM modes.</p> <pre><code>int GetModeNames(out string[] states_names)\n\n&lt;method name=\"GetModeNames\"&gt;\n  &lt;arg type=\"as\" name=\"names\" direction=\"out\"/&gt;\n  &lt;arg type=\"i\" name=\"result\" direction=\"out\"/&gt;\n&lt;/method&gt;\n</code></pre>"},{"location":"mwp-Dbus-API/#getstate","title":"GetState","text":"<p>Returns the FC 'state' and 'mode'. state 0 if unarmed. Human-readable mode names are provided by(sic) <code>GetModeNames()</code>.</p> <pre><code>void GetState(out int state, out int mode)\n\n&lt;method name=\"GetState\"&gt;\n  &lt;arg type=\"i\" name=\"state\" direction=\"out\"/&gt;\n  &lt;arg type=\"i\" name=\"mode\" direction=\"out\"/&gt;\n&lt;/method&gt;\n</code></pre>"},{"location":"mwp-Dbus-API/#gethome","title":"GetHome","text":"<p>Returns the home location as latitude (WGS84 decimal degrees),  longitude (WGS84 decimal degrees) and relative altitude (metres, which should always be 0).</p> <pre><code>void GetHome(out double latitude, out double longitude, out int32 altitude)\n\n&lt;method name=\"GetHome\"&gt;\n  &lt;arg type=\"d\" name=\"latitude\" direction=\"out\"/&gt;\n  &lt;arg type=\"d\" name=\"longitude\" direction=\"out\"/&gt;\n  &lt;arg type=\"i\" name=\"altitude\" direction=\"out\"/&gt;\n&lt;/method&gt;\n</code></pre>"},{"location":"mwp-Dbus-API/#getlocation","title":"GetLocation","text":"<p>Returns the vehicle location as latitude (WGS84 decimal degrees),  longitude (WGS84 decimal degrees) and relative altitude (metres).</p> <pre><code>void GetLocation(out double latitude, out double longitude, out int32 altitude)\n\n&lt;method name=\"GetLocation\"&gt;\n  &lt;arg type=\"d\" name=\"latitude\" direction=\"out\"/&gt;\n  &lt;arg type=\"d\" name=\"longitude\" direction=\"out\"/&gt;\n  &lt;arg type=\"i\" name=\"altitude\" direction=\"out\"/&gt;\n&lt;/method&gt;\n</code></pre>"},{"location":"mwp-Dbus-API/#getsats","title":"GetSats","text":"<p>Returns the number of satellites and the fix type (0=nofix, 1=undefined, 2=2D fix, 3=3D fix).</p> <pre><code>void GetSats(out uint8 number_satellites, uint8 fix_type)\n\n&lt;method name=\"GetSats\"&gt;\n  &lt;arg type=\"y\" name=\"nsats\" direction=\"out\"/&gt;\n  &lt;arg type=\"y\" name=\"fix\" direction=\"out\"/&gt;\n&lt;/method&gt;\n</code></pre>"},{"location":"mwp-Dbus-API/#getvelocity","title":"GetVelocity","text":"<p>Returns the vehicle speed (m/s) and course (degrees), GPS provided.</p> <pre><code>void GetVelocity(out uint32 speed, out uint32 course)\n\n&lt;method name=\"GetVelocity\"&gt;\n  &lt;arg type=\"u\" name=\"speed\" direction=\"out\"/&gt;\n  &lt;arg type=\"u\" name=\"course\" direction=\"out\"/&gt;\n&lt;/method&gt;\n</code></pre>"},{"location":"mwp-Dbus-API/#getpolarcoordinates","title":"GetPolarCoordinates","text":"<p>Returns the vehicle location as polar coordinates relative the home position: Range (m), Bearing (degrees) from home to vehicle, azimuth (elevation angle, degrees).</p> <pre><code>void GetPolarCoordinates(out uint32 range, out uint32 direction, out uint32 azimuth)\n\n&lt;method name=\"GetPolarCoordinates\"&gt;\n  &lt;arg type=\"u\" name=\"range\" direction=\"out\"/&gt;\n  &lt;arg type=\"u\" name=\"direction\" direction=\"out\"/&gt;\n  &lt;arg type=\"u\" name=\"azimuth\" direction=\"out\"/&gt;\n&lt;/method&gt;\n</code></pre>"},{"location":"mwp-Dbus-API/#getwaypointnumber","title":"GetWaypointNumber","text":"<p>Returns the next WP number (en-route to) or -1 if not flying WPs.</p> <pre><code>int GetWaypointNumber()\n\n&lt;method name=\"GetWaypointNumber\"&gt;\n  &lt;arg type=\"i\" name=\"result\" direction=\"out\"/&gt;\n&lt;/method&gt;\n</code></pre>"},{"location":"mwp-Dbus-API/#flight-status-and-geo-location-signals","title":"Flight status and geo-location signals","text":"<p>A number of signals (asynchronous event by event notifications) are issues for changes in state and location. This avoids applications having to poll for changes. In general, the data returned is that for the eponymous Get* methods.</p> <p>All location signals may be rate limited by the <code>DbusPosInterval</code> property in order to avoid excessive DBus traffic.</p>"},{"location":"mwp-Dbus-API/#homechanged","title":"HomeChanged","text":"<p>Notifies that the home position has changed.</p> <pre><code>signal void HomeChanged (double latitude, double longitude, int altitude)\n\n&lt;signal name=\"HomeChanged\"&gt;\n  &lt;arg type=\"d\" name=\"latitude\"/&gt;\n  &lt;arg type=\"d\" name=\"longitude\"/&gt;\n  &lt;arg type=\"i\" name=\"altitude\"/&gt;\n&lt;/signal&gt;\n</code></pre>"},{"location":"mwp-Dbus-API/#locationchanged","title":"LocationChanged","text":"<p>Notifies that the vehicle position has changed (geographic coordinates).</p> <pre><code>signal void location_changed (double latitude, double longitude, int altitude)\n\n&lt;signal name=\"LocationChanged\"&gt;\n  &lt;arg type=\"d\" name=\"latitude\"/&gt;\n  &lt;arg type=\"d\" name=\"longitude\"/&gt;\n  &lt;arg type=\"i\" name=\"altitude\"/&gt;\n&lt;/signal&gt;\n</code></pre>"},{"location":"mwp-Dbus-API/#polarchanged","title":"PolarChanged","text":"<p>Notifies that the vehicle position has changed relative to home (polar coordinates).</p> <pre><code>signal void polar_changed(uint32 range, uint32 direction, uint32 azimuth)\n\n&lt;signal name=\"PolarChanged\"&gt;\n  &lt;arg type=\"u\" name=\"range\"/&gt;\n  &lt;arg type=\"u\" name=\"direction\"/&gt;\n  &lt;arg type=\"u\" name=\"azimuth\"/&gt;\n&lt;/signal&gt;\n</code></pre>"},{"location":"mwp-Dbus-API/#velocitychanged","title":"VelocityChanged","text":"<p>Notifies that the vehicle velocity (course or speed) has changed.</p> <pre><code>signal void velocity_changed(uint32 speed, uint32 course)\n\n&lt;signal name=\"VelocityChanged\"&gt;\n  &lt;arg type=\"u\" name=\"speed\"/&gt;\n  &lt;arg type=\"u\" name=\"course\"/&gt;\n&lt;/signal&gt;\n</code></pre>"},{"location":"mwp-Dbus-API/#statechanged","title":"StateChanged","text":"<p>Notifies that the vehicle 'state' has changed.</p> <pre><code>signal void StateChanged(int32 state)\n\n&lt;signal name=\"StateChanged\"&gt;\n  &lt;arg type=\"i\" name=\"state\"/&gt;\n&lt;/signal&gt;\n</code></pre>"},{"location":"mwp-Dbus-API/#satschanged","title":"SatsChanged","text":"<p>Notifies that the satellite status has changed.</p> <pre><code>signal void SatsChanged(uint8 nsats, uint8 fix)\n\n&lt;signal name=\"SatsChanged\"&gt;\n  &lt;arg type=\"y\" name=\"nsats\"/&gt;\n  &lt;arg type=\"y\" name=\"fix\"/&gt;\n&lt;/signal&gt;\n</code></pre>"},{"location":"mwp-Dbus-API/#waypointchanged","title":"WaypointChanged","text":"<p>Notifies that the current WP number has changed.</p> <pre><code>signal void WaypointChanged(int32 wp)\n\n&lt;signal name=\"WaypointChanged\"&gt;\n  &lt;arg type=\"i\" name=\"wp\"/&gt;\n&lt;/signal&gt;\n</code></pre>"},{"location":"mwp-Dbus-API/#application-status","title":"Application Status","text":""},{"location":"mwp-Dbus-API/#quit","title":"Quit","text":"<p>The <code>Quit</code> signal is issued when mwp exits, allowing a dependent application to close down gracefully or take action to wait for the bus to reappear.</p> <pre><code>Quit()\n\n&lt;signal name=\"Quit\"&gt;\n&lt;/signal&gt;\n</code></pre>"},{"location":"mwp-Dbus-API/#properties","title":"Properties","text":""},{"location":"mwp-Dbus-API/#dbusposinterval","title":"DbusPosInterval","text":"<pre><code>uint dbus_pos_interval\n</code></pre> <p>Defines rate limiting for all position related signals. The value represents the minimum update interval in 0.1s intervals.</p> <ul> <li>0 disables rate limiting</li> <li>2 is the default, and matches the best LTM rate of 5Hz</li> <li>a large value (e.g. 999999, greater than a realistic flight time), would effectively disable event by event positional updates.</li> </ul>"},{"location":"mwp-Dbus-API/#serial-port-and-mission-management","title":"Serial Port and Mission management","text":"<p>A set of APIs is provided for remote serial port and mission management.</p>"},{"location":"mwp-Dbus-API/#serial-ports","title":"Serial Ports","text":""},{"location":"mwp-Dbus-API/#getdevices","title":"GetDevices","text":"<p>The <code>GetDevices</code> API returns a list of the serial devices known to the mwp instance, as an array of strings.</p> <pre><code>void GetDevices(out string[]device_names)\n\n&lt;method name=\"GetDevices\"&gt;\n  &lt;arg type=\"as\" name=\"devices\" direction=\"out\"/&gt;\n&lt;/method&gt;\n</code></pre>"},{"location":"mwp-Dbus-API/#connectionstatus","title":"ConnectionStatus","text":"<p>The <code>ConnectionStatus</code> API returns a boolean status as to whether <code>mwp</code> is connected to a serial device, and if connected, the name of the device.</p> <pre><code>bool ConnectionsStatus(out string device_name)\n\n&lt;method name=\"ConnectionStatus\"&gt;\n  &lt;arg type=\"s\" name=\"device\" direction=\"out\"/&gt;\n  &lt;arg type=\"b\" name=\"result\" direction=\"out\"/&gt;\n&lt;/method&gt;\n</code></pre>"},{"location":"mwp-Dbus-API/#connectdevice","title":"ConnectDevice","text":"<p>The <code>ConnectDevice</code> API attempts connection to the given device, and returns the status of the operation (<code>true</code> =&gt; connected).</p> <pre><code>bool ConnectDevice(string device_name)\n\n&lt;method name=\"ConnectDevice\"&gt;\n  &lt;arg type=\"s\" name=\"device\" direction=\"in\"/&gt;\n  &lt;arg type=\"b\" name=\"result\" direction=\"out\"/&gt;\n&lt;/method&gt;\n</code></pre>"},{"location":"mwp-Dbus-API/#mission-management","title":"Mission Management","text":"<p>Somewhat inconsistent set of mission management APIs. Note these are not yet multi-mission aware.</p>"},{"location":"mwp-Dbus-API/#clearmission","title":"ClearMission","text":"<p>Clears the current mission from mwp.</p> <pre><code>void ClearMission()\n\n&lt;method name=\"ClearMission\"&gt;\n&lt;/method&gt;\n</code></pre>"},{"location":"mwp-Dbus-API/#setmission","title":"SetMission","text":"<p>Opens a mission in mwp from an XML or JSON document, returns the number of mission points.</p> <pre><code>int SetMission(string mission)\n\n&lt;method name=\"SetMission\"&gt;\n  &lt;arg type=\"s\" name=\"mission\" direction=\"in\"/&gt;\n  &lt;arg type=\"u\" name=\"result\" direction=\"out\"/&gt;\n &lt;/method&gt;\n</code></pre>"},{"location":"mwp-Dbus-API/#loadmission","title":"LoadMission","text":"<p>Opens a mission in mwp from an mission file, returns the number of mission points.</p> <pre><code>int LoadMission(string filename)\n\n&lt;method name=\"LoadMission\"&gt;\n  &lt;arg type=\"s\" name=\"filename\" direction=\"in\"/&gt;\n  &lt;arg type=\"u\" name=\"result\" direction=\"out\"/&gt;\n&lt;/method&gt;\n</code></pre>"},{"location":"mwp-Dbus-API/#uploadmission","title":"UploadMission","text":"<p>Loads the current mwp mission into the flight controller, optionally saving to it EEPROM. Returns the number of mission points.</p> <pre><code>int UploadMission(bool to_eeprom)\n\n&lt;method name=\"UploadMission\"&gt;\n  &lt;arg type=\"b\" name=\"to_eeprom\" direction=\"in\"/&gt;\n  &lt;arg type=\"i\" name=\"result\" direction=\"out\"/&gt;\n&lt;/method&gt;\n</code></pre>"},{"location":"mwp-Dbus-API/#examples","title":"Examples","text":"<ul> <li><code>samples/mwp-dbus-test.sh</code></li> <li><code>samples/mwp-dbus.rb</code></li> <li><code>samples/mwp-dbus.py</code></li> <li><code>samples/mwp-dbus-loc.rb</code></li> <li><code>samples/mwp-dbus-loc.py</code></li> <li><code>samples/mwp-dbus-to-gpx.rb</code></li> </ul>"},{"location":"mwp-Dbus-API/#introspection","title":"Introspection","text":"<p>Not withstanding the state of the documentation, it is possible introspect the API. Note that mwp must be running for the API to exist. The document returned by DBus introspection is the definitive definition of the API.</p> <pre><code># Note samples/mwp-dbus-loc.rb also provides introspection.\n$ samples/mwp-dbus-test.sh introspect\n&lt;!DOCTYPE node PUBLIC \"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN\"\n                      \"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd\"&gt;\n&lt;!-- GDBus 2.60.3 --&gt;\n&lt;node&gt;\n  &lt;interface name=\"org.freedesktop.DBus.Properties\"&gt;\n    &lt;method name=\"Get\"&gt;\n      &lt;arg type=\"s\" name=\"interface_name\" direction=\"in\"/&gt;\n      &lt;arg type=\"s\" name=\"property_name\" direction=\"in\"/&gt;\n      &lt;arg type=\"v\" name=\"value\" direction=\"out\"/&gt;\n    &lt;/method&gt;\n    &lt;method name=\"GetAll\"&gt;\n      &lt;arg type=\"s\" name=\"interface_name\" direction=\"in\"/&gt;\n      &lt;arg type=\"a{sv}\" name=\"properties\" direction=\"out\"/&gt;\n    &lt;/method&gt;\n    &lt;method name=\"Set\"&gt;\n      &lt;arg type=\"s\" name=\"interface_name\" direction=\"in\"/&gt;\n      &lt;arg type=\"s\" name=\"property_name\" direction=\"in\"/&gt;\n      &lt;arg type=\"v\" name=\"value\" direction=\"in\"/&gt;\n    &lt;/method&gt;\n    &lt;signal name=\"PropertiesChanged\"&gt;\n      &lt;arg type=\"s\" name=\"interface_name\"/&gt;\n      &lt;arg type=\"a{sv}\" name=\"changed_properties\"/&gt;\n      &lt;arg type=\"as\" name=\"invalidated_properties\"/&gt;\n    &lt;/signal&gt;\n  &lt;/interface&gt;\n  &lt;interface name=\"org.freedesktop.DBus.Introspectable\"&gt;\n    &lt;method name=\"Introspect\"&gt;\n      &lt;arg type=\"s\" name=\"xml_data\" direction=\"out\"/&gt;\n    &lt;/method&gt;\n  &lt;/interface&gt;\n  &lt;interface name=\"org.freedesktop.DBus.Peer\"&gt;\n    &lt;method name=\"Ping\"/&gt;\n    &lt;method name=\"GetMachineId\"&gt;\n      &lt;arg type=\"s\" name=\"machine_uuid\" direction=\"out\"/&gt;\n    &lt;/method&gt;\n  &lt;/interface&gt;\n  &lt;interface name=\"org.stronng.mwp\"&gt;\n    &lt;method name=\"GetStateNames\"&gt;\n      &lt;arg type=\"as\" name=\"names\" direction=\"out\"/&gt;\n      &lt;arg type=\"i\" name=\"result\" direction=\"out\"/&gt;\n    &lt;/method&gt;\n    &lt;method name=\"GetVelocity\"&gt;\n      &lt;arg type=\"u\" name=\"speed\" direction=\"out\"/&gt;\n      &lt;arg type=\"u\" name=\"course\" direction=\"out\"/&gt;\n    &lt;/method&gt;\n    &lt;method name=\"GetPolarCoordinates\"&gt;\n      &lt;arg type=\"u\" name=\"range\" direction=\"out\"/&gt;\n      &lt;arg type=\"u\" name=\"direction\" direction=\"out\"/&gt;\n      &lt;arg type=\"u\" name=\"azimuth\" direction=\"out\"/&gt;\n    &lt;/method&gt;\n    &lt;method name=\"GetHome\"&gt;\n      &lt;arg type=\"d\" name=\"latitude\" direction=\"out\"/&gt;\n      &lt;arg type=\"d\" name=\"longitude\" direction=\"out\"/&gt;\n      &lt;arg type=\"d\" name=\"altitude\" direction=\"out\"/&gt;\n    &lt;/method&gt;\n    &lt;method name=\"GetLocation\"&gt;\n      &lt;arg type=\"d\" name=\"latitude\" direction=\"out\"/&gt;\n      &lt;arg type=\"d\" name=\"longitude\" direction=\"out\"/&gt;\n      &lt;arg type=\"d\" name=\"altitude\" direction=\"out\"/&gt;\n    &lt;/method&gt;\n    &lt;method name=\"GetState\"&gt;\n      &lt;arg type=\"i\" name=\"result\" direction=\"out\"/&gt;\n    &lt;/method&gt;\n    &lt;method name=\"GetSats\"&gt;\n      &lt;arg type=\"y\" name=\"nsats\" direction=\"out\"/&gt;\n      &lt;arg type=\"y\" name=\"fix\" direction=\"out\"/&gt;\n    &lt;/method&gt;\n    &lt;method name=\"SetMission\"&gt;\n      &lt;arg type=\"s\" name=\"mission\" direction=\"in\"/&gt;\n      &lt;arg type=\"u\" name=\"result\" direction=\"out\"/&gt;\n    &lt;/method&gt;\n    &lt;method name=\"LoadMission\"&gt;\n      &lt;arg type=\"s\" name=\"filename\" direction=\"in\"/&gt;\n      &lt;arg type=\"u\" name=\"result\" direction=\"out\"/&gt;\n    &lt;/method&gt;\n    &lt;method name=\"ClearMission\"&gt;\n    &lt;/method&gt;\n    &lt;method name=\"GetDevices\"&gt;\n      &lt;arg type=\"as\" name=\"devices\" direction=\"out\"/&gt;\n    &lt;/method&gt;\n    &lt;method name=\"UploadMission\"&gt;\n      &lt;arg type=\"b\" name=\"to_eeprom\" direction=\"in\"/&gt;\n      &lt;arg type=\"i\" name=\"result\" direction=\"out\"/&gt;\n    &lt;/method&gt;\n    &lt;method name=\"ConnectionStatus\"&gt;\n      &lt;arg type=\"s\" name=\"device\" direction=\"out\"/&gt;\n      &lt;arg type=\"b\" name=\"result\" direction=\"out\"/&gt;\n    &lt;/method&gt;\n    &lt;method name=\"ConnectDevice\"&gt;\n      &lt;arg type=\"s\" name=\"device\" direction=\"in\"/&gt;\n      &lt;arg type=\"b\" name=\"result\" direction=\"out\"/&gt;\n    &lt;/method&gt;\n    &lt;signal name=\"HomeChanged\"&gt;\n      &lt;arg type=\"d\" name=\"latitude\"/&gt;\n      &lt;arg type=\"d\" name=\"longitude\"/&gt;\n      &lt;arg type=\"i\" name=\"altitude\"/&gt;\n    &lt;/signal&gt;\n    &lt;signal name=\"LocationChanged\"&gt;\n      &lt;arg type=\"d\" name=\"latitude\"/&gt;\n      &lt;arg type=\"d\" name=\"longitude\"/&gt;\n      &lt;arg type=\"i\" name=\"altitude\"/&gt;\n    &lt;/signal&gt;\n    &lt;signal name=\"PolarChanged\"&gt;\n      &lt;arg type=\"u\" name=\"range\"/&gt;\n      &lt;arg type=\"u\" name=\"direction\"/&gt;\n      &lt;arg type=\"u\" name=\"azimuth\"/&gt;\n    &lt;/signal&gt;\n    &lt;signal name=\"VelocityChanged\"&gt;\n      &lt;arg type=\"u\" name=\"speed\"/&gt;\n      &lt;arg type=\"u\" name=\"course\"/&gt;\n    &lt;/signal&gt;\n    &lt;signal name=\"StateChanged\"&gt;\n      &lt;arg type=\"i\" name=\"state\"/&gt;\n    &lt;/signal&gt;\n    &lt;signal name=\"SatsChanged\"&gt;\n      &lt;arg type=\"y\" name=\"nsats\"/&gt;\n      &lt;arg type=\"y\" name=\"fix\"/&gt;\n    &lt;/signal&gt;\n    &lt;signal name=\"Quit\"&gt;\n    &lt;/signal&gt;\n    &lt;property type=\"u\" name=\"DbusPosInterval\" access=\"readwrite\"/&gt;\n  &lt;/interface&gt;\n&lt;/node&gt;\n</code></pre>"},{"location":"mwp-Gtk4-migration-guide/","title":"mwp Migration Guide","text":"<p>This document describes the migration from legacy (Gtk+-3.0) mwp to contemporary (Gtk4) mwp.</p> <p></p>"},{"location":"mwp-Gtk4-migration-guide/#system-requirements","title":"System Requirements","text":""},{"location":"mwp-Gtk4-migration-guide/#supported-os","title":"Supported OS","text":"<ul> <li>Modern Open Source POSIX operating system, for example:<ul> <li>Alpine Linux 3.20+</li> <li>Arch Linux</li> <li>Debian \"Trixie\" / \"Sid\" (and derivatives)</li> <li>Fedora 40+</li> <li>FreeBSD 14+</li> <li>Ubuntu 24.04 and later (and derivatives).</li> </ul> </li> </ul>"},{"location":"mwp-Gtk4-migration-guide/#unsupported-but-usable-os","title":"Unsupported but usable OS","text":"<ul> <li>MacOS (Ventura or later), requires <code>homebrew</code>. Platform specifics</li> <li>Windows (10 or later), requires <code>MSys2</code>. Platform specifics</li> </ul> <p>Note that most of the documentation assumes open source OS (Linux, FreeBSD) semantics. See the \"Platform Specifics\" documents for differences.</p>"},{"location":"mwp-Gtk4-migration-guide/#specific-components","title":"Specific components","text":"<p>The following are minimum versions.</p> <ul> <li>Gtk4 (4.14)</li> <li>libsoup3 (3.2)</li> <li>libshumate (1.3)</li> <li>meson (1.40)</li> <li>blueprint-compiler (0.12.0)</li> <li>libvte4</li> <li>libadwaita-1 1.5</li> <li>libsecret-1</li> <li>librsvg</li> </ul> <p>For replaying blackbox log, bbl2kml 1.0.24 or later is rquired.</p>"},{"location":"mwp-Gtk4-migration-guide/#gsettings-dconf-schema","title":"GSettings /DConf schema","text":"<p>The gsettings / dconf schema is now <code>/org/stronnag/mwp/</code>. The keys are (mainly) the same as for legacy mwp/gtk3 and may be migrated:</p> <pre><code>dconf dump /org/mwptools/planner/ | dconf load /org/stronnag/mwp/\n</code></pre>"},{"location":"mwp-Gtk4-migration-guide/#gsettings-description","title":"Gsettings Description","text":"<p>The full list of settings is maintained in a separate article, machine generated from the source code.</p>"},{"location":"mwp-Gtk4-migration-guide/#libshumate","title":"libshumate","text":"<p>libshumate is the replacement for the obsolete libchamplain. <code>libshumate</code> uses a different cache directory organisation compared to <code>libchamplain</code>. If required, you can bulk move (<code>rsync</code> etc.) your old <code>libchamplain</code> files to the new locations.</p> <p>The old files are under <code>~/.cache/champlain/</code>, the new cache <code>~/.cache/shumate/</code>; the following table illustrates the naming for Bing and OpenStreetmap caches. Other caches follow a similar pattern.</p> <code>libchamplain</code> <code>libshumate</code> <code>osm-mapnik</code> <code>https___tile_openstreetmap_org__z___x___y__png</code> <code>BingProxy</code> <code>http___localhost_31897_Bing__z___x___y__png</code>"},{"location":"mwp-Gtk4-migration-guide/#map-sources","title":"Map Sources","text":"<p>In preparation for the announced removal of the Bing Maps service, <code>mwp</code> adds new imagery sources:</p> <ul> <li>Esri Clarity : No registration required, some minor data quality affects.</li> <li>Esri World Imagery : No registration required, some minor data quality affects.</li> <li>MapBox : Requires registration, the user acquiring a Mapbox API key. This key may be either stored in the Desktop keyring (managed by <code>libsecret</code>) or as a plain text string in the <code>gsettings</code> database.</li> </ul>"},{"location":"mwp-Gtk4-migration-guide/#keyring","title":"Keyring","text":"<p>Add to the MapBox key to the user keyring using <code>secret-tool</code> with the following attributes:</p> <pre><code>secret-tool store --label=\"Mapbox API\" name mapbox-api-key domain org.stronnag.mwp\nPassword: *************************************************\n</code></pre>"},{"location":"mwp-Gtk4-migration-guide/#gsettings","title":"Gsettings","text":"<p>Alternatively, the key can be added to the <code>gsettings</code> database: <pre><code> gsettings set org.stronnag.mwp mapbox-apikey 'pk.xxxxxxx'\n # where 'pk.xxxxxxx' is your MapBox API Key\n</code></pre></p> <p>Note that sadly <code>libshumate</code> creates a cache directory name from which the MapBox access token may be recovered, so there is little security / privacy gain by using the secret key-ring, alas. See Gitlab issue.</p>"},{"location":"mwp-Gtk4-migration-guide/#bing-services","title":"Bing Services","text":"<p>While it lasts, the Bing services (no registration / key required) provide:</p> <ul> <li>Bing Aerial : Imagery with no annotations</li> <li>Bing Hybrid : Imagery with road / place annotations</li> </ul>"},{"location":"mwp-Gtk4-migration-guide/#side-panel","title":"Side Panel","text":"<p>As <code>libgdl</code> is retired, a simple, bespoke panel comprising embedded resizeable panes has been implemented. The configuration may be user defined by a simple text file <code>~/.config/mwp/panel.conf</code>.</p> <ul> <li>The panel consists for four vertical panels</li> <li>The top panel can hold three horizontal panes</li> <li>The other panels can hold two panes.</li> </ul> <p>Each entry is defined by a comma separated line defining the panel widget, the row (0-3) and the column (0-2) and an optional minimum size (only required for the artificial horizon). The default panel is defined (in the absence of a configuration file) as:</p> <pre><code># default widgets\nahi,0,1,100\nrssi, 1, 0\ndirn, 1, 1\nflight, 2, 0\nvolts, 3, 0\n</code></pre> <p>Which appears as: </p> <p>The available panel widgets are named as:</p> Name Usage <code>ahi</code> Artificial horizon <code>dirn</code> Direction comparison <code>flight</code> \"Flight View\" Position / Velocity / Satellites etc, <code>volts</code> Battery information <code>vario</code> Vario indicator <code>wind</code> Wind Estimator (BBL replay only) <p>No other legacy widgets have been migrated.</p> <p>So using the following <code>~/.config/mwp/panel.conf</code></p> <pre><code># default + vario + wind widgets\nahi, 0, 1, 100\nvario,0,2\nrssi, 0, 0\nwind, 1, 0\ndirn, 1, 1\nflight, 2, 0\nvolts, 3, 0\n</code></pre> <p>would appear as: </p> <p>Note: If you change  <code>~/.config/mwp/panel.conf</code>, you should exit mwp and delete  <code>~/.config/mwp/.paned</code> before restarting mwp.</p>"},{"location":"mwp-Gtk4-migration-guide/#coexistence","title":"Coexistence","text":"<p>mwp (Gtk4) and legacy (Gtk+-3.0) versions can coexist.</p> <ul> <li>Install legacy mwp (Gtk+-3.0)</li> <li>Rename the executable (e.g. to mwp3)</li> <li>Install master mwp (Gtk4).</li> </ul> <p>If you use any of the map proxies (<code>bproxy</code>, <code>gmproxy</code>), you must use the latest version.</p>"},{"location":"mwp-Gtk4-migration-guide/#display-variables-tweaks","title":"Display Variables / Tweaks","text":"<p>There are a couple of Gtk related environment variables that may affect the performance of mwp, particularly on older or less well supported GPUs:</p> <ul> <li><code>GSK_RENDERER</code> : Recently the Gtk renderer default was changed from <code>gl</code> to <code>ngl</code> (4.14+) to <code>vulkan</code> (4.16+).   On some older / less well supported GPUs it may be necessary to use the <code>cairo</code> renderer;  <code>cairo</code> is also necessary on the author's touch screen tablet for correct touch screen WP dragging. Note that there may well be trade offs: on one of the author's machines, WP dragging seems slightly snappier using the <code>cairo</code> <code>GSK_RENDERER</code>, however the CPU usage for BBL replay is much greater using <code>cairo</code> compared to <code>vulkan</code>.</li> <li><code>GDK_BACKEND</code> : In the event that your hardware / software stack is almost hopelessly broken such that mwp is aborted with a Gdk message like  \"Error 71 (Protocol error) dispatching to Wayland display\", then setting this variable to <code>x11</code> may allow <code>mwp</code> to continue.</li> </ul> <p>From mwp 24.10.28, mwp will set <code>GSK_RENDERER=cairo</code> for its own use if the OS or user has not previously set <code>GSK_RENDERER</code>.</p> <p>The environment variable(s) may be set in <code>~/.config/mwp/cmdopts</code> for mwp exclusive use if required. <pre><code>GSK_RENDERER=cairo\n</code></pre></p> <p>Otherwise, the variable(s) may be set in <code>/etc/environment</code>, <code>.profile</code> or a <code>.config/environment.d</code> file if required.</p>"},{"location":"mwp-Gtk4-migration-guide/#optional","title":"Optional","text":"<p>If you use a map sources file in <code>~/.config/mwp</code>, you may optionally convert the <code>#X#</code> elements (for X, Y, Z) replacing with more standard <code>{x}</code> etc.</p>"},{"location":"mwp-Gtk4-migration-guide/#omissions","title":"Omissions","text":"<ul> <li>ublox-geo (abandoned)</li> </ul>"},{"location":"mwp-Gtk4-migration-guide/#os-specifics","title":"OS Specifics","text":""},{"location":"mwp-Gtk4-migration-guide/#debian","title":"Debian","text":"<p>For the Debian package runtime dependencies:</p> <p><pre><code>libadwaita-1-0 (&gt;= 1.5~beta)\nlibc6 (&gt;= 2.38)\nlibcairo2 (&gt;= 1.2.4)\nlibgdk-pixbuf-2.0-0 (&gt;= 2.22.0)\nlibglib2.0-0t64 (&gt;= 2.80.0)\nlibgraphene-1.0-0 (&gt;= 1.5.4)\nlibgstreamer1.0-0 (&gt;= 1.6.0)\nlibgtk-4-1 (&gt;= 4.13.5)\nlibgudev-1.0-0 (&gt;= 146)\nlibjson-glib-1.0-0 (&gt;= 1.5.2)\nlibpaho-mqtt1.3 (&gt;= 1.3.0)\nlibpango-1.0-0 (&gt;= 1.14.0)\nlibprotobuf-c1 (&gt;= 1.0.1)\nlibsecret-1-0 (&gt;= 0.7)\nlibshumate-1.0-1 (&gt;= 1.0.0~alpha.1+20220818)\nlibsoup-3.0-0 (&gt;= 3.3.1)\nlibtinfo6 (&gt;= 6)\nlibvte-2.91-gtk4-0\nlibxml2 (&gt;= 2.7.4)\nlibrsvg\n</code></pre> Example packages:</p> <pre><code>sudo apt install -y blueprint-compiler libprotobuf-c-dev \\\n  libvte-2.91-gtk4-dev libshumate-dev libpaho-mqtt-dev libgtk-4-dev \\\n  libadwaita-1-dev libsecret-1-dev librsvg2-dev\n</code></pre>"},{"location":"mwp-Gtk4-migration-guide/#ubuntu","title":"Ubuntu","text":"<p>The Ubuntu 24.04 version of <code>meson</code> is too old. A more update version may be installed locally using <code>pipx</code>. For Ubuntu 24.10, the distro version is adequate.</p> <pre><code>sudo apt install pipx\npipx install meson\n</code></pre> <p>Other packages as for Debian.</p>"},{"location":"mwp-Gtk4-migration-guide/#fedora","title":"Fedora","text":"<p>Example package list:</p> <pre><code>sudo dnf5 install -y libshumate-devel vte291-gtk4-devel protobuf-c-devel \\\n    paho-c-devel blueprint-compiler gtk4-devel libsecret-devel\n</code></pre>"},{"location":"mwp-Gtk4-migration-guide/#macos","title":"MacOS","text":"<p>Requires mwptools 2024.11.20 or later.</p> <ul> <li>Use Homebrew to install required packages (names may be evinced from the Linux docs)</li> <li>Follow generic instructions for <code>meson</code> and <code>ninja</code></li> </ul>"},{"location":"mwp-Gtk4-migration-guide/#dbus","title":"DBus","text":"<p>The DBus name / path are changed to map the application Id; e.g. <code>org.stronnag.mwp</code> and  <code>/org/stronnag/mwp</code>. A few of the DBus interfaces have been enhanced.</p>"},{"location":"mwp-Power-and-screen-management/","title":"Power and screen management","text":"<p>There are a number of ways of managing the screen (inhibit screen saver etc.)</p> <ul> <li> <p>Use an external screen-saver manager such as caffeine</p> </li> <li> <p>Use the legacy mwp  settings options, for example:</p> <pre><code>org.stronnag.mwp atexit 'gsettings set org.gnome.settings-daemon.plugins.power idle-dim true'\norg.stronnag.mwp atstart 'gsettings set org.gnome.settings-daemon.plugins.power idle-dim false'\n</code></pre> </li> <li> <p>Allow mwp to manage screen and power settings, controlled by a setting:</p> <pre><code>gsettings set org.stronnag.mwp manage-power true\n</code></pre> </li> </ul> <p>In the first two cases, the setting is somewhat coarse, either requiring the user to click on something and applying to the whole mwp session.</p> <p>The final case applies only when mwp is receiving push telemetry (LTM, Mavlink, MQTT). Inhibiting IDLE and SUSPEND is performed using the GTK inhibit() API and will thus work with most window managers.</p>"},{"location":"mwp-Radar-View/","title":"Radar View","text":"<p>mwp supports the display of \"radar\" contacts. This provides a view of adjacent aircraft obtained from a number of sources:</p> <ul> <li>Tracked Telemetry. Secondary models tracked by telemetry (CRSF, LTM, MAVLink, Smartport, MPM(Flysky, Smaprtport)). Provided by RX Telemetry Mirroring or dedicated telemetry radios.</li> <li> <p>INAV-radar. INAV radar works in conjunction with INAV flight controllers to broadcast the location of UAS fitted with an ESP32 LoRa module. mwp can listen to one of these modems in ground station mode to display the positions of the rest of the 'swarm' (up to 4 UAS); technical / MSP details.</p> </li> <li> <p>General Aviation from internet provider using a REST service delivering the dump1090/readsb  JSON schema. This schema is used by a number of both free and subscription web services.</p> </li> <li>General Aviation typically reported using SDR (Software Defined Radios) using SBS streaming TCP protocol. This is generated by the open source dump1090 and readsb open source applications with a SDR receiver, as well as commercial products.</li> <li>General Aviation typically reported using SDR (Software Defined Radios) using the dump1090-fa JSON format.</li> <li>General Aviation typically reported using SDR (Software Defined Radios) using the readsb \"protobuf\" format. This is the preferred way to access SDR ADSB / Mode-S data.</li> <li>General Aviation reported by the MAVLink 'Traffic Report' / 'ADSB Vehicle' message. Examples of available hardware include:<ul> <li>uAvionix PingRX, a compact device that receives ADS-B location data from full sized aircraft and publishes the locations as MAVLink. For a ground based installation, this device has around a 40Km detection radius. MAVLink ICD.</li> <li>Aerobits TT-SC1. Untested, but supports the same MAVLink API as the PingRX. Product documentation.</li> <li>PicoADSB WiFi source. Note that PicoADSB is at an alpha stage of development and the data format may be subject to change (and thus break mwp's imlpementation). Mavlink also works preferable with forced MAVlink heartbeat. See URI Conventions for examples.</li> </ul> </li> <li>General Aviation reported using the <code>MSP2_ADSB_VEHICLE_LIST</code> message. This is generated by INAV later than 7.1.0 when a PingRX or TT-SC1 device is attached to the flight controller. This is received by the main mwp MSP port without user configuration (no need to set up a <code>radar-device</code>). Due to the size of  <code>MSP2_ADSB_VEHICLE_LIST</code> message, mwp does not poll for <code>MSP2_ADSB_VEHICLE_LIST</code> by default, see the setting key <code>msp2-adsb</code>, below.</li> <li>Proximity alerts (visual and audible) for General Aviation (ADS-B / sbs-1 / dump1090 / readsb / Internet REST) aircraft, based on planned or actual home location or vehicle location.</li> </ul> <p>For SDR (Software Defined Radios) using the readsb or dump1090 where the SDR host has a web server configured to supply the generated \"protobuf\" or JSON output, then mwp can obtain the data from the web server. Otherwise, it will be necessary to set up a small daemon on SDR host, see the <code>src/samples/adsb-extra</code> directory for further details.</p> <p>Note that the SDR protocols may also be used with network services that provide ADS-B reports (usually for a fee or for provided local data).</p>"},{"location":"mwp-Radar-View/#mwp-configuration","title":"mwp Configuration","text":"<p>mwp can receive the 'radar' data over one or more connections, anyof which may be active, and mwp can receive and display 'own vehicle' telemetry (MSP, LTM, CRSF, Smartpost), Tracked Telemetry, 'INAV-radar', 'MAVlink Traffic' and General Aviation data simultaneously. Radar data may be received over:</p> <ul> <li>The main serial port device (see caveat for INAV-radar) and <code>MSP2_ADSB_VEHICLE_LIST</code>.</li> <li>device(s) defined by the <code>radar-device</code> CLI or configuration parameter (MAVLink Traffic, INAV-radar, SDR protocols)</li> </ul> <p>The <code>radar-device</code> option is defined by the standard mwp naming scheme:</p> <ul> <li>A serial device node, with optional baud rate, e.g.:<ul> <li><code>/dev/ttyACM0</code>, <code>/dev/ttyUSB4@567600</code>, <code>/dev/rfcomm3</code></li> <li>Serial defaults to 115200 baud, but may be set in the device name (<code>@baudrate</code>, <code>?baud=</code>)</li> <li>Where a device expects a MAVlink \"keep alive\" (heartbeat), the device name may include <code>?mavlink=</code> modifier. See URI Conventions for examples.</li> </ul> </li> <li>A Bluetooth address (for BT bridges)<ul> <li><code>00:0B:0D:87:13:A2</code></li> <li>Optionally, modifier as above.</li> </ul> </li> <li>A UDP address, e.g. for simulation, recording replays or serial multiplexer (INAV, mavlink).<ul> <li><code>udp://:30001</code> local UDP listener.</li> </ul> </li> <li>An online REST service providing the <code>readsb</code> JSON format. For now, mwp supports services that offer and end point of the form <code>https://host/v2/point/lat/lon/</code>. These are defined using the <code>adsbx://</code> pseudo URI, and require the host, range in nautical miles (NM) and the refresh interval (milliseconds). Some suppliers limit the maximum range to 250NM and minimum update rate of 1 second.<ul> <li><code>adsbx://api.adsb.one?range=40&amp;interval=1000</code>   Please see below for the mwp implementation details.</li> </ul> </li> <li>A <code>readsb</code> protobuf source or <code>dump1090</code> JSON source over <code>http</code>/<code>https</code>, for example, using hosts <code>woozle</code> (protobuf) and <code>jagular</code> (JSON):<ul> <li><code>http://woozle/readsb/data/aircraft.pb</code></li> <li><code>http://jagular/dump1090/data/aircraft.json</code></li> </ul> </li> <li>A <code>readsb</code> protobuf source, defined by a special URI:<ul> <li><code>pba://[[host][:port]]</code> (requires <code>adsbpbsrv</code> on the SDR host).   Host and port are optional, defaulting to <code>localhost</code> and <code>38008</code>. So the minimal \"URI\" is <code>pba://</code>.</li> </ul> </li> <li>A <code>dump1090</code> JSON source, defined by a special URI:<ul> <li><code>jsa://[[host][:port]]</code> (requires <code>jsacsrv</code> on the SDR host).   Host and port are optional, defaulting to <code>localhost</code> and <code>37007</code>. So the minimal \"URI\" is <code>jsa://</code>.</li> </ul> </li> <li>PicoADDB \"REST\" style polled URI, e.g. <code>http://192.168.4.1/aircraftmanager/status?source=picoadsb</code> (<code>192.168.4.1</code> represents Pico IP / host name)</li> <li>PicoADDB web socket URI, e.g. <code>ws://192.168.4.1/ws</code> (<code>192.168.4.1</code> represents Pico IP / host name). More efficient if your Pico WiFi is reliable.</li> <li>A SBS protocol source, defined by a special URI:<ul> <li><code>sbs://[[host][:port]]</code>   Host and port are optional, defaulting to <code>localhost</code> and <code>30003</code>. So the minimal \"URI\" is <code>sbs://</code>.</li> </ul> </li> </ul> <p>For \"Telemetry Tracking\", please see its separate article.</p> <p>The specific (not shared with the main serial port) radar device(s) may be defined on the command line, or in the static command options file (<code>~/.config/mwp/cmdopts</code>):</p> <ul> <li><code>mwp --radar-device udp://:30001</code></li> <li><code>$ cat ~/.config/mwp/cmdopts</code><pre><code># Default options for mwp\n# using udev rule to associate a specifc USB-TTL adaptor to a name\n--radar-device=/dev/pingRX@57600\n</code></pre> </li> </ul> <p>Multiple devices may be defined, e.g.</p> <ul> <li>As separate options, <code>--radar-device=/dev/pingRX@57600 --radar-device /dev/inavradar@115200</code></li> <li>As a comma separated list: <code>--radar-device=/dev/pingRX@57600,/dev/inavradar@115200</code></li> </ul> <p>Any bespoke <code>radar-device</code> is started automatically on startup (or when it shows up). It is not managed via the serial <code>Connect</code> button.</p>"},{"location":"mwp-Radar-View/#adsbx-rest-providers","title":"ADSBX REST Providers","text":"<p>For many users using a (free) online REST service will be a simple option compared to using their own hardware devices.</p>"},{"location":"mwp-Radar-View/#supported-providers","title":"Supported providers","text":"<p>The intention is to support any provider that offers the <code>readsb</code> JSON response (sometimes called the ADSBExchange V2 API response). The query to get such a response may differ between providers, so for now the following providers are supported:</p> <ul> <li>adsb.lol</li> <li>adsb.one</li> </ul> <p>These sources have the benefits of:</p> <ul> <li>Using the same REST API endpoint (<code>https://host/v2/point/lat/lon/range</code>)</li> <li>Are free to use</li> <li>Do not require registration</li> <li>Have few usage limits</li> </ul>"},{"location":"mwp-Radar-View/#configuration","title":"Configuration","text":"<p>Using (one of) the above providers requires that the user defines a <code>--radar-device</code> option using the <code>adsbx://</code> URI schema. It is necessary to supply the host name, the range (in nautical miles) and a refresh interval in milliseconds, in the format: <pre><code>adsbx://host?range=R&amp;interval=T\n</code></pre> where</p> <ul> <li><code>host</code> is the provider host (assumed available via https)</li> <li><code>range</code> defines the range (R)  in nautical miles</li> <li><code>interval</code> defines the refresh interval (T) in milliseconds</li> </ul> <p><code>--radar-device</code> may be given on the command line, or more conveniently in <code>~/.config/mwp/cmdopts</code>, for example:</p> <pre><code>--radar-device adsbx://api.adsb.lol?range=40&amp;interval=1000\n## or\n--radar-device adsbx://api.adsb.one?range=40&amp;interval=1000\n</code></pre>"},{"location":"mwp-Radar-View/#expanded-adsbx-uri-format","title":"Expanded adsbx:// URI format","text":"<p>In order to support other providers (other than <code>adsb.one</code> and <code>adsb.lol</code>), an expanded URI format is available. This enables the use of providers that have a more complex URL (compared to <code>https://host/v2/point/lat/lon/range</code>) and / or require authentication. For example, the provider <code>opendata.adsb.fi</code> requires:</p> <p><pre><code>https://opendata.adsb.fi/api/v2/lat/{lat}/lon/{lon}/dist/{range}\n</code></pre> where <code>{lat}</code>, <code>{lon}</code> and <code>{range}</code> are the centre latitude, longitude and range. In addition, commercial sites may require an API key (and identifier).</p> <p>mwp therefore accepts additional <code>adsbx://</code> parameters:</p> <ul> <li><code>format</code> : The path after the host, by default <code>v2/point/{}/{}/{}</code> where the '{}' items are respectively <code>latitude</code>, <code>longitude</code> and <code>range</code>.</li> <li><code>api-key</code> : The api key and identifier.</li> </ul> <p>For example:</p> <pre><code>--radar-device adsbx://opendata.adsb.fi?range=40&amp;interval=1000&amp;format=api/v2/lat/{}/lon/{}/dist/{}\n</code></pre> <p>And for a site that required a user specific API token with an identifier <code>api-auth</code> which is set as a <code>https</code> header:</p> <pre><code>  ..... &amp;api-key=api-auth:MySecretToken\n</code></pre> <p>results in the <code>https</code> header: <pre><code>api-auth: MySecretToken\n</code></pre></p>"},{"location":"mwp-Radar-View/#adsbx-notes","title":"Adsbx Notes","text":"<ul> <li>It is pointless to define both providers as they have much the same data</li> <li>The providers permit a maximum range of 250NM</li> <li>The providers have a minimum query interval of 1s (1000ms)</li> <li>As the APIs return the data as JSON, the results are verbose. Requesting a range of 250NM may seem like a good idea; however it is not useful for our purposes and will return a large volume of data, which may be sub-optimal using mobile internet in the field.</li> <li><code>mwp</code> will use select a centre location based on user choice and vehicle state.</li> </ul> <p>Where the data is provided by 3rd party volunteers, there may be limited coverage in remote areas (or areas with little air traffic).</p>"},{"location":"mwp-Radar-View/#using-the-main-serial-port","title":"Using the main serial port","text":"<p>The main mwp serial port may be used for MavLink Traffic and <code>MSP2_ADSB_VEHICLE_LIST</code> messages without any further configuration. For INAV-radar, to use the main MSP port for INAV-radar (vice using <code>--radar-device</code>), it is still necessary to add a command option to mwp; it needs to told to relax the default inbound MSP direction check.</p> <p>This is enabled as</p> <pre><code>mwp --relaxed-msp\n</code></pre> <p>which should be 'mainly harmless' for normal operations. It's entirely acceptable to put this in <code>~/config/mwp/cmdopts</code> to make it the default, as the protocol check dilution is slight.</p>"},{"location":"mwp-Radar-View/#settings","title":"Settings","text":"<p>The following <code>dconf</code> setting affect the radar function:</p> Setting Usage <code>radar-alert-altitude</code> Target altitude (metres) below which ADS-B proximity alerts may be generated. Requires that 'radar-alert-range' is also set (non-zero). Setting to 0 disables. Note that ADS-B altitudes are AMSL (or geoid) (default 0) <code>radar-alert-min-speed</code> Target speed (metres/sec) above which ADS-B proximity alerts may be generated. Requires that 'radar-alert-altitude' and \"radar-alert-range\" are also set (default 10 m/s) <code>radar-alert-range</code> Range below which ADS-B alerts may be generated. Requires that 'radar-alert-altitude' is also set (non-zero). Setting to 0 disables (default 0). <code>radar-list-max-altitude</code> Maximum altitude (metres) to include targets in the radar list view. Targets higher than this value will show only in the map view. This is mainly for ADS-B receivers where there is no need for high altitude targets to be shown. Setting to 0 disables. Note that ADS-B altitudes are AMSL (or geoid) (default 0). <code>ga-alt</code> Units for GA Altiude, enumerated as 0=m, 1=ft, 2=FL <code>ga-range</code> Units for GA Range, enumerated as 0=m, 1=km, 2=miles, 3=nautical miles <code>ga-speed</code> Units for GA Speed, enumerated as  0=m/s, 1=kph, 2=mph, 3=knots <code>msp2-adsb</code> Options for requesting <code>MSP2_ADSB_VEHICLE_LIST</code>. \"off\": never request, \"on:\" always request, \"auto:\" heuristic based on serial settings / bandwidth <p>Note that proximity alerts require that both the <code>radar-alert-altitude</code> and <code>radar-alert-range</code> values are set.</p>"},{"location":"mwp-Radar-View/#location-and-alerts","title":"Location and Alerts","text":"<p>mwp selects a location for alerts based on the user choice and vehicle state. The same location will also be used for <code>adsbx://</code> (internet REST) services to request aircraft within a given range.</p> <p>The following table defines how the location is selected, and the range check alert visualisation for that state.</p> No location GCS Home Connection/GPS Sound x Y x Y Toast x Y x Y Item Colour x Y Y Y Base Position View centre / SDR location GCS Home Vehicle"},{"location":"mwp-Radar-View/#location-types","title":"Location Types","text":"<ul> <li>No location: There is no home or vehicle location known.</li> <li>GCS: The user has enabled the GCS location icon, either from the View -&gt; GCS Location menu item or a local GPS (via <code>gpsd</code>).</li> <li>Home: A home position is available, either from the vehicle GPS or a \"fake\" / \"planned\" home via Ctrl-Shift-H / creating a mission / loading a mission with stored home position.</li> <li>Connection: The vehicle is connected to mwp and is supplying a valid GPS location.</li> </ul>"},{"location":"mwp-Radar-View/#visualisation","title":"Visualisation","text":"<ul> <li>Sound: A beep is emitted every two seconds</li> <li>Toast: A transient, non-blocking notification at the base of the screem</li> <li>Item Colour: The aircraft icon will show in red, and the aircraft detail will be shown in the Gtk4 \"error\" style in the radar list.</li> </ul>"},{"location":"mwp-Radar-View/#usage","title":"Usage","text":"<p>Legacy Images</p> <p>The images this section are from legacy mwp, however the capability is the same.</p> <p>Once the radar interface is open, radar tracks are displayed on the map and in a list available from the \"View -&gt; Radar View' menu option.</p> <ul> <li>The list view is sort-able on the <code>Id</code>, <code>Status</code>, <code>Last</code> (time) and <code>Range</code> columns.</li> <li>The map visualisation may be toggled by the <code>Hide Tracks</code> (<code>Show Tracks</code>) button. This will also supress alerts.</li> <li>List and map views are updated in (near) real time.</li> <li>Settings for display units are used for positions, altitude and speed.</li> </ul>"},{"location":"mwp-Radar-View/#name","title":"Name","text":"Type Usage INAV-radar Node Id (typically 'A' - 'D') Traffic Report Callsign if reported, otherwise [ICAO number] SDR Callsign if reported, otherwise [Mode S hexadecimal code] Telemetry User defined for automatically allocated, prefixed by <code>TTRK-</code> General Aviation Callsign if reported, otherwise [ICAO number]"},{"location":"mwp-Radar-View/#status","title":"Status","text":"<p>Radar contacts have one of the following status values:</p> Status Explanation Undefined ADS-B: Not shown in list or on the map, INAV-Radar not armed / updated Stale The last contact was more that 120s previous. Displayed in the list and shown on the map with reduced intensity or an INAV-radar node has 'lost' status Armed An active INAV-radar contact Hidden A MAVLink Traffic /SDR contact is between 5 and 10 minutes old. It remains in the list but is not displayed in the map. MAVLink Traffic Report / SDR tracks are removed from the list (and internal storage) after 10 minutes inactivity. INAV-radar ground station. Stale / 'Lost' INAV-radar contacts do not expire, as they may relate to a lost model. ADS-B A live MAVLink Traffic report SDR SDR radio report (sbs, json, protobuf) ADSBX General Aviation internet REST service <p>The number displayed after the status text is:</p> Type Usage INAV-radar The link quality Traffic Report Time since last communication in seconds SDR reports Time since last communication in seconds General Aviation Time since last communication in seconds"},{"location":"mwp-Radar-View/#columns","title":"Columns","text":"<p>The columns are sortable. Note that since the introduction of Telemetry Tracking, a new column \"*\" has been added, this contains a single character indicating the source:</p> Indicator Source A ADS-B via MAVLink or MSP I INAV Radar S ADS-B via SDR protocol T Telemetry Tracker X General Aviation internet REST service <p></p>"},{"location":"mwp-Radar-View/#examples","title":"Examples","text":"<ul> <li>Proximity Alerts</li> <li>Live and stale aircraft</li> <li>Aircraft tooltip</li> <li>Mission Plan</li> <li>List view</li> </ul>"},{"location":"mwp-Radar-View/#live-ads-b-and-simulated-inav-targets-with-proximity-alerts-range-3000m","title":"Live ADS-B and simulated INAV targets, with proximity alerts (range &lt; 3000m).","text":""},{"location":"mwp-Radar-View/#local-manned-aircraft-view-over-florida-may-2020","title":"Local manned aircraft view over Florida (May 2020).","text":""},{"location":"mwp-Radar-View/#simulated-inav-radar-view","title":"Simulated INAV radar view","text":""},{"location":"mwp-Radar-View/#radar-devices","title":"Radar Devices","text":"<p>The Radar Devices menu option provides a UI to view, edit, add, remove mwp radar device entries.</p> <p></p> <p>Devices are read from <code>~/.config/mwp/cmdopts</code> or provided via the <code>--radar-device</code> CLI option. Active devices are listed before non-active devices.</p> <ul> <li>Devices may be made active or non-active by clicking on the \"Active\" checkbox.</li> <li>Devices may be removed from the list by clicking the \"remove / delete\" button.</li> <li> <p>The device name may be \"inline\" edited in place. If the device name is changed, the device will be deactivated (if active), the old entry removed and a new entry created.</p> </li> <li> <p>The \"Add\" button allows a new device (URI / device node) to be added to the list.</p> </li> <li>The \"Save\" button rewrites  <code>~/.config/mwp/cmdopts</code> with the (updated) radar device list. The extant file is renamed to  <code>~/.config/mwp/cmdopts.bak</code></li> </ul> <p>In the above image, mwp was invoked as <code>mwp --radar-device 35:53:17:04:14:BA</code> and <code>~/.config/mwp/cmdopts</code> contained the following definitions:</p> <pre><code>--radar-device adsbx://opendata.adsb.fi?range=40&amp;interval=1000&amp;format=api/v2/lat/{}/lon/{}/dist/{}\n--radar-device http://jagular.daria.co.uk/dump1090/data/aircraft.json\n# --radar-device adsbx://api.adsb.lol?range=40&amp;interval=1000\n# --radar-device adsbx://api.adsb.one?range=40&amp;interval=1000\n# --radar-device http://woozle/readsb/data/aircraft.pb\n# --radar-device jsa://woozle\n# --radar-device pba://woozle\n</code></pre>"},{"location":"mwp-Radar-View/#simulators","title":"Simulators","text":"<p>There are simulators for both INAV-radar and MAVLink 'Traffic Report' (e.g. uAvionix PingRX) in the <code>mwptools/src/samples/radar</code> directory.</p> <p>There is a replay tool for SBS CSV logs <code>mwptools/src/samples/sbs-test/sbs-player.rb</code>.</p>"},{"location":"mwp-Radar-View/#changing-the-radar-symbols","title":"Changing the Radar Symbols","text":"<p>Many map symbols used by mwp can be changed by the user; in the image above, the INAV radar node symbol has been changed from the default stylised INAV multirotor to a smaller version of the mission replay \"paper plane\" symbol as described in creating your own icon.</p>"},{"location":"mwp-Radar-View/#protocol-documentation","title":"Protocol documentation","text":""},{"location":"mwp-Radar-View/#mavlink-traffic-report-eg-uavionix-pingrx","title":"MAVLink 'Traffic Report' (e.g. uAvionix PingRX)","text":"<p>The MAVLink implementation is comprehensively documented by the vendor.</p>"},{"location":"mwp-Radar-View/#inav-radar","title":"INAV radar","text":"<p>The following is required by a device wishing to act as a ground node (it either masquerades as an INAV FC, or declares itself a GCS)</p> <ul> <li>Receive and respond to the following MSP data requests:<ul> <li>MSP_FC_VARIANT (responding as <code>INAV</code> or (from 2021/05/06) <code>GCS</code> for generic ground control stations).</li> <li>MSP_FC_VERSION (in <code>INAV</code> and <code>GCS</code> modes)</li> <li>MSP_NAME (in <code>INAV</code> and <code>GCS</code> modes)</li> <li>MSP_STATUS (in <code>INAV</code> mode)</li> <li>MSP_ANALOG (in <code>INAV</code> mode)</li> <li>MSP_BOXIDS (in <code>INAV</code> mode)</li> <li>MSP_RAW_GPS (in <code>INAV</code> mode)</li> </ul> </li> <li>Receive unsolicited<ul> <li>MSP2_COMMON_SET_RADAR_POS</li> </ul> </li> </ul> <p>Note that the device firmware assumes that MSP buffer sizes are \"as specification\"; exceeding the expected message buffer size may crash the device (mea culpa).</p> <p>In <code>GCS</code> mode, the node is passive; it does not use a LoRa slot and does not attempt to broadcast a location. In <code>INAV</code> mode, the node takes up a LoRa slot and is expected to reply to the additional MSP queries.</p> <p>mwp's behaviour is defined by the GCS Location</p> <ul> <li>If the GCS Location is defined (when the radar device is initialised, then mwp will respond as <code>INAV</code> and return the GCS Location, which may be driven by gpsd if required.</li> <li>Otherwise, mwp will respond as a passive <code>GCS</code>.</li> </ul>"},{"location":"mwp-Radar-View/#sbs-csv-protocol","title":"SBS CSV protocol","text":"<p>Protocol description.</p>"},{"location":"mwp-area-planner/","title":"Mwp Survey Planner","text":"<p>mwp survey / area planner is a tool to plan \"survey\" or \"search\" missions. It generates MWXML mission files compatible with mwp and the INAV Configurator. A simple \"parallel lines across a polygon\" survey pattern is supported, as well as a \"creeping square\" pattern and a spiral pattern.</p>"},{"location":"mwp-area-planner/#usage","title":"Usage","text":"<p>The area planner is invoked from the \"Edit\" menu. It loads a dialogue window and presents a basic search area outline.</p> <p></p> <p>The drop-down in the top right offers options of:</p> <ul> <li>Parallel: Default parallel line pattern</li> <li>Square: Expanding Square.</li> <li>Spiral: Spiral pattern.</li> </ul>"},{"location":"mwp-area-planner/#mission-parameters","title":"Mission Parameters","text":"<p>The dialog provides options for mission creation that are common to each survey pattern:</p> <ul> <li>Altitude: in metres (mission parameter), relative or absolute, dependent on:</li> <li>AMSL / Ground Clearance: This controls how the altitude value is used:<ul> <li>If not set, the same altitude value is set for each way-point and is relative to the arming location.</li> <li>If set, the altitude value is added to the AMSL (Absolute/Above Mean Sea Level) elevation for each way point, and the way-point altitude is set as absolute.</li> </ul> </li> <li>RTH (mission parameter). Whether to set RTH on the final generated WP.</li> <li>Leg Speed (mission parameter).</li> </ul> <p>Legacy Images</p> <p>There are some older images in the samples below without the AMSL button.</p>"},{"location":"mwp-area-planner/#control-buttons","title":"Control Buttons","text":"<p>The tool is controlled by the three buttons at the bottom of the window.</p> <ul> <li> <p>Apply: The settings are applied and the pattern is drawn. The button will be disabled if the size of the survey outline and the row separation values would result in an impractically large number of turning points. In order to resolve this it will be necessary to either reduce the size of the survey area or increase the row separation.</p> </li> <li> <p>Reset View: The survey view is reset. The survey outline is reset to a rectangle covering 80% of the map. This is used to reset the area after panning or zooming out of the initial view.</p> </li> <li> <p>Generate Mission: Generates a mission from the survey plan. The survey tool is closed. The mission may be edited / save / uploaded to the FC as normal. If the number of points would exceed the maximum number of mission points, this button is disabled.  In order to resolve this it will be necessary to either reduce the size of the survey area or increase the row separation.</p> </li> </ul>"},{"location":"mwp-area-planner/#parallel-lines-editing-outline-points","title":"\"Parallel Lines\" Editing outline points","text":"<p>Points may be inserted / deleted from the survey outline from a right mouse / long press on a survey points. Insert adds a point in a clock-wise direction; delete removes the clicked point.</p> <p>Points may be moved by dragging.</p> <p></p> <p>Any plotted outline mission will be recalculated as points are manipulated.</p>"},{"location":"mwp-area-planner/#parameters","title":"Parameters","text":"<ul> <li>Angle: Defines the direction of the first mission leg.</li> <li>1st Turn: Left or Right</li> <li>Row Separation: Distance between the rows in metres</li> </ul> <p>Once an initial solution has been plotted, changing any of the first three parameters will result in the solution being recalculated.</p> <p>After a solution has been calculated, the \"Mission Data\" summary is updated.</p> <p>Example of too many points being generated due to over-large area / narrow row separation: </p> <p>Example of fewer points being generated with adjusted area and row separation: </p> <p>Note also how the angle and turn parameters affect the staring point.</p> <p>Example of generated mission with KML backdrop showing original survey area: </p>"},{"location":"mwp-area-planner/#square-pattern-generator","title":"\"Square\" pattern generator","text":"<p>The \"Square\" generator provides a single draggable point with options of start angle, first leg distance and the number of iterations.</p> <p></p> <p>The default parameters result in the following survey pattern.</p> <p></p> <p>And a generated mission from these settings looks might look like:</p> <p></p>"},{"location":"mwp-area-planner/#spiral-pattern-generator","title":"\"Spiral\" pattern generator","text":"<p>The \"Spiral\" generator provides a single draggable point with options of first leg distance and the number of iterations. In this case, the first leg distance is the range to the 0\u00b0 radial, which is repeated for each iteration. The number of points per iteration varies with the \"radius\" in order to provide practical leg lengths within INAV's 120 mission point constraint.</p> <p>The default parameters result in the following survey pattern.</p> <p></p> <p>And a generated mission from these settings looks might look like:</p> <p></p>"},{"location":"mwp-area-planner/#file-menu","title":"File Menu","text":"<p>The area planner dialog has a drop down menu to load and save Parallel area definitions to / from the file system. The files are the same format as for the legacy <code>mwp-area-planner</code>.</p> <p></p> <p>In addition (not shown), it is also possible to save the Parallel survey outline as a KML file for future display / analysis.</p>"},{"location":"mwp-area-planner/#obsolete-video","title":"Obsolete video","text":"<p>There is an old youtube video covering both the legacy <code>mwp-area-planner</code> and iforce2d's on line tool.</p>"},{"location":"mwp-assist-now/","title":"mwp Assist Now","text":""},{"location":"mwp-assist-now/#overview","title":"Overview","text":"<p>Assist Now (tm) is a Ublox service that provides data that may to be uploaded to a GPS in order to speed up time to first fix. In order to use this service, it is necessary to register for the service and a fee may be required.</p> <p>Assist Now provides two data sets:</p> <ul> <li>\"Online\": Data that is immediately useful. Downloaded data is useful for about 4 hours.</li> <li>\"Offline\": Longer term satellite orbit information. Downloaded data is useful for up to 35 days.</li> </ul> <p>mwp provides a UI to:</p> <ul> <li>Download AssistNow data to your computer. It is also cached, valid for the periods stated above.</li> <li>Reload (valid) data from cache.</li> <li>Upload the AssistNow data to your GPS (via the flight controller).</li> </ul> <p>It is possible to download and save the data to a file cache, and then upload to the FC later, within the specified cache validity periods.</p>"},{"location":"mwp-assist-now/#requirements","title":"Requirements","text":"<ul> <li>Ublox GPS M8 or later</li> <li>INAV 8 or later</li> <li>Registered for the AssistNow service.</li> <li>A single AssistNow access key for 'online' and 'offline' data.</li> </ul>"},{"location":"mwp-assist-now/#assistnow-key","title":"AssistNow Key","text":"<p>This may be stored with either <code>gsettings</code> or the user's secret keyring.</p>"},{"location":"mwp-assist-now/#gsettings","title":"Gsettings","text":"<p>The key may be stored in mwp's settings: <pre><code>gsetting set org.stronnag.mwp assist-key 'xxxxxxxxxxxxxx'\n</code></pre></p>"},{"location":"mwp-assist-now/#keyring","title":"Keyring","text":"<p>Alternatively, add to the user's secret keyring using <code>secret-tool</code> with the following attributes:</p> <pre><code>secret-tool store --label=\"AssistNow API\" name assist-key domain org.stronnag.mwp\nPassword: xxxxxxxxxxxxxx\n</code></pre>"},{"location":"mwp-assist-now/#usage","title":"Usage","text":"<p>The UI is available from the File menu:</p> <p></p> <ul> <li>The user can select the 'online\" and \"offline\" data sets; for best effect both should be applied.</li> <li>The 'Use Location' setting applies only to the \"online\" set and its use is recommended. If the home location (real or fake) is known, it will be used, otherwise the map centre is used. As the minimum precision used by AssistNow is 300km, home should be adequate for our needs.</li> <li>Once data has been downloaded [Download (Network)], it will be cached (<code>~/.cache/mwp/online.ubx</code>,  <code>~/.cache/mwp/onffine.ubx</code> (or Windows equivalent)). The cached files maybe reloaded [From Cache] within the validity periods.</li> <li>The [Apply to FC's GPS] button is only sensitive when a MSP connection is made and <code>feature GPS</code> is asserted. This will upload the AssistNow data to the FC. which in turn uploads it to the GPS.</li> <li>The \"offline\" data is time-stamped (up to 35 days). The data is filtered to select only the closest to the current time.</li> </ul> <p>For the offline data set, typically there are c. 4285 records, of which c. 225 will be uploaded to the FC filtered by date.</p>"},{"location":"mwp-follow-me/","title":"mwp Follow Me","text":""},{"location":"mwp-follow-me/#description","title":"Description","text":"<p>May 2023, mwp supports an implementation of INAV's Follow Me.</p> <p>In order to use this:</p> <ul> <li>There must be an active MSP link with the vehicle</li> <li>The vehicle must be armed</li> <li>The vehicle must be in <code>POSHOLD</code> with the <code>GCS NAV</code> mode also asserted.</li> </ul> <p>In addition to the manual (drag icon) positioning described below, it is also possible to use a local <code>gpsd</code> instance to drive the follow me location by checking the GPSd box.</p> <p></p> <p>Legacy Images</p> <p>The remaining images this section are from legacy mwp, however the capability is the same.</p> <p>Under the Edit menu, there is a new option Set FollowMe Point. Until you're armed and in POSHOLD this is not sensitive. </p> <p>Now armed, but not POSHOLD (orange Home icon showing), still not sensitive ... </p> <p>Now in POSHOLD. note the green POSHOLD icon ... menu option is sensitive! </p> <p>Clicking the menu option invokes the FollowMe dialog: </p> <p>The FollowMe desired location is indicated by the  second green icon (with the \u2a01 symbol). This may be dragged to the required location. An altitude, relative to home may also be set, <code>0</code> means don't change altitude.</p> <p>Once mwp has transmitted the desired location (WP#255), mwp will interrogate the FC for confirmation (WP#254, sic). This is logged, for example:</p> <pre><code>11:31:38.530919 Special WP#254 (4) 35.772714 140.361790 20m 0\u00b0\n</code></pre>"},{"location":"mwp-follow-me/#caveats","title":"Caveats","text":"<p>It's probably 6 years since anyone has used this sort of INAV functionality, so take care. In particular, I'm not sure how well the altitude item works (in the firmware, mwp appears to send the correct data). So start will plenty of altitude and <code>0</code> as the altitude setting.</p> <p>Note also that this has not been flight tested; the images and data tests have been done using the INAV  SITL (software in the loop), i.e. running INAV firmware as a desktop application, with fl2sitl as the (trivial) sensor provider and ser2tcp allowing a physical RX/TX to be used with the SITL.</p> <p>In the event that someone flight tests this, a mwp \"stderr\" log and a blackbox log would be appreciated.</p>"},{"location":"mwp-geozones/","title":"mwp and Geozones","text":""},{"location":"mwp-geozones/#introduction","title":"Introduction","text":"<p>mwp provides a UI for the Geozones function that first appeared in INAV 8.0.0. The technical details for this feature are published as part of INAV 8.0 INAV Documentation.</p> <p>Version Requirements</p> <p>The proposed INAV 8.0 implementation of GeoZones requires mwp 24.11.14 or later.</p> <p>Geozones provides a set of geographical shapes that the FC can navigate around, characterised by:</p> <ul> <li> <p>Shape</p> <ul> <li>Circular</li> <li>Polygon</li> </ul> </li> <li> <p>Type</p> <ul> <li>Exclusive</li> <li>Inclusive</li> </ul> </li> <li> <p>Action</p> <ul> <li>None</li> <li>Avoid</li> <li>Poshold</li> <li>RTH</li> </ul> </li> </ul> <p>The effect these parameters have on FC behaviour are described in the INAV Documentation.</p>"},{"location":"mwp-geozones/#geozone-validity-and-enforcement","title":"Geozone Validity and Enforcement","text":""},{"location":"mwp-geozones/#zone-geometry","title":"Zone Geometry","text":"<p>mwp checks that Geozones conform to the FC's known rules for validity:</p> <ul> <li>Zones are numbered consecutively from zero and are contiguous.</li> <li>Polygon zones are counter-clockwise.</li> <li>Polygon zones are \"simple\" (not \"complex\") polygon. That means there are no crossing line segments within a single polygon.</li> </ul> <p>mwp provides a \"Check Validity\" menu option to perform ad-hoc checks. mwp will not permit the upload of an invalid Geozone set to the FC. It is however possible to save a set that mwp claims is invalid in case the user wish to dispute such categorisation with the developer.</p>"},{"location":"mwp-geozones/#runtime-considerations","title":"Runtime Considerations","text":"<p>There are a number of runtime recommendations from the Geozone developer:</p> <ul> <li>If nested inclusive zones are used, ensure that they overlap by at least <code>2 * loiter radius</code> (or <code>geozone_mr_stop_distance</code> for multirotors) horizontally and 50 metres vertically to allow RTH to calculate a proper heading.</li> <li>When connecting polygonal zones, at least 2 vertices of one zone must be within the over-lapping zone.</li> </ul> <p>mwp does not currently attempt to enforce the runtime recommendations nor warns of their violation.</p>"},{"location":"mwp-geozones/#mwp-user-interface","title":"mwp User interface","text":"<p>Legacy Images</p> <p>The majority of images this section are from legacy mwp, however the capability is the same.</p>"},{"location":"mwp-geozones/#menu-options","title":"Menu options","text":"<p>mwp adds a Geozones menu option, with suboptions:</p> <p></p> <p>Note that the Save, Export, Clear, Download and Upload options are not sensitive if no geozone is loaded. Once a geozone is loaded, some or all of these options will be enabled. The MSP options are only enabled if the FC offers <code>feature GEOZONE</code> with the INAV 8.0 <code>feature</code> value of <code>(1 &lt;&lt; 4)</code>.</p> <p>Note that if <code>feature GEOZONE</code> is present, mwp will attempt to load Geozones from the FC if the setting <code>autoload-geozones</code> is true, e.g.:</p> <pre><code>gsettings set org.stronnag.mwp autoload-geozones true\n</code></pre>"},{"location":"mwp-geozones/#user-interface","title":"User Interface","text":"<ul> <li>Open, Save: Expects a textual definition in INAV CLI format. This may be read from an INAV dif for offline use.</li> <li>Export: Exports a loaded Geozone to KML. Geozone specific parameters are stored in the KML such that the original Geozone in CLI notation could be reproduced from the KML.</li> </ul>"},{"location":"mwp-geozones/#editor","title":"Editor","text":"<p>Edit UI Images</p> <p>The image immediately below represents the current Edit UI (it has the AMSL button); other Edit UI images are from an earlier instance without this button. The altitude values have no bearing on mwp's display of the Geozones, other than in the generated KML.</p> <p></p> <p>The icons along the top are:</p> <ul> <li>\"+\": Create a new zone</li> <li>\"&lt;\" : Move to previous zone</li> <li>\"&gt;\" : Move to next zone</li> <li>\"-\" : Delete current zone</li> <li>\"\ud83d\uddd8\" : Refresh : Refresh display / Start editing new zone</li> </ul> <p>If there is no Geozone loaded, the editor is as shown at the \"new zone\" state: the \"Shape\" item is enabled and a note explains how to proceed. Note that to create a circular zone, the radius must be non-zero. If the \"Shape\" item is set to \"Polygon\", then no radius is required to proceed.</p> <p></p> <p>Once the required details have been entered, pressing refresh draws the template shape. circle has a dragable centre and editable radius.</p> <p></p> <p>A polygon has 3 points (the mimimum), each of which can be dragged.</p> <p></p> <p>Additional points can be added immediately in front of an existing point from the right mouse menu.</p> <p></p> <p>With multiple zones loaded (or created), the user can switch between zones using the <code>&lt;</code> and <code>&gt;</code> icons.</p> <p></p>"},{"location":"mwp-geozones/#example-validation","title":"Example validation","text":"<p>In the following image, from left to right</p> Zone Id Colour Characteristics Validity 0 Red Counter-clockwise Valid 1 Green Clockwise Invalid 2 Red, fill Counter-clockwise, \"complex\" Invalid 3 Green, fill Counter-clockwise, concave Valid <p>Invalid zones are reported with the \"Check Valdity\" or \"Upload to FC\" options.</p> <p></p>"},{"location":"mwp-geozones/#zone-colours","title":"Zone Colours","text":"<p>mwp sets line and fill characteristics for GeoZones according to the zone's <code>type</code> and <code>action</code>.</p> <p>The default values are set as:</p> Type Action Line Fill Exclusive None red 4 4 Exclusive Avoid red 4 red Exclusive PosHold red 10 red Exclusive RTH red 10 red Inclusive None green 4 4 Inclusive Avoid green 4 Inclusive PosHold green 10 Inclusive RTH green 10 green <p>The values after the line colour are line width and optional dash width.</p> <p>The default colours are those suggested by the user who requested that mwp support GeoZones.</p> <p>The default \"red\" and \"green\" colours have some opacity set:</p> Type Value Line red <code>rgba(255,0,0,0.625)</code> Fill red <code>rgba(255,0,0,0.125)</code> Line green <code>rgba(0,255,0,0.625)</code> Fill green <code>rgba(0,255,0,0.125)</code> <p>Where line width is greater than 10, the opacity is further reduced by 20% to satisfy the author's aesthetic opinion.</p>"},{"location":"mwp-geozones/#user-definition","title":"User definition","text":"<p>The user may specify their own colours by creating a pipe separated file, <code>$HOME/.config/mwp/zone_colours</code>. This is a text file of the format:</p> <pre><code>type|action|line_colour|line_width|line_dash|fill_colour\n</code></pre>"},{"location":"mwp-geozones/#user-definition-fields","title":"User definition fields:","text":"<p>Type: The zone type as an integer (0-1 : Exclusive / Inclusive)</p> <p>Action: The zone action as an integer (0-3 :  None / Avoid / Poshold / RTH).</p> <p>Line Colour: see below for colour formats</p> <p>Line Width: In pixels, as an integer</p> <p>Line Dash: In pixels, as an integer; the line will alternate on/off using this value.</p> <p>Fill Colour: see below for colour formats</p>"},{"location":"mwp-geozones/#colour-defintion","title":"Colour defintion","text":"<p>Colours may be defined as:</p> <ul> <li>A \"standard\" name (taken from the X11 \"rgb.txt\" file) ; or</li> <li>A hexadecimal value in the form <code>#rrggbb</code> or <code>#rrggbbaa</code> ; or</li> <li>A RGB colour in the form <code>rgb(r,g,b)</code>); or <code>rgba(r,g,b,a)</code></li> </ul> <p>Where <code>r</code>, <code>g</code>, <code>b</code> and <code>a</code> are respectively the red, green, blue and alpha colour values. In the \"<code>rgb()</code>\" format, <code>r</code>, <code>g</code>, and <code>b</code> are either integers in the range 0 to 255 or percentage values in the range 0% to 100%, and <code>a</code> is a floating point value in the range 0 to 1.</p> <p>If the alpha component is not specified then it is set to be fully opaque.</p> <p>For \"standard X11 names\", an opacity may be defined by appending a floating point value in the range 0 to 1.0 to the name, separated by a semi-colon, for example <code>steelblue;0.8</code></p>"},{"location":"mwp-geozones/#example-default-settings-as-zone_colours-file","title":"Example: default settings as <code>zone_colours</code> file","text":"<p>The default settings can be represented in a <code>zone_colours</code> file as:</p> <pre><code>0|0|rgba(255,0,0,0.625)|4|4|\n0|1|rgba(255,0,0,0.625)|4|0|rgba(255,0,0,0.125)\n0|2|rgba(255,0,0,0.625)|10|0|rgba(255,0,0,0.125)\n0|3|rgba(255,0,0,0.625)|10|0|rgba(255,0,0,0.125)\n1|0|rgba(0,255,0,0.625)|4|4|\n1|1|rgba(0,255,0,0.625)|4|0|\n1|2|rgba(0,255,0,0.625)|10|0|\n1|3|rgba(0,255,0,0.625)|10|0|rgba(0,255,0,0.125)\n</code></pre> <p>Where fill is not required, it is left blank.</p> <p>If a line cannot be parsed, an error will the logged, giving the offending line number(s). Blank lines and comment lines (starting with <code>#</code> or <code>;</code>) are ignored.</p> <p>Please also note that floating point values must be specified with a point (<code>.</code>), even when the locale customary format would use comma (<code>,</code>).</p> <p>Alternate colour expressions for the first line above are therefore:</p> <pre><code>0|0|red;0.625|4|4|\n0|0|#ff0000a0|4|4|\n</code></pre>"},{"location":"mwp-hid-device-support/","title":"mwp HID Device Support","text":""},{"location":"mwp-hid-device-support/#overview","title":"Overview","text":"<p>From 25.05.07, mwp supports using a HID (Human Input Device) to provide RC (stick / switch inputs) to the FC.  An example of this might be running mwp on a game console such as SteamDeck and using the SteamDeck HID (sticks, buttons) to provide TX functions.</p> <p>While mwp provides functionality for doing this, it is not condoned as an acceptable way of controlling a UAS. Using <code>NSP_SET_RAW_RC</code> (aka <code>MSPRC</code>) over a MSP telemetry link cannot provide the update rate / performance / reliability / safety of a standard RC TX/RX.</p> <ul> <li>Lower control update rate as the RC  messages have to interleaved with other telemetry.</li> <li>Lower control update rate as the stream is half duplex and 90% of the messages require an acknowledgement.</li> <li>Still have to meet INAV's hard real time refresh rate.</li> <li>Inefficient message format (e.g. 16 bits per channel vice 11 bits / channel (cf. sBUS, CRSF)).</li> <li>The dedicated RC TX can perform additional optimisations in terms of data sizes, refresh rate for switch channels etc.</li> </ul> <p>A dedicated RC RX has smaller, efficient messages delivered much more frequently, such that if one is dropped it doesn't really matter. Interleaving <code>MSP_SET_RAW_RC</code> within a stream of maybe 9 other telemetry messages means a signification reduction in RC performance. Caveat Emptor!</p>"},{"location":"mwp-hid-device-support/#caveats","title":"Caveats","text":"<ul> <li>Not supported for \"old\" INAV (at least prior to 2.0).</li> <li>mwp's HID implementation supports the same number of RC channels as does your flight controller (for <code>MSP_SET_RAW_RC</code>).</li> <li>mwp will send the lesser of the number of channels supported by the FC and the number of channels defined in the RC mapping file.</li> </ul>"},{"location":"mwp-hid-device-support/#prerequisites","title":"Prerequisites","text":"<ul> <li>Telemetry radio capable sustaining of at least 12 MSP messages / second.</li> <li>mwp uses <code>MSP_SET_RAW_RC</code> (this may preclude use of some mLRS configurations).</li> <li>Either the FC is configured with <code>USE_MSP_RC_OVERRIDE</code> and appropriate <code>msp_override_channels</code> or the FC is configured for <code>set receiver_type = MSP</code></li> <li>It is recommended that you have a validated failsafe solution.</li> </ul>"},{"location":"mwp-hid-device-support/#rc-mapping-file","title":"RC Mapping File","text":"<p>It is necessary to generate a mapping file that maps the HID device (e.g. game controller, joystick) inputs to RC functions (sticks / buttons).</p> <p>mwp's uses the well known SDL (Simple DirectMedia Layer) library. This library handles numerous input devices (Joysticks, Game Controllers) in well defined manner across multiple platforms.</p> <p>mwp provides a tool <code>mwp-hid-test</code> to allow the user to identify the inputs on their HID devices and allocate / map inputs to RC Channels. SDL provides for the following HID inputs:</p> <ul> <li>Axes : \"Sticks\" and some switches (3 or more positions).</li> <li>Buttons : Some switches (2 position, momentary).</li> <li>Hats : ?</li> <li>Balls : ?</li> </ul> <p>Note that \"Hats\" and \"Balls\" are effectively undefined in mwp's reference implementation solely because the author has no example of such devices.</p>"},{"location":"mwp-hid-device-support/#mwp-hid-test-tool","title":"mwp-hid-test tool","text":"<p>The user plugs in the required HID controller and starts the application (from a shell / terminal). She can then exercises all the required (stick / switch / button) inputs. <code>mwp-hid-test</code> will record the input, best shown by example:</p> <pre><code>$ mwp-hid-test\nThere are 1 joysticks connected.\nEntry 0, OpenTX Radiomaster Boxer Joystick guid=0300c19b09120000544f000011010000 game controller=true\nName: OpenTX Radiomaster Boxer Joystick\nNo. axes 8\nNo. balls 0\nNo. buttons 24\nNo. hats 0\nJoystick 0 connected\n ....\nAxis 2 value -32608.\n ....\nButton 1 released.\n ....\nJoystick 0 removed.\n</code></pre> <p>In the above example, <code>mwp-hid-test</code>  application is started, the device (Boxer radio in HID mode) is detected. If multiple devices are detected, the user will be asked which entry they wish to use.</p> <p>In the example above:</p> <ul> <li>The user moved the throttle stick, this is identified as \"Axis 2\"</li> <li>The user moved switch \"SF\", this is identified as \"Button 1\".</li> </ul> <p>After exercising all required inputs, the user should prepare a mapping file; this is a simple plain text file mapping \"Axis\" and \"Button\" inputs to RC Channels (RC channels numbered from 1). For example:</p> <p><pre><code>$ less boxer.txt\n# Sticks\nAxis 0 = Channel 1 ; Aileron\nAxis 1 = Channel 2 ; Elevator\nAxis 2 = Channel 3 ; Throttle\nAxis 3 = Channel 4 ; Rudder\n# Switches\nAxis 4 = Channel 5 ; SE (Arming)\nAxis 5 = Channel 6 ; SA\nAxis 6 = Channel 7 ; SB\nAxis 7 = Channel 8 ; SC\nButton 0 = Channel 9 ; SD\nButton 1 = Channel 10 ; SF\n$\n</code></pre> Notes:</p> <ul> <li>Blank lines, lines starting with # or ; are ignored</li> <li>Trailing items after ; or # are ignored (comments / notes).</li> </ul> <p>Definition lines are of the form <code>Axis N = Channel X</code> or <code>Button M = Channel Y</code>.</p> <ul> <li>The <code>Axis N</code> or <code>Button M</code> data is that shown by <code>mwp-hid-test</code>. The Channel is the RC channel for that input.</li> <li>mwp maps the value from SDL (-32608 to 32607) to RC range 1000-2000. Buttons are mapped from off = 1000 to on = 2000.</li> <li>It is possible to set an input as inverted, latched or define a deadband.</li> </ul> <p>RC Map</p> <p>The first four channels must reflect the RC Map as defined in the flight controller (or AERT for Multiwii), as channels are not reordered when sent to the FC.</p> <p>Sanity Checking</p> <p>Currently, there is NO sanity checking on the mapping file. Until (or even after) sanity checking is implemented, you are advised to validate the file with <code>mwp-hid-server --check FILE</code> to verify that all inputs result in the expected channel values.</p> <p>For example:</p> <p><pre><code>$ cat /tmp/mh2.txt\n# Axis\n# Buttons\nButton 0 = Channel 17 ;\nButton 1 = Channel 18 ;\n</code></pre> results in:</p> <p><pre><code>$ mwp-hid-server --check /tmp/mh2.txt\nChannel 1 undefined (0)\nChannel 2 undefined (0)\nChannel 3 undefined (0)\nChannel 4 undefined (0)\nChannel 5 undefined (0)\nChannel 6 undefined (0)\nChannel 7 undefined (0)\nChannel 8 undefined (0)\nChannel 9 undefined (0)\nChannel 10 undefined (0)\nChannel 11 undefined (0)\nChannel 12 undefined (0)\nChannel 13 undefined (0)\nChannel 14 undefined (0)\nChannel 15 undefined (0)\nChannel 16 undefined (0)\nChannel 17 Button 0\nChannel 18 Button 1\n\n*** Note: Undefined channels ***\n\nButton 0: channel 17, ctype 0, lval 0, lmax 2\nButton 1: channel 18, ctype 0, lval 0, lmax 2\n</code></pre> he value in parentheses after \"undefined\" indicates the value that will be sent for undefined channels. In a valid value is needed (for example CRSF/SBUS and MSP Override), see the <code>default</code> keyword.</p> <p>For Game Controllers, it is (probably) possible to provide a SDL Mapping file as a parameter to mwp-hid-test (for example, see https://github.com/mdqinc/SDL_GameControllerDB), that may possibly) help the SDL library to manage the device.</p> <p><pre><code>$ mwp-hid-test gamecontrollerdb.txt\n</code></pre> An example file for the SteamDeck might look like:</p> <pre><code># Sticks\nAxis 2 = Channel 1 ; Aileron\nAxis 3 = Channel 2 invert ; Elevator\nAxis 1 = Channel 3 invert ; Throttle\nAxis 0 = Channel 4 ; Rudder\n\n# Switches\nButton 9 = Channel 5 ; SE (Arming) (L1)\nAxis 4 = Channel 6 ; SA (L2)\nButton 10 = Channel 7 ; SB (R1)\nAxis 5 = Channel 8 ; SC (R2)\n\n# More switches\nButton 12 = Channel 9 ; SD (R3)\nButton 13 = Channel 10 ; SF (L3)\nButton 14 = Channel 11 ; SG (R4)\nButton 15 = Channel 12 ; SH (L4)\n\n# Buttons\nButton 0 = Channel 13 ; SI (A)\nButton 1 = Channel 14 ; SJ (B)\nButton 2 = Channel 15 ; SK (X)\nButton 3 = Channel 16 ; SL (Y)\n\n# Unused:\n# Touchpads, D-Pad, Menu, Stick Press\n# Maybe use for local configurations and triggers\n</code></pre> <p>Note the use of <code>invert</code>. Mapping file courtesy of GH user @arealmess.</p>"},{"location":"mwp-hid-device-support/#the-invert-modifier","title":"The <code>invert</code> modifier","text":"<p>Inverts the input. May be applied to axes and buttons.</p>"},{"location":"mwp-hid-device-support/#the-latch-modifier","title":"The <code>latch</code> modifier","text":"<p>Provides a latch function for momentary action buttons.</p> <ul> <li><code>latch</code> implements the default 2-pole latching switch;</li> <li><code>latch=N</code> implements an N-pole latching switch (N = 2 - 6).</li> </ul> <p>Pressing the latched switch toggles the channel value, so with the mapping line:</p> <pre><code>Button 1 = Channel 10 latch=3 ; SF\n</code></pre> <p>Repeatedly pressing the button would result in channel values of (inital value)<code>1000</code> =&gt; <code>1500</code>, <code>2000</code>, <code>1000</code>, <code>1500</code>, <code>2000</code>, <code>1000</code>, <code>1500</code>, <code>2000</code>. Note that the values wrap rather than go up/down like a mechanical switch.</p> <p>Inverted latches are also valid.</p> <pre><code>Button 1 = Channel 10 latch=3 invert ; SF\n</code></pre>"},{"location":"mwp-hid-device-support/#the-deadband-keyword","title":"The <code>deadband</code> keyword","text":"<p><code>deadband</code> is a global option and is specified with the <code>deadband</code> key and a value in the range 1-1024 (in SDL resolution, c. 15 PWM us).</p>"},{"location":"mwp-hid-device-support/#the-default-keyword","title":"The <code>default</code> keyword","text":"<p><code>default</code> is a global option and specifies the value that will be transmitted for undefined channels. The default is 0, which means that INAV/MSP will ignore the channel. For INAV/RX (SBUS, CRSF) a valid value is needed for undefined channels, even with override.</p> <pre><code># Use a valid value for undefined channels\ndefault = 1505\n</code></pre> <p>Results in (<code>--check</code>)</p> <p>Mapping File:</p> <pre><code>default = 1505\n# Axis\n# Buttons\nButton 4 = Channel 12 ;\nButton 3 = Channel 20 latch ;\n</code></pre> <p>Check show: <pre><code>Channel 1 undefined (1505)\nChannel 2 undefined (1505)\n...\nChannel 11 undefined (1505)\nChannel 12 Button 4\nChannel 13 undefined (1505)\n...\nChannel 19 undefined (1505)\nChannel 20 Button 3\n</code></pre></p>"},{"location":"mwp-hid-device-support/#mwp-hid-test-usage","title":"mwp-hid-test usage","text":"<pre><code>$ mwp-hid-test --help\nUsage:\n  mwp-hid-test [OPTION?]\n\nHelp Options:\n  -h, --help         Show help options\n\nApplication Options:\n  -d, --deadband     Deadband (in SDL frame of reference)\n</code></pre> <p>Note that deadband is applied in terms of the SDL resolution, so 1 microsecond of RC PWM is equivalent to c. 65 SDL units.</p>"},{"location":"mwp-hid-device-support/#mapping-file-with-modifiers","title":"Mapping file with modifiers","text":"<p>e.g.  deadband and invert:</p> <pre><code>$ less boxer.txt\n# Sticks\nAxis 0 = Channel 1 ; Aileron\nAxis 1 = Channel 2 ; Elevator\nAxis 2 = Channel 3 ; Throttle\nAxis 3 = Channel 4  invert ; Rudder\n# Switches\nAxis 4 = Channel 5 ; SE (Arming)\nAxis 5 = Channel 6 ; SA\nAxis 6 = Channel 7 invert ; SB\nAxis 7 = Channel 8 ; SC\nButton 0 = Channel 9  invert ; SD\nButton 1 = Channel 10 ; SF\n\ndeadband = 200\n</code></pre> <ul> <li><code>deadband</code> is a global option and is specified with the <code>deadband</code> key and a value in the range 1-1024 (in SDL resolution, c. 15 PWM us).</li> <li><code>invert</code> is a per-channel keyword. Add <code>invert</code> after the channel number and before any trailing comment.</li> </ul> <p>In the above example, channels 4, 7 and 9 will be inverted.</p>"},{"location":"mwp-hid-device-support/#mwp-hid-server","title":"mwp-hid-server","text":"<p>mwp does not communicate directly with the HID device, this is done by an intermediate program, <code>mwp-hid-server</code> using a simple line orientated, text based protocol. Normally, this is transparent to the user, as mwp handles the invocation of and communications with <code>mwp-hid-server</code>.  It is, however, possible to run <code>mwp-hid-server</code> manually to test your RC mapping file. In addition, having a simple, defined protocol allows other mapping implementations (e.g. other than SDL) to be implemented.</p>"},{"location":"mwp-hid-device-support/#mwp-hid-server-usage","title":"mwp-hid-server usage","text":"<pre><code>$ mwp-hid-server  --help\nUsage:\n  mwp-hid-server [OPTION?] rc-mapping-file\n\nHelp Options:\n  -h, --help           Show help options\n\nApplication Options:\n  -v, --verbose        Verbose mode\n  -f, --fake           Fake values (for testing without HID hardware)\n  -p, --port=31025     Udp port\n  -c, --check=false    Check mapping file\n</code></pre> <ul> <li><code>rc-mapping-file</code> is the simple text file that maps the capabilities of the HID device to RC Channels. This was discussed above.</li> <li><code>verbose</code> will display channel values every 10 seconds.</li> </ul>"},{"location":"mwp-hid-device-support/#mwp-hid-server-command-language","title":"mwp-hid-server command language","text":"<p>The <code>mwp-hid-server</code> server listens on a defined UDP port (default 31025) for the following commands:</p> <ul> <li><code>raw</code> : Returns an array of int16 values, little endian, representing RC channel values..</li> <li><code>info</code> : Returns information (free form text) on the connected HID device.</li> <li><code>quit</code> : Terminates the server</li> <li><code>text</code> : Returns a text string of space separated channel values.</li> <li><code>set</code> : sets RC data for the RC channels. Data is provided as a set of space separated values, for example <code>set 1600 1700 1010 1889</code>.</li> </ul> <p><code>mwp</code> uses only the <code>info</code> and <code>raw</code> commands.</p> <p>The <code>mwp-hid-server</code> also accepts commands on <code>STDIN</code> and replies to <code>STDOUT</code>. This is used when spawned by mwp, to mitigate some Windows' startup synchronisation issues.</p>"},{"location":"mwp-hid-device-support/#mwp-hid-cli","title":"<code>mwp-hid-cli</code>","text":"<p><code>mwp-hid-cli</code> is a simple command line tool to investigate the hid server. This allows the user to send the server commands listed above to a running <code>mwp-hid-server</code>.</p> <pre><code>$ mwp-hid-cli\nudp conn 127.0.0.1:38668 127.0.0.1:31025\n&gt; info\nOpenTX Radiomaster Boxer Joystick Axes: 8 Buttons: 24\n&gt; text\n 1500 1500 1000 1500 1000 1001 1002 1003 1004 1005 1006 1007 1009 1010 1011 1012\n&gt; quit\n</code></pre> <p>You should ensure that any manually invoked test <code>mwp-hid-server</code> is closed before using the HID function with mwp. It is not advisable to issue the <code>raw</code> command in the test environment, as your terminal may not handle the raw data with any elegance.</p>"},{"location":"mwp-hid-device-support/#mwp-ui","title":"mwp UI","text":"<p>HID support is selectable at run time via mwp's <code>Edit &gt; MSP RC Setting</code> menu option. Note, this option is only sensitive when the main serial port is closed, so you cannot change an open MSP session.</p> <p></p> <p>If enabled, <code>mwp-hid-server</code> is invoked with the provided mapping file. If you need to pass another option to <code>mwp-hid-server</code>  (for example <code>-f</code> for testing), this may be done using the environment variable <code>MWP_HIDOPT</code>, for example <code>MWP_HIDOPT=-f</code>.</p> <p>By default (if no mapping file has been previously set), the settings UI looks for the mapping file in the mwp configuration directory (<code>$XDG_CONFIG_HOME/mwp</code> i.e. <code>~/.config/mwp</code> on POSIX OS, <code>%LOCALAPPDATA%\\mwp\\</code> on Windows). The user may select any other suitable location in the file chooser..</p> <p>With mwp's HID / <code>MSP_SET_RAW_RC</code> enabled, when the main telemetry channel is started, the \"stick display\" icon will show in the bottom right of the map:</p> <p></p> <p>This may be expanded (click on the icon) to show the sticks.</p> <p></p> <p>This may be iconised again by right click.</p>"},{"location":"mwp-hid-device-support/#channel-value-display","title":"Channel value display","text":"<p>It is possible to have mwp display channel values (theme sensitive):</p> <p></p> <p>or</p> <p></p> <p>The user will have to add their own \"hot key\" / keyboard accelerator to active the \"show-channels\" action, for example:</p> <pre><code>### ~/.config/mwp/accels / %LOCALAPPDATA%\\mwp\\accels ###\n\n# bind \"show-channels\" to the F2 key\nshow-channels F2\n</code></pre> <p>Then toggling F2 will display / close the channels window.</p>"},{"location":"mwp-hid-device-support/#enable-and-activate","title":"Enable and Activate","text":"<p>mwp's HID implementation distinguishes between Enabled and Activated as follows:</p> <p>Enabled : In the MSPRC settings dialog means that the <code>mwp-hid-server</code> will start when an MSP port is started and stop when the MSP port is closed. This is a prerequisite for MSPRC. Activated: This means that that mwp will use data from the <code>mwp-hid-server</code>  to send <code>MSP_SET_RAW_RC</code> to the FC.</p> <p>When MSPRC is Activated, then mwp will first interrogate the FC <code>MSP_RC</code> to set the current RC channels. This is used to set the value for <code>latch</code>  buttons. After  <code>MSP_RC</code> has been received, mwp will use data from the <code>mwp-hid-server</code>  to send <code>MSP_SET_RAW_RC</code> to the FC.</p> <p>The MSPRC function may be Activated / Deactivated as required while a MSP port is active.</p> <p>Activate is controlled from the <code>File &gt; Edit</code> menu.</p> <p></p> <p>At startup, the Activate menu option is set from Enabled setting (but can be changed on demand). It is not currently persisted.</p> <p>Here's an older log fragment showing this: (Numbers in brackets) are explained below:</p> <pre><code>21:06:11.522260 :HID DBG: pid=255325 53 (1)\n21:06:11.522296 Send HID Info (2)\n...\n21:06:11.550794 Raw RC: 22 No joystick connected (3)\n21:06:11.581800 INAV v8.0.1  SITL (171d00bb) \u00abBENCHYMCTESTY\u00bb\n21:06:11.581900 Load FC safehomes\n21:06:11.803174 :DBG: Clear poller state MWP_SERSTATE_NORMAL\n21:06:11.803204 Save home d/l done\n21:06:11.803222 Load FC Geozones\n21:06:11.803630 :DBG: MSP_RC size 68 (4)\n21:06:11.806114 :DBG: Read 4 geozones\n21:06:11.813640 :DBG: Clear poller state MWP_SERSTATE_NORMAL\n21:06:11.813690 Geozones validated\n21:06:11.848278 Sensors: Acc Baro GPS  (00cb)\n21:06:11.848310 INAV v8.0.1  SITL (171d00bb) \u00abBENCHYMCTESTY\u00bb\n21:06:11.848355 Poller cycle for  9 items, 81 / 226 bytes (INAV_STATUS,ANALOG2,NAV_STATUS,RAW_GPS,COMP_GPS,GPSSTATISTICS,WP,ATTITUDE,ALTITUDE)\n21:06:11.848391 Start poller\n21:06:11.854382 Request RTC pos: 54.355194 -4.523159 sats 16 hdop 100.0\n21:06:11.855258 RTC local 2025-05-13T21:06:11.855, fc 2025-05-13T21:06:11.000\n21:06:13.386745 Arming flags: Geozone (0060), load 0% MSP_CMDS_INAV_STATUS (5)\n21:06:31.669714 :DBG: msprc action set to false, use_rc=1 (6)\n21:06:32.576143 Arming flags: Geozone,RC Link (40060), load 0% MSP_CMDS_INAV_STATUS (7)\n21:06:53.180132 :DBG: msprc action set to true, use_rc=53 (8)\n21:06:53.185002 :DBG: MSP_RC size 68 (9)\n21:06:54.080304 Arming flags: Geozone (0060), load 0% MSP_CMDS_INAV_STATUS (10);\n...\n21:07:00.456903 Serial closed replay 0 (11)\n21:07:00.457042 48.952s, rx 192615b, tx 84171b, (3935b/s, 1719b/s) to 0 wait 0, avg poll loop 5 ms messages 8609 msg/s 175.9\n</code></pre> <ol> <li>MSPRC setting was enabled, so the <code>mwp-hid-server</code> is started</li> <li>mwp  asks the hid for controller info.</li> <li><code>Fake</code> was set via <code>MWP_HIDOPT=-f</code>; so no joystick is reported as expected. mwp will schedule <code>MSP_RC</code> to get current channel values.</li> <li>The <code>MSP_RC</code> response is reported (not yet acted upon), this schedules <code>MSP_SET_RAW_RC</code>.</li> <li>The next polled <code>MSP2_INAV_STATUS</code> reports that the only blocker is \"Geozone\" (expected for this scenario). In particular \"RCLink\" is NOT a blocker.</li> <li>The user uses <code>File &gt; Edit &gt; Activate MSP RC</code> to Deactivate MSPRC.</li> <li>The next polled <code>MSP2_INAV_STATUS</code> reports that the blockers are Geozone\" and \"RCLink\", showiing mwp is no longer scheduling <code>MSP_SET_RAW_RC</code>.</li> <li>The user uses <code>File &gt; Edit &gt; Activate MSP RC</code> to Activate MSPRC again.</li> <li>The <code>MSP_RC</code> response is reported (not yet acted upon), this schedules <code>MSP_SET_RAW_RC</code>.</li> <li>The next polled <code>MSP2_INAV_STATUS</code> reports that the only blocker is \"Geozone\" (expected for this scenario). In particular \"RCLink\" is NOT a blocker.</li> <li>The user closed the MSP port, ending the experiment.</li> </ol> <p>Some of the text is changed in later versions, but the flow is the same.</p>"},{"location":"mwp-hid-device-support/#mwp-settings","title":"mwp settings","text":"<p>The MSP RC settings are persisted via the following settings:</p> <ul> <li><code>msprc-cycletime</code> (default 150ms)</li> <li><code>msprc-enabled</code> (default false)</li> <li><code>msprc-full-duplex</code> (default false)</li> <li><code>msprc-settings</code> RC mapping file (default not set)</li> </ul> <p>The  <code>msprc-cycletime</code> option defines how often mwp sends <code>MSP_SET_RAW_RC</code> messages. INAV requires at least 5Hz (200ms) to avoid fail-safe. Time slots used for <code>MSP_SET_RAW_RC</code> reduces the time available for MSP telemetry data displayed by mwp, so the user needs to choose a compromise setting that balances RC responsiveness with telemetry data refresh within the constraint of the available bandwidth.</p> <p>The <code>msprc-full-duplex</code> settings defines the use of full duplex transmission for <code>MSP_SET_RAW_RC</code> messages. This will better ensure that the cycle-time requirement is met, as \"no reply\" <code>MSP_SET_RAW_RC</code> are sent independently of the normal MSP telemetry poller.</p> <p>Device Dependency</p> <p>If the device does not support full duplex, enabling  <code>msprc-full-duplex</code> will result in major telemetry failure.</p> <p>mwp attempts to detect excessive timeouts due to <code>msprc-full-duplex</code> being set on a half-duplex device, and will disable <code>msprc-full-duplex</code> in such cases.</p>"},{"location":"mwp-hid-device-support/#miscellaneous-notes","title":"Miscellaneous notes","text":"<ul> <li>The hard part of this is arbitrating serial usage between the need to maintain INAV's requirement for <code>MSP_SET_RAW_RC</code> (minimum of 5Hz refesh) and mwp's telemetry requirement (minimum say (also) 5 MSP/sec, though it this is not a hard limit, rather a usability desire).</li> <li>You may consider using <code>USE_MSP_RC_OVERRIDE</code> / <code>MSP RC Override</code> and a backup TX.</li> <li>Note that mwp tries to send <code>MSP_SET_RAW_RC</code> messages every 150 milliseconds (c. 7Hz) by default. This interval is configurable. The default was chosen to minimise the chances of fail-safe while maintaining a decent telemetry rate.</li> <li>When the <code>mwp-hid-server</code> is started, mwp gets the current RC values from the FC. If the FC has valid RC data, the <code>mwp-hid-server</code> assumes these values.</li> </ul>"},{"location":"mwp-hid-device-support/#serial-usage-metrics","title":"Serial Usage Metrics","text":"<p>mwp can monitor MSP message rates and automatically log the information. If you are testing this <code>MSP_SET_RAW_RC</code> functionality in mwp, consider adding the following to <code>~/.config/mwp/cmdopts</code> / <code>%LOCALAPPDATA%\\mwp\\cmdopts</code>:</p> <pre><code>MWP_STATS_LOG=60\n</code></pre> <p>This will log MSP throughput every minute into <code>mwp_stderr_YYYY_MM_DD.txt</code>.</p>"},{"location":"mwp-hid-device-support/#throughput-example","title":"Throughput example","text":"<p>Telemetry device: Ebyte E220 LoRa, 115200 ground speed, 38400 air speed, USB connection to GCS.</p> <p><code>mwp_stderr_YYYY-MM-DD.txt</code> file with lines like:</p> <pre><code>13:13:30.168812 900.267s, rx 341851b, tx 139948b, (380b/s, 155b/s) to 0 wait 0, avg poll loop 62 ms messages 15046 msg/s 16.7\n...\n13:14:15.113726 945.195s, rx 358998b, tx 146799b, (380b/s, 155b/s) to 0 wait 0, avg poll loop 62 ms messages 15797 msg/s 16.7\n</code></pre> <p>Telemetry device: Ebyte E220 LoRa, 115200 ground speed, 62500 air speed, USB connection to GCS. Slightly higher throughput at the expense of some message timeouts (and maybe also range).</p> <pre><code>11:36:04.735320 2100.442s, rx 659187b, tx 712573b, (314b/s, 339b/s) to 2 wait 0, avg poll loop 88 ms messages 36053 msg/s 17.2\n</code></pre> <p>This device appears usable.</p>"},{"location":"mwp-hid-device-support/#inav-rc-quirks","title":"INAV RC Quirks","text":"<p>There are a number of implementation details concerning RC channels and INAV, in particular differences between MSP and traditional (SBUS / CRSF) protocols.</p>"},{"location":"mwp-hid-device-support/#general","title":"General","text":"<ul> <li>Prior to INAV 9.0, firmware was not built by default with <code>USE_MSP_RC_OVERRIDE</code> set, so you need MSP override, you may need to build your own firmware.</li> <li>Prior to INAV 9.0, you could only override the first 16 channels; INAV 9 will allow overriding 32 channels.</li> </ul>"},{"location":"mwp-hid-device-support/#inavs-msp-protocol","title":"INAV's MSP protocol","text":"<ul> <li>Does not need <code>USE_MSP_RC_OVERRIDE</code>, flight mode <code>MSP RC Override</code>  or a run time <code>set msp_override_channels = N</code> CLI setting.</li> <li>INAV will ignore (hold) channels with value of 0. With creative use of a mapping file and limit on number of channels sent by mLRS, you can share input between mLRS and mwp. Do not use the <code>default</code> keyword in your mapping file.</li> </ul>"},{"location":"mwp-hid-device-support/#inavs-rx-protocols-sbus-crsf-etc","title":"INAV's RX protocols (SBus, CRSF etc.)","text":"<ul> <li>Requires the use of <code>USE_MSP_RC_OVERRIDE</code>, flight mode <code>MSP RC Override</code>  and a run time <code>set msp_override_channels = N</code> CLI setting.</li> <li>Override channels sent to the FC must have valid PWM values. Channel validity is checked even before the override mask is applied.</li> </ul>"},{"location":"mwp-hid-device-support/#example","title":"Example","text":"<pre><code># With MSP RC,\n# default = 0\n# ... or don't have a default line\n\n# For \"Standard\" RC, there must be a valid RC value for all channels\n# default = 1505\n\n# Axis\n# Buttons\nButton 2 = Channel 17 ;\nButton 3 = Channel 18 latch ;\n</code></pre> <p>For \"standard RC\" you would need:</p> <ul> <li>Firmware built with <code>#define USE_MSP_RC_OVERRIDE</code> (the default in INAV 9)</li> <li>Flight mode <code>MSP RC Override</code> asserted.</li> <li>CLI setting: <code>set msp_override_channels = 196608</code> (requires INAV 9 to override channels &gt; 16).</li> </ul>"},{"location":"mwp-los-tool/","title":"Line of Sight (LOS) Tool","text":""},{"location":"mwp-los-tool/#overview","title":"Overview","text":"<p>mwp provides a LOS tool that establishes whether there is LOS between the observer location (the mwp home icon) and arbitrary points on an INAV mission. This is may be useful to establish:</p> <ul> <li>Can the pilot or observer see the aircraft?</li> <li>Is there LOS for RC control or video?</li> </ul>"},{"location":"mwp-los-tool/#caveats","title":"Caveats","text":"<p>There are a number of issues to take into consideration.</p> <ul> <li>Online DEMs (Digital Elevation Model) vary significantly, with implications for accuracy.</li> </ul> <p>mwp uses  Mapzen DEM data, which improves accuracy (more users  get one arc-second data ) with better accuracy, as well as a significant performance boost and offline usage after the initial data download.</p> <p>Please be aware of these accuracy / fidelity issues when evaluating the results of any elevation analysis.</p>"},{"location":"mwp-los-tool/#invocation","title":"Invocation","text":"<p>is invoked from any waypoint using the right mouse button.</p> <p></p>"},{"location":"mwp-los-tool/#examples","title":"Examples","text":"<p>When the LOS slider is displayed, the only UI actions available are:</p> <ul> <li>Scroll the map</li> <li>Zoom the map</li> <li>Change the map product</li> </ul> <p>This restriction means that the mission cannot be changed while a LOS Analysis is being performed. This is currently a feature (to reduce implementation complexity).</p>"},{"location":"mwp-los-tool/#manual-los-analysis","title":"Manual LOS Analysis","text":"<p>The LOS dialog presents:</p> <ul> <li>A slider to position the 'puck` (to which LOS is calculated) along the mission path.</li> <li>Start and End buttons to move the puck to start / end.</li> <li>A Margin selection (the clearance required at the puck location).</li> <li>A High resolution button (for Area LOS puck increments)</li> <li>A \"Point LOS\" button.</li> <li>An \"Area LOS\" button.</li> <li>A \"Clear\" button.</li> </ul> <p></p> <p>In the image above the user has selected \"Line of Sight ...\" from the right mouse menu at WP6. The slider is positioned appropriate to WP6. Note that if the mission contains JUMP WPs, these are executed once only (regardless of the mission setting). This is why the slider might appear less advanced compared to the mission length if the JUMP is ignored. The user can reposition the WP using the slider (or the start / end buttons).</p> <p>When \"Point LOS\" is clicked, the LOS is calculated between planned home (brown icon, lower left) and the red \"\u2a01\" \"Point of Interest\" (POI) icon. This is displayed as a terrain plot with the LOS line superimposed over the terrain elevation. The line is red as there is no LOS (and it would be green where there is LOS). A red \"dot-dash\" is also displayed on the map. If a margin is specified, then LOS lines with clearance between the terrain and the margin value are shown in orange.</p> <p>The user may repeat the \"move slider\" / \"Point LOS\" action as required. The prior terrain plot is removed each time \"Point LOS\" is selected; the lines on the map are removed when the slider dialog is closed. \"Area LOS\" may be used to run a continuous analysis from the currently selected location. \"Area LOS\" may be started / stopped at any point (and Point Analysis invoked at any time when stopped).</p> <p>When an analysis results in an orange or red LOS fill, the first point where the LOS break is detected is also shown as a coloured blob. This is apparent in the Area image below.</p>"},{"location":"mwp-los-tool/#area-los","title":"Area LOS","text":"<p>This analysis is iterated along the mission path automatically, providing Area coverage for the mission.</p> <p></p> <p>The image shows the state after a complete \"Area\" analysis. While the analysis is running, the slider and \"Point LOS\" are not sensitive; once the run has completed, these controls are available if the user wishes to investigate further. The user can stop (and restart) Area  using the \"Area LOS\" / \"Stop\" button.</p> <p>Note the areas indicated in the SE part of the mission.</p> <p>If the user now runs a \"High Resolution\" Area LOS, note how the more fidelity is revealed in the SE part of the mission.</p> <p></p> <p>The user can use the  \"Point LOS\" to examine a point.</p> <p></p> <p>It is important to note that Area LOS is performed at 1% increments of the naive mission length, it is not contiguous.</p> <p>Caveat user!</p> <p>There is also a You Tube video (uses a slightly earlier UI iteration).</p>"},{"location":"mwp-los-tool/#local-dems","title":"Local DEMs","text":"<p>mwp uses Mapzen DEM SRTM (Shuttle Radar Telemetry Mission) HGT files for all mwp elevation requirements. These are downloaded on demand. No user access key is required.</p>"},{"location":"mwp-los-tool/#miscellaneous-notes","title":"Miscellaneous notes","text":"<ul> <li>The Area LOS data is interval sampled. An obstruction could always be in the gap.</li> <li>The elevation data does not include obstructions above the terrain (trees, buildings, power lines etc.).</li> <li>The mission interpretation is naive.<ul> <li>There is no loiter radius</li> <li>The vehicle can turn sharply at way points</li> <li>There is linear ascent / descent between way points, including from home to WP1 and from RTH to home.</li> <li>JUMPs are executed once.</li> </ul> </li> </ul>"},{"location":"mwp-macos/","title":"Installing mwptools on MacOS","text":""},{"location":"mwp-macos/#os-requirements","title":"OS requirements","text":"<p>A version of MacOS supporting <code>homebrew</code>, e.g.</p>"},{"location":"mwp-macos/#apple-silicon","title":"Apple Silicon","text":"<ul> <li>Sequoia</li> <li>Sonoma</li> <li>Ventura</li> </ul>"},{"location":"mwp-macos/#x86_64","title":"X86_64","text":"<ul> <li>Sonoma</li> <li>Ventura</li> </ul> <p>At the time of writing, Homebrew does not officially support Sequoia for (most of) the packages required, however, the required packages (and mwp) work well on Sequoia / X86_64.</p>"},{"location":"mwp-macos/#install-homebrew","title":"Install HomeBrew","text":"<pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> <p>or use the official package from the Homebrew release area.</p>"},{"location":"mwp-macos/#dependencies","title":"Dependencies","text":"<pre><code>brew install gtk4 \\\n libshumate \\\n libsoup \\\n git \\\n meson \\\n libadwaita \\\n libsecret \\\n vala \\\n protobuf-c \\\n libpaho-mqtt \\\n gstreamer \\\n go \\\n espeak-ng \\\n vte3 \\\n librsvg \\\n adwaita-icon-theme \\\n sdl2 \\\n readline \\\n gnuplot\n</code></pre> <p>Note: homebrew does not supply the librsvg VAPI (vala API) files. It will be necessary to build it from sources (or copy the files from a Linux box).</p>"},{"location":"mwp-macos/#optional-recommended","title":"Optional / Recommended","text":"<pre><code>brew install bash-completion\n</code></pre>"},{"location":"mwp-macos/#blueprint-compiler","title":"Blueprint compiler","text":"<p>The required <code>blueprint-compiler</code> is not in <code>homebrew</code>, so is install locally:</p> <p>Note: If you have a pre-existing python, then the packages installed above may fail to install the dependency <code>pygobject3</code> and you will have to install it manually, either via <code>brew</code> or <code>pipx</code>.</p> <pre><code>git clone https://gitlab.gnome.org/jwestman/blueprint-compiler\ncd blueprint-compiler/\nmeson setup _build\nsudo ninja -C _build install\n</code></pre>"},{"location":"mwp-macos/#build-mwp","title":"Build mwp","text":"<p>Only local install is \"supported\".</p> <ul> <li>Clone the repository</li> <li>Checkout the development branch (for now)</li> <li><code>cd mwptools</code></li> </ul> <pre><code>meson setup _build --buildtype=release --strip --prefix=~/.local\nninja -C _build install\n</code></pre>"},{"location":"mwp-macos/#one-off-post-install","title":"One off post install","text":"<ul> <li>It is necessary to add <code>$HOME/.local/bin</code> to <code>$PATH</code></li> <li>mwp's <code>gsettings</code> does not work on MacOS (or more strictly, it does, but <code>mwp</code> and <code>gsettings</code> do not share storage, which is not helpful). Therefore mwp is using an <code>ini</code> file backend on MacOS. A default <code>ini</code> file will be installed on first use.</li> <li>To set settings outside of mwp, you may edit  <code>~/.config/mwp/mwp.ini</code> with care as there is no error checking.</li> <li>Install <code>mwp.app</code>. This adds <code>mwp</code> to <code>Finder</code> etc.   <pre><code>cd /Applications\ntar -xf &lt;PATH TO&gt;/mwptools/docs/mwp.app.tar.gz\n</code></pre></li> </ul>"},{"location":"mwp-macos/#other-notes","title":"Other notes","text":"<p>macOS appears not measure text width in the same was a other OS. A \"fudge factor\" is included that works on my MacOS VMs. The user set there own value with the environment variable `MWP_MAC_FACTOR', set to a value greater than 100. Try with values around 125.</p> <p>e.g. <pre><code>mwp MWP_MAC_FACTOR=128\n</code></pre> Once a suitable value is found:</p> <ul> <li>Reset panel sizing <code>rm -f ~/.config/mwp/.paned</code></li> <li>If required, add the <code>MWP_MAC_FACTOR</code> environment variable to <code>~/.config/mwp/cmdopts</code></li> </ul> <p>On Ventura, the menus may behave strangely, to the point of being almost unusable. This may be mitigated by setting the environment variable <code>MWP_MAC_NO_NEST</code> (to anything).</p> <p><code>libsrecret</code> and other Dbus related services are not available.</p> <p>mwpset is recommended to edit mwp's <code>gsettinngs</code>.</p>"},{"location":"mwp-miscellaneous-tools/","title":"mwp miscellaneous tools","text":""},{"location":"mwp-miscellaneous-tools/#overview","title":"Overview","text":"<p>The mwp suite contains numerous command line tools developed since 2015 in order to aid development of INAV, development of mwp and diagnosing numerous (often 3rd party) problems, more so in the early days.</p> <p>This chapter describes a few of the command line tools that are provided by mwptools. Note that not all these tools are built or installed by default; it may be necessary to enter a source directory and invoke <code>make</code> in situ, or copy a script to a directory on the <code>$PATH</code>.</p>"},{"location":"mwp-miscellaneous-tools/#fc-get-fc-set","title":"fc-get, fc-set","text":"<p><code>fc-get</code> and <code>fc-set</code> are tools to manage CLI settings:</p> <ul> <li><code>fc-get</code> : Dump cli <code>diff</code> settings to a file that can be replayed by <code>fc-set</code></li> <li><code>fc-set</code> : Replay a file of cli settings to the FC. Once the settings have been saved, a backup is made of the original file; the settings are then read from the FC and the original file updated.<pre><code>$ fc-set --help\nUsage:\n  fc-set [OPTION?]  - fc diff manager\n\nHelp Options:\n  -h, --help        Show help options\n\nApplication Options:\n  -b, --baud        baud rate\n  -d, --device      device\n  -n, --no-back     no backup\n</code></pre> </li> </ul> <p>NOTE: <code>fc-get</code> and <code>fc-set</code> are essentially the same program, the function is defined by the name.</p> <p>The tools auto-detect the plugging of an FC.</p> <pre><code>$ fc-get /tmp/dodo-test.txt\n12:16:04 No device given ... watching\n12:16:04 Opening /dev/ttyUSB0\n12:16:04 Establishing CLI\n12:16:05 Starting \"diff all\"\n12:16:06 Exiting\n12:16:06 Rebooting\n</code></pre> <p>Then, maybe after flashing the FC to a new version:</p> <pre><code>$ fc-set /tmp/dodo-test.txt\n12:16:56 No device given ... watching\n12:16:56 Opening /dev/ttyUSB0\n12:16:56 Starting restore\n12:16:56 Establishing CLI\n12:16:58 [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588] 100%\n12:16:58 Rebooting\n12:17:01 Establishing CLI\n12:17:03 Starting \"diff all\"\n12:17:03 Exiting\n12:17:03 Rebooting\n</code></pre> <p>And now we have a settings backup ...</p> <pre><code>$ ls -l /tmp/dodo*\n-rw-r----- 1 jrh jrh 2115 Mar 28 12:17 /tmp/dodo-test.txt\n-rw-r----- 1 jrh jrh 2115 Mar 28 12:16 /tmp/dodo-test.txt.2018-03-28T12.17.01\n</code></pre>"},{"location":"mwp-miscellaneous-tools/#flashsh-fcflash","title":"flash.sh, fcflash","text":"<p><code>fcflash</code> is a script to flash INAV images to a flight controller using the command line. It requires that <code>stm32flash</code> and <code>dfu-util</code> are installed on your computer. Optionally, it requires GCC <code>objcopy</code> to convert hex files to binary for DFU operation.</p> <ul> <li>DFU mode requires <code>dfu-util</code></li> <li>USB serial mode requires <code>stm32flash</code></li> </ul> <p><code>fcflash</code> decides which tool to use depending on the detected device node (which can be overridden)</p> <ul> <li><code>/dev/ttyACMx</code> =&gt; DFU</li> <li><code>/dev/ttyUSBx</code> =&gt; USB serial</li> </ul> <p>Note: <code>fcflash</code> is the installed file, in the repository it's <code>src/samples/flash.sh</code>.</p>"},{"location":"mwp-miscellaneous-tools/#operation","title":"Operation","text":"<p><code>fcflash</code> performs the following tasks</p> <ul> <li>Auto-detects the serial port (unless <code>rescue</code> is specified, and the FC is set to DFU via hardare (switch, pads))</li> <li>Sets the serial port to a sane mode</li> <li>Sets the FC to bootloader mode (unless 'rescue' is specified).</li> <li>If necessary, converts the <code>hex</code> image to a <code>bin</code> image (for DFU)</li> <li>Flashes the firmware.</li> </ul>"},{"location":"mwp-miscellaneous-tools/#options","title":"Options","text":"<p><code>fcflash</code> parses a set of options given on the command line. Normally, only the path to the hex file is required and everything else will be detected (device, flashing mode).</p> <ul> <li><code>rescue</code> : Assumed the FC is already in bootloader mode, requires a device name</li> <li><code>/dev/*</code> : The name of the serial device, required for <code>rescue</code>, typically <code>/dev/ttyACM0</code></li> <li><code>erase</code>  : Performs full chip erase</li> <li><code>[123456789]*</code> : Digits, representing a baud rate. <code>115200</code> is assumed by default.</li> </ul> <p>A file name (an INAV hex file) is also required.</p>"},{"location":"mwp-miscellaneous-tools/#examples","title":"Examples","text":""},{"location":"mwp-miscellaneous-tools/#flash-image-dfu-auto-detect","title":"Flash image, DFU, auto-detect","text":"<pre><code>fcflash inav_5.0.0_MATEKF405.hex\n</code></pre>"},{"location":"mwp-miscellaneous-tools/#flash-image-usb-serial-devttyusb0-auto-detect","title":"Flash image, USB serial (/dev/ttyUSB0), auto-detect","text":"<p>For my broken FC (USB connector unreliable).</p> <pre><code># as above, /dev/ttyUSB0 is autodetected\nfcflash inav_5.0.0_MATEKF405.hex\n\n# force device (and USB serial mode)\nfcflash /dev/ttyUSB0 inav_5.0.0_MATEKF405.hex\n</code></pre>"},{"location":"mwp-miscellaneous-tools/#flash-image-rescue-mode-hardware-boot-button-full-flash-erase","title":"Flash image, rescue mode (hardware boot button), full flash erase","text":"<pre><code>fcflash rescue erase /dev/ttyACM0 inav_5.0.0_MATEKF405.hex\n</code></pre> <p>The no specific ordering of the command line options is required.</p> <p>In summary, the command:</p> <pre><code>fcflash inav_5.0.0_WINGFC.hex\n</code></pre> <p>results in</p> <ul> <li>The hex is converted to a temporary Intel binary format file, as required by <code>dfu-util</code>.</li> <li>The FC is put into bootloader mode</li> <li> <p><code>dfu-util</code> is invoked as:</p> <pre><code> dfu-util -d 0483:df11 --alt 0 -s 0x08000000:force:leave -D inav_5.0.0_WINGFC.bin\n</code></pre> </li> <li> <p>The firmware is flashed and the FC reboots</p> </li> <li>The temporary bin file is removed</li> </ul> <p>Note that gcc <code>objcopy</code> is required to convert from <code>.hex</code> to <code>.bin</code> (as required by <code>dfu-util</code>).</p>"},{"location":"mwp-miscellaneous-tools/#flashgo","title":"flashgo","text":"<p><code>flashgo</code> is a tool to download blackbox logs from on-board flash. If you're doing this on a VCP board, it will download much faster then the apparent baud rate indicates. If you're using a non-VCP board (i.e. F3 or earlier), then consider using <code>flash_dump.rb</code> which can  temporarily alter the baudrate to achieve faster rates using CLI (vice MSP) commands.</p> <p><code>flashgo</code> is a replacement for the earlier <code>flashdl</code> tool.</p> <pre><code>$ flashgo --help\nUsage of flashgo [options] [device]\n-dir string\n    output directory ($(cwd) if not specified)\n-erase\n    erase after download\n -file string\n    output file, auto-generated (bbl_YYYY-MM-DD_hhmmss.TXT) if not specified\n -info\n    show flash info and exit\n -only-erase\n    erase only and exit\n -test\n    download whole flash regardess of used state\n\ndevice is the FC serial device, which may be auto-dectected\n</code></pre>"},{"location":"mwp-miscellaneous-tools/#usage-examples","title":"Usage Examples","text":""},{"location":"mwp-miscellaneous-tools/#check-flash-usage","title":"Check flash usage","text":"<pre><code>$ flashgo -info\nUsing /dev/ttyACM0\nFirmware: INAV\nVersion: 5.0.0\nData flash 0 / 2097152 (0%)\n</code></pre>"},{"location":"mwp-miscellaneous-tools/#test-mode-download-whole-flash","title":"Test mode (download whole flash)","text":"<pre><code>$ flashgo -test\nUsing /dev/ttyACM0\nFirmware: INAV\nVersion: 5.0.0\nEntering test mode for 2097152b\nData flash 2097152 / 2097152 (100%)\nDownloading to bbl_2022-05-22_113211.TXT\n[\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587] 2.0MB/2.0MB 100% 0s\n2097152 bytes in 40.2s, 52218.4 bytes/s\n</code></pre>"},{"location":"mwp-miscellaneous-tools/#check-flash-info","title":"Check flash info","text":"<pre><code>$ flashgo -info\nUsing /dev/ttyACM0\nUnexpected MSP 108 (0x6c)\nFirmware: INAV\nVersion: 5.0.0\nData flash 27674 / 2097152 (1%)\n</code></pre>"},{"location":"mwp-miscellaneous-tools/#download-to-auto-generated-file-name","title":"Download to auto-generated file name","text":"<pre><code>$ flashgo\nUsing /dev/ttyACM0\nFirmware: INAV\nVersion: 5.0.0\nData flash 27674 / 2097152 (1%)\nDownloading to bbl_2022-05-22_114044.TXT\n[\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587] 27.0KB/27.0KB 100% 0s\n27674 bytes in 0.5s, 50838.4 bytes/s\n</code></pre>"},{"location":"mwp-miscellaneous-tools/#erase-the-flash-only-no-download","title":"Erase the flash (only, no download)","text":"<pre><code>$ flashgo -only-erase\nUsing /dev/ttyACM0\nFirmware: INAV\nVersion: 5.0.0\nErase in progress ...\nCompleted\n</code></pre>"},{"location":"mwp-miscellaneous-tools/#check-flash-info_1","title":"Check flash info","text":"<pre><code>$ flashgo -info\nUsing /dev/ttyACM0\nFirmware: INAV\nVersion: 5.0.0\nData flash 46893 / 2097152 (2%)\n</code></pre>"},{"location":"mwp-miscellaneous-tools/#download-to-nominated-file-name","title":"Download to nominated file name","text":"<pre><code>$ flashgo -file bbl_TEST.txt\nUsing /dev/ttyACM0\nFirmware: INAV\nVersion: 5.0.0\nData flash 46893 / 2097152 (2%)\nDownloading to bbl_TEST.txt\n[\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587] 45.8KB/45.8KB 100% 0s\n46893 bytes in 0.9s, 52290.6 bytes/s\n</code></pre>"},{"location":"mwp-miscellaneous-tools/#download-to-nominated-file-and-directory","title":"Download to nominated file and directory","text":"<pre><code>$ flashgo -file bbl_TEST.txt -dir /tmp/\nUsing /dev/ttyACM0\nFirmware: INAV\nVersion: 5.0.0\nData flash 46893 / 2097152 (2%)\nDownloading to /tmp/bbl_TEST.txt\n[\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587] 45.8KB/45.8KB 100% 0s\n46893 bytes in 0.9s, 52298.0 bytes/s\n</code></pre>"},{"location":"mwp-miscellaneous-tools/#download-to-auto-generated-file-name-and-nominated-directory-then-erase-flash","title":"Download to auto-generated file name and nominated directory, then erase flash","text":"<pre><code>$ flashgo  -dir /tmp/ -erase\nUsing /dev/ttyACM0\nFirmware: INAV\nVersion: 5.0.0\nData flash 46893 / 2097152 (2%)\nDownloading to /tmp/bbl_2022-05-22_114515.TXT\n[\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587\u2587] 45.8KB/45.8KB 100% 0s\n46893 bytes in 0.9s, 52291.9 bytes/s\nErase in progress ...\nCompleted\n</code></pre> <p>Note that in every case, the FC device node is auto-detected.</p> <p>Note also that the download speed is approximately 5 times greater than one would expect from the nominal baud rate (115200 ~= 10800 bytes/sec).</p>"},{"location":"mwp-miscellaneous-tools/#flash_dumprb","title":"flash_dump.rb","text":"<p><code>flash_dump.rb</code> is another tool for downloading blackbox logs from on-board flash. Whereas <code>flashgo</code> uses MSP, flash_dump.rb uses CLI commands and is thus rather more fragile and requires that the FC firmware is compiled with <code>#define USE_FLASH_TOOLS</code> (which is not the default).</p> <ul> <li>It allows the temporary use of higher baud rates on USB (e.g. 921600).</li> <li>If it fails, you may  have to reset the baud rate via the CLI, if the configurator is unable to connect &gt; 115200 baud.<pre><code>$ flash_dump.rb --help\n\nflash_dump.rb [options] file\nDownload bb from flash\n    -s, --serial-device=DEV\n    -e, --erase\n    -E, --erase-only\n    -o, --output=FILE\n    -b, --baud=RATE\n    -B, --super-baud=RATE\n    -?, --help                       Show this message\n</code></pre> </li> </ul> <p>Unlike <code>flashdl</code> which auto-detects serial ports, <code>flash_dump.rb</code> tries <code>/dev/ttyUSB0</code> and <code>/dev/ttyACM0</code>, or the device given with <code>-d</code>. The \"super baud\" rate must be specified to use a faster rate than the FC default:</p> <pre><code>$ flash_dump.rb -B 921600\n/dev/ttyUSB0\nChanging baud rate to 921600\nFound \"serial 0 1 115200 38400 115200 115200\"\nsetting serial 0 1 921600 38400 115200 115200\nReopened at 921600\nSize = 1638400\nread 1638400 / 1638400 100%    0s\nGot 1638400 bytes in 18.8s 87268.8 b/s\nExiting\n</code></pre> <p>After the download has completed, the serial port is reset to the previously configured baud rate (typically 115200). Note the very high speed of the  download, 87268 bytes /sec; this is almost 9 times faster than the standard baud (and 9x the speed of using the configurator with a USB board).</p> <p>Should the download fail and the board serial speed is not reset automatically, it will be necessary to manually reset UART1, possibly using <code>cliterm</code>.</p> <p>So, had the above failed, it could be rescued by pasting in the \"Found\" line above:</p> <pre><code>$ cliterm -b 921600\nopen /dev/ttyUSB0\n\nEntering CLI Mode, type 'exit' to return, or 'help'\n\n# serial 0 1 115200 38400 115200 115200\n\n# save\nSaving\nRebooting\n</code></pre>"},{"location":"mwp-miscellaneous-tools/#cliterm","title":"cliterm","text":"<p><code>cliterm</code> is a terminal program for interacting with the INAV CLI. Unlike alternative tools (<code>picocom</code>, <code>minicom</code> etc.), it will auto-detect the FC serial device, uses 115200 as the baud rate and, by default, automatically enters the CLI.</p> <pre><code>    $ cliterm --help\n    Usage:\n      cliterm [OPTION?]  - cli tool\n\n    Help Options:\n      -h, --help                            Show help options\n\n    Application Options:\n      -b, --baud=115200                 baud rate\n      -d, --device                      device\n      -n, --noinit=false                noinit\n      -m, --msc=false                   msc mode\n      -g, --gpspass=false               gpspassthrough\n      -p, --gpspass=false               gpspassthrough\n      -f, --file                        file\n      --eolmode=[cr,lf,crlf,crcrlf]     eol mode\n</code></pre> <ul> <li>With <code>-g</code>, <code>-p</code>, the FC is put into GPS passthrough mode, in order to use tools like <code>ublox-cli</code> or <code>u-center</code> (sic).</li> <li><code>-m</code>, <code>--msc</code> causes the FC to reboot in MSC (USB Mass Storage) mode.</li> </ul> <p>The options <code>-n</code> (don't enter CLI automatically) and <code>-m</code> may be useful when accessing other devices (for example a 3DR radio, HC-12 radio or ESP8266) in command mode.</p> <p><code>cliterm</code> understands Ctrl-D as \"quit CLI without saving\". You should quit <code>cliterm</code> with Ctrl-C, having first exited the CLI in the FC (<code>save</code>, <code>exit</code>, Ctrl-D). Or after <code>save</code>, <code>exit</code>, <code>cliterm</code> will exit when the FC is rebooted, by seeing the tear-down of the USB device node.</p>"},{"location":"mwp-miscellaneous-tools/#blackbox-analysis-and-diagnostics","title":"Blackbox analysis and diagnostics","text":"<p>mwptools has always included tools to simplify blackbox analysis. it seems to the author that it's often much easier to pre-process the output of INAV <code>blackbox_decode</code> into a smaller dataset that addresses the specific problem rather than try and make sense of the mass of data in a blackbox log.</p> <p>There are a few basic prerequisites for doing this analysis using the mwp scripts:</p> <ul> <li>You have a recent version of INAV's <code>blackbox_decode</code></li> <li>You have a <code>ruby</code> interpreter installed</li> <li>You don't mind \"getting your hands dirty\" on the command line</li> <li>If you want pretty graphs, have <code>gnuplot</code> installed; it's also possible to generate graphs (\"charts\") from spreadsheet applications (LibreOffice Calc, MS Excel).</li> </ul>"},{"location":"mwp-miscellaneous-tools/#worked-example","title":"Worked example","text":"<p>A user reported serious toilet-bowling / fly away on a large cine-octa with expensive VTX RF gear and camera gimbal. Two blackbox logs were provided, one with the RF and gimbal disabled, the other with them enabled (when the problem appears).</p> <p>The logs were processed with the <code>mwptools/src/bbox-replay/inav-parse_bb_compass.rb</code>. This script:</p> <ul> <li>Decodes the log, down-sampling to 0.1s intervals (or user provided interval)</li> <li>Extracts the GPS heading and the compass heading (via INAV's position estimator), the relevant blackbox fields being <code>GPS_ground_course</code> and <code>attitude[2]/10</code>.</li> <li>Generates a calculated heading from adjacent GPS locations.</li> <li>Generates a simplified CSV containing the down-sampled lines and required data only (including throttle and navigation state)</li> <li>Generates a SVG graph.</li> </ul>"},{"location":"mwp-miscellaneous-tools/#script-usage","title":"Script usage","text":"<p>You need to run this from a shell (Linux / MacOS /FreeBSD terminal, Windows powershell or cmd). <code>blackbox_decode</code> and (optionally) <code>gnuplot</code> need to be on the <code>PATH</code>.</p> <pre><code>$ ./inav-parse_bb_compass.rb --help\ninav-parse_bb_compass.rb [options] [file]\n      --list-states\n      --plot                       Generate SVG graph (requires 'gnuplot')\n      --thr                        Include throttle value in output\n  -o, --output=FILE                CSV Output (default stdout\n  -i, --index=IDX                  BBL index (default 1)\n  -t, --min-throttle=THROTTLE      Min Throttle for comparison (1000)\n  -s, --states=a,b,c               Nav states to consider [all]\n  -d, --delta=SECS                 Down sample interval (default 0.1s)\n  -?, --help                       Show this message\n</code></pre>"},{"location":"mwp-miscellaneous-tools/#results-from-the-analysis","title":"Results from the analysis","text":"<p>First, the good log (no VTX-RF or gimbal enabled):</p> <pre><code>./inav-parse_bb_compass.rb --plot /tmp/LOG00001.TXT\nINAV 4.1.0, states from 2.7.0\nLog 1 of 1, start 00:49.654, end 06:33.615, duration 05:43.961\n\nStatistics\nLooptime            506 avg           14.9 std dev (2.9%)\nI frames   21061  128.0 bytes avg  2696240 bytes total\nP frames  315692   81.6 bytes avg 25753176 bytes total\nH frames     164   10.0 bytes avg     1640 bytes total\nG frames    1865   21.6 bytes avg    40300 bytes total\nE frames       1    6.0 bytes avg        6 bytes total\nS frames    4066   40.0 bytes avg   162637 bytes total\nFrames    336753   84.5 bytes avg 28449416 bytes total\nData rate  979Hz  83359 bytes/s     833600 baud\n\n29 frames failed to decode, rendering 181 loop iterations unreadable. 2897 iterations are missing in total (1466ms, 0.43%)\n339649 loop iterations weren't logged because of your blackbox_rate settings (171980ms, 50.00%)\n\nGraph in /tmp/LOG00001.TXT.csv.svg\n</code></pre> <p>We see some information, mainly the summary from <code>blackbox_decode</code> and notification of the resulting graph file.</p> <p></p> <p>Looks OK, there's a few deviations between the GPS and position estimator, possibly a result of hard Acro mode manoeuvres.</p> <p>Let's now look at the log with the VTX-RF and gimbal enabled:</p> <pre><code>./inav-parse_bb_compass.rb --plot /tmp/LOG00008.TXT\n...\n Graph in /tmp/LOG00001.TXT.csv.svg\n</code></pre> <p>Note the difference</p> <p></p> <p>Something in generating enough interference to cause the heading / position estimator <code>attitude[2]</code> to essentially flat-line.</p> <p>So now we have concrete evidence of the problem, the next steps would be for the pilot to repeat the exercise enabling just one of the suspect devices to identify the actual cause of the problem and then rectify it:</p> <ul> <li>Somehow isolate the device</li> <li>Replace the device with a better shielded substitute</li> <li>Move the GPS / compass further away (might not be so easy)</li> </ul>"},{"location":"mwp-miscellaneous-tools/#similar-tools","title":"Similar tools","text":"<p>PH unstable altitude is often caused by excessive vibrations or inadequately protected (open cell foam) barometer. <code>mwptools/src/bbox-replay/inav_gps_alt.rb</code> will generate a similar graph of baro v. GPS v. position estimator elevations.</p> <ul> <li>GPS and baro correlate, position estimator is off, most likely vibrations</li> <li>GPS and baro don't correlate. Probably lack of baro protection (or GPS interference from VTX).</li> </ul>"},{"location":"mwp-multi-procotol/","title":"\"Serial\" device support","text":"<p>mwp supports a number of different data transports for \"serial\" protocols:</p> <ul> <li>Wired serial devices (USB TTL (VCP) etc.)</li> <li>Bluetooth</li> <li>IP (UDP and TCP)</li> <li>\"Special\" (e.g. BulletGCSS via the MQTT protocol).</li> </ul> <p>Each of these requires a specific device name and may require a protocol selection.</p>"},{"location":"mwp-multi-procotol/#serial-devices","title":"Serial devices","text":"<p>Serial devices are defined by the operating system device node name and optionally include an embedded baud rate (<code>@baudrate</code>), for example:</p> <pre><code># Linux, USB seral\n/dev/ttyACM0\n# Linux, USB serial with baud rate\n/dev/ttyUSB0@57600\n# Linux, RFCOM Bluetooth\n/dev/rfcomm1\n\n# FreeBSD\n/dev/cuaU0\n\n# Windows\nCOM7\nCOM17@38400\n</code></pre>"},{"location":"mwp-multi-procotol/#bluetooth","title":"Bluetooth","text":"<p>Bluetooth may be specified by either an <code>rfcomm</code> device node (<code>/dev/rfcommX</code> on Linux, <code>/dev/ttypX</code> pseudo-terminal abstraction on FreeBSD, <code>COM</code> device on Windows and <code>/dev/cu.bluetooth*</code> on MacOS) or by the device address (<code>BD_ADDR</code>, Linux and FreeBSD only):</p> <pre><code># BT RFCOMM device node (Linux)\n/dev/rfcomm1\n/dev/rfcomm1@57600\n# RFCOMM / SPP (FreeBSD)\n/dev/ttyp6\n# BT device address (note here baud rate is immaterial)\n35:53:17:04:07:27\n</code></pre> <ul> <li>On Linux, both legacy Bluetooth (RFCOMM/SPP) and Bluetooth Low Energy (BLE) are supported. BLE devices do not implement RFCOMM and must be accessed by address.</li> <li>On FreeBSD, MacOS and Windows only legacy (RFCOMM/SPP) Bluetooth is supported.</li> </ul>"},{"location":"mwp-multi-procotol/#further-bluetooth-considerations","title":"Further Bluetooth considerations","text":"<ul> <li> <p>For legacy devices, it is recommended that these are paired before use; this will greatly speed up the device recognition process.</p> </li> <li> <p>For BLE, in general it is not possible to pair devices; it is recommended that you use operating system tools (e.g. <code>bluetoothctl</code> to discover the device and find all the BLE/Gatt characteristics (e.g. by <code>connect</code> in <code>bluetoothctl</code>). Otherwise you may end up in a \"Morton's fork\" situation where in order recognise the device as BLE, mwp needs to connect to it and in order to use the BLE connect functions, mwp needs to know it's a BLE device.</p> </li> </ul> <p>A sequence of <code>bluetoothctl</code> commands (where <code>aa:bb:cc:dd:ee:ff</code> represents a new device address); such as the following will help :</p> <pre><code>$ bluetoothctl\npower on\ndefault-agent\nscan on\n## ... devices are discovered\ninfo aa:bb:cc:dd:ee:ff\n## note this will probably only show up a little data and 0 or 1 UUIDs (we need more)\nconnect aa:bb:cc:dd:ee:ff\n## for a BLE device, this will spew out a load of \"characteristics\" and multiple UUIDS\ntrust aa:bb:cc:dd:ee:ff\ndisconnect aa:bb:cc:dd:ee:ff\nquit\n</code></pre> <p>Now the device should be discovered in mwp and should connect.</p> <p>The following BLE chip-sets are supported:</p> <ul> <li>CC2541</li> <li>Nordic Semi NRF</li> <li>SpeedyBee Type 1</li> <li>SpeedyBee Type 2</li> </ul> <p>The first and last items having been tested by the author.</p>"},{"location":"mwp-multi-procotol/#discovery-and-filtering","title":"Discovery and filtering","text":"<p>By default, mwp relies on the bonded information about bluetooth devices known to the operating system. This has (at least) two consequences:</p> <ul> <li>Unknown devices are not detected</li> <li>All known (serial) devices are listed, including offline / un-powered devices.</li> </ul>"},{"location":"mwp-multi-procotol/#experimental-discover-and-filter-action","title":"Experimental Discover and Filter action","text":"<p>There is a somewhat experimental option that includes scanning and RSSI filtering such that:</p> <ul> <li>A Bluetooth discovery scan is initiated (and terminated on quit).</li> <li>Only on-line devices with non-zero RSSI are listed.</li> </ul> <p>The downside being that is RSSI if never discovered / advertised by the OS, then the device is not listed.</p> <p>This mode is enabled by a setting:</p> <pre><code>$ gsettings set org.stronnag.mwp  bluez-disco true\n</code></pre> <p>This is persistent, in order to revert to the default, non-scanning no RSSI filter:</p> <pre><code>$ gsettings set org.stronnag.mwp  bluez-disco false\n</code></pre>"},{"location":"mwp-multi-procotol/#mwp-ble-bridge","title":"mwp-ble-bridge","text":"<p>In order to use BLE serial devices with tools (i.e. other than mwp)  that do not implement the BLE protocol, mwp provides a <code>mwp-ble-bridge</code> tool that uses a pseudo-terminal, TCP server or UDP server to facilitate BLE connectivity for other tools that expect a device node. See the <code>README.md</code> in <code>src/mwp-ble-bridge</code>.</p> <p>Using a bridge with TCP allows connectivity with the INAV Configurator versions that appear not to understand BLE on Linux. Note that INAV Configurator 8.0 will \"sort of\" support BLE on Linux.</p>"},{"location":"mwp-multi-procotol/#ble-caveats","title":"BLE Caveats","text":"<p>BLE not particularly useful for anything other than low power. The transfer rates are extremely slow and whether the device can be used at all depends on its MTU (maximum transmission unit). For some devices this is unacceptable low for use with mwp / INAV.</p> <ul> <li>The SpeedyBee version 2 BLE device has an MTU of 517 bytes; it works perfectly.</li> <li>CC2541 based devices have an MTU of 23 bytes; this is less useful for our requirement.</li> </ul> <p>mwp will never send more than 20 bytes in a single write to a BLE device; chunking up messages as required. The FC cannot do this, so large messages will result in massive data overrun (for example MSP_BOX_NAMES will typically return more than 400 bytes).</p> <p>mwp will log the detected MTU when it connects a BLE device.</p> <pre><code>13:05:07.547489 BLE chipset CC2541, mtu 23 (unlikely to end well)\n...\n13:07:36.946329 BLE chipset SpeedyBee Type 2, mtu 517\n</code></pre>"},{"location":"mwp-multi-procotol/#serial-permissions","title":"Serial permissions","text":"<p>It is necessary for the user to have read / write permission on serial devices. The installation guide provides instructions.</p>"},{"location":"mwp-multi-procotol/#ip-protocols-udp-and-tcp","title":"IP protocols (UDP and TCP)","text":"<p>mwp uses a pseudo-URL format for TCP and UDP connections <code>udp://host:port</code> and <code>tcp://host:port</code> (where <code>host</code> is either a hostname or an IP address as required).</p> <p>Typically on one side of the connection you'll provide a hostname /IP and on the other you won't (as it can get the peer address from the first data packet).</p> <p>Assuming the required UDP port is 43210</p> <p>if mwp is the \"listener\" (doesn't need, a priori, to know the address of peer), set the \"Device\" to:</p> <pre><code>udp://:43210\n</code></pre> <p>i.e. the host part is empty.</p> <p>If the remote device / application is the listener, and we know its IP address; in the following example \"192.168.42.17\", set the \"Device\" to:</p> <pre><code>udp://192.168.42.17:43210\n</code></pre> <p>Note that for TCP, mwp only supports the latter form (it expects to be the TCP client).</p>"},{"location":"mwp-multi-procotol/#special-cases","title":"Special Cases","text":""},{"location":"mwp-multi-procotol/#udp-devices-required-defined-local-and-remote-port-numbers","title":"UDP devices required defined local and remote port numbers","text":"<p>Some UDP devices (typically ESP8266 transparent serial) require that the port number is specified for both local and remote addresses; often the same port number at both ends. <code>udp://local_host:local_port/remote_host:remote_port</code> or <code>udp://remotehost:remote_port/?bind=port</code>. The following have the same effect.</p> <pre><code>udp://:14014/esp-air:14014\n# both sides use port 14014, remote (FC) is esp-air, blank local name is understood as INADDR_AN\nudp://esp-air:14014/?bind=14014\n</code></pre>"},{"location":"mwp-multi-procotol/#uri-conventions","title":"URI Conventions","text":"<p>The device definitions for TCP and UDP follow an explicit URI format. Device descriptions for \"serial\" devices have an implied URI format as well, e.g:</p> <ul> <li><code>bt:xx:xx:xx:xx:xx:xx</code></li> <li><code>tty:/dev/ttyUSB0</code></li> <li><code>tty:COM33</code></li> </ul> <p>The following URI \"query\" values are supported:</p> <ul> <li> <p><code>baud=NNNN</code> (<code>NNNN</code> is a valid baud rate), examples:</p> <pre><code>/dev/ttyUSB0?baud=9600\nCOM17?baud=9600\n</code></pre> </li> <li> <p><code>mavlink=N</code> (<code>N</code> is 1 or 2 for required Mavlink version). This causes mwp to send a Mavlink \"beacon\" (<code>HEARTBEAT</code>) which will improve the behaviours of some Mavlink based products (such as PicoADSB). It may also provoke some other (non-INAV) Mavlink based telemetry devices to geneate data. Examples:</p> <pre><code>/dev/ttyUSB0?mavlink=2\nudp://acme.org:12345?mavlink=1\n</code></pre> </li> <li> <p><code>bind=PORT</code> As discussed above for UDP.</p> </li> </ul> <p>Note that values may be combined using standard URI syntax:</p> <pre><code>tty:/dev/ttyuSB1?baud=57600&amp;mavlink=2\nudp://mandy.fly.me:30001?bind=30001&amp;mavlink=2\n</code></pre>"},{"location":"mwp-multi-procotol/#mqtt-bulletgcss","title":"MQTT / BulletGCSS","text":"<p>See the mwp's MQTT support article for a detailed description of the URI format:</p> <pre><code>mqtt://[user[:pass]@]broker[:port]/topic[?cafile=file]\n</code></pre>"},{"location":"mwp-multi-procotol/#multi-protocol-selection","title":"Multi Protocol selection","text":""},{"location":"mwp-multi-procotol/#overview","title":"Overview","text":"<p>There is a protocol drop-down that allows the user to select the in-use serial protocol. </p> <p>Offering:</p> <p></p>"},{"location":"mwp-multi-procotol/#usage","title":"Usage","text":"Item Usage Auto Auto-detects the protocol from the serial data stream. Note that MPM cannot (yet) be auto-detected reliably, and must be explicitly selected). INAV INAV protocols, MSP, LTM and MAVLink. Legacy behaviours S-Port Smartport telemetry, previously required <code>--smartport</code> options. Expects a non-inverted stream CRSF Crossfire Telemetry. MPM Multi-Protocol-Module telemetry. The output from an EdgeTX / OpenTX radio with a multi-protocol module, FrSky Smartport or Flysky 'AA' via the EdgeTX / OpenTX \"Telem Mirror\" function. Prior to EdgeTX 2.7, this cannot be reliably auto-detected, and should be explicitly selected; with EdgeTX 2.7 and later, auto-detection is possible and reliable."},{"location":"mwp-multi-procotol/#notes","title":"Notes","text":"<ul> <li>For radar functions (INAV-radar, ADSB), it is necessary to set the <code>--radar-device=</code> option. Leave the protocol selector at 'Auto'.</li> <li>For telemetry forwarding, it is necessary to set the <code>--forward-to=</code> option. Leave the protocol selector at 'Auto'.</li> <li>For FlySky MPM telemetry, the INAV CLI setting <code>set ibus_telemetry_type = 0</code> is required; any other <code>ibus_telemetry_type</code> value will not work.</li> </ul>"},{"location":"mwp-multi-procotol/#auto-detection","title":"Auto-detection","text":"<ul> <li>INAV (MSP, LTM, MAVLink) auto-detection should be reliable (legacy function).</li> <li>S-Port and CRSF may be less reliably detected.</li> <li>MPM is hard to auto-detected. From EdgeTX 2.7, MPM auto-detection works reliably.</li> <li>It is recommended that for S-Port, CRSF and MPM, the desired protocol is set explicitly (not left at \"Auto\").</li> </ul>"},{"location":"mwp-multi-procotol/#telemetry-forwarding","title":"Telemetry Forwarding","text":"<p>mwp can forward received telemetry protocol payloads according to a filter defined by two parameters:</p> <ul> <li>The CLI parameter <code>`--forward-to=&lt;device&gt;</code> where <code>&lt;device&gt;</code> represents the device node / name used for forwarding. <code>&lt;device&gt;</code> describes any supported mwp transport (serial, BT, UDP, TCP).</li> <li> <p>The setting <code>forward</code>:   <pre><code>$ gsettings describe  org.stronnag.mwp forward\nTypes of message to forward (none, LTM, minLTM, minMAV, all, MSP1, MSP2, MAV1, MAV2)\n</code></pre></p> </li> <li> <p><code>none</code>: No forwarding (default)</p> </li> </ul> <p>These settings have two distinct behaviours:</p>"},{"location":"mwp-multi-procotol/#forwarding-same-type-messages","title":"Forwarding \"same type\" messages","text":"<p>The following settings, apply to received telemetry of  the specified type. No message translation is done, and all data received will be regenerated and sent on to the <code>forward-device</code>.</p> <ul> <li><code>all</code>: Any <code>MSP</code>, <code>LTM</code> <code>MAVLink</code> , All received responses will be forwarded.</li> <li><code>minLTM</code>: Minimal set of received <code>LTM</code> (typically for antenna trackers; <code>G</code>, <code>A</code> and <code>S</code> frames) will be forwarded.</li> <li><code>minMAV</code>: Minimal set of <code>MAVLink</code> (typically for antenna trackers; <code>ID_HEARTBEAT</code>, <code>ID_SYS_STATUS</code>, <code>GPS_RAW_INT</code>, <code>ATTITUDE</code>) will be forwarded.</li> </ul>"},{"location":"mwp-multi-procotol/#translated-capability-messages","title":"Translated \"capability\" messages","text":"<p>The following settings are \"capability\" based and may involve translation of a forwarded protocol into a different protocol. For example, a MSP <code>MSP_RAW_GPS</code> might be forwarded to a <code>LTM</code> consumer as LTM <code>G_FRAME</code> or to a MAVLink consumer as <code>MAVLINK_MSG_GPS_RAW_INT</code>. Messages are grouped into the following \"capailities\":</p> <ul> <li>GPS Position / velocity / status</li> <li>Attitude</li> <li>Status</li> <li>Origin</li> </ul> <p>When a telemetry message via MSP, LTM or MAVlink is received that matches one of these categorisations, it is forwarded as best representing that capability in the consumer's message protocol:</p> <ul> <li><code>LTM</code> : Data is transposed to one or more LTM messages</li> <li><code>MSP1</code> : Data is transposed to one or more MSPv1 messages</li> <li><code>MSP2</code> : Data is transposed to one or more MSPv2 messages</li> <li><code>MAV1</code> : Data is transposed to one or more MAVLink v1 messages</li> <li><code>MAV2</code> : Data is transposed to one or more MAVLink v2 messages</li> </ul> <p>Caveat:</p> <ul> <li>The association between an incoming message, its \"capability\" and the appropriate outgoing message(s) is necessarily \"fuzzy\"; not all data in one message protocol can be represented in a different message protocol</li> <li>Simple cases e.g. receiving MSPv2 and forwarding to an antenna or head tracker that uses a different protocol (<code>LTM</code>, <code>MSP1</code>, <code>MAV1</code>, <code>MAV2</code>) should be satisfactory, as a tracker doesn't require that much information.</li> <li>Forwarding translated data to another GCS will most likely result in a degraded view on the consumer GCS.</li> </ul> <p>Other Notes:</p> <ul> <li>Prior to forwarding the message payload, mwp will have validated the message and processed it for its own purpose.</li> <li>For MAVLink, by default, mwp uses a <code>sysid</code> of <code>106</code> (UTF8 <code>j</code>).</li> <li>The MAVLink <code>sysid</code> may be changed with the setting <code>mavlink-sysid</code>, in the range 2-255 (see MAVlink documentation and particularly the GCS guidance, 2nd paragraph ibid)</li> </ul> <p>e.g.</p> <p><pre><code># setting\ngsettings set org.stronnag.mwp forward minLTM\n</code></pre> <pre><code># in ~/.config/mwp/cmdopts\n# forward over UDP\n--forward-to=udp://udp-ant:30001\n</code></pre></p>"},{"location":"mwp-safehomes-editor/","title":"Safehome and Auto-land","text":"<p>One of the great features of INAV 2.6 was the <code>safehome</code> capability. The user can define of set of up to eight locations, and if any of these is within 200m (configurable up to 650m in INAV 2.7), then that is used as the home location for RTH (and RTH failsafe).</p>"},{"location":"mwp-safehomes-editor/#inav-setting","title":"INAV setting","text":"<p><code>safehome</code> is set in INAV using the CLI, (note more recent Configurators also have a UI);  here's an example:</p> <pre><code># safehome\nsafehome 0 1 508047750 -14948970\nsafehome 1 1 509102384 -15344850\nsafehome 2 1 509390336 -14613540\nsafehome 3 1 509149619 -15337365\nsafehome 4 0 508054891 -14961431\nsafehome 5 0 543545392 -45219430\nsafehome 6 0 540954148 -47328458\nsafehome 7 0 0 0\n</code></pre> <p>As you see, it's not too user friendly; the parameters are</p> <ul> <li>Index (0 - 7)</li> <li>Status (0 = don't use, 1 = can use)</li> <li>Latitude as degrees * 10,000,000 (i.e. 7 decimal places)</li> <li>Longitude as degrees * 10,000,000 (i.e. 7 decimal places)</li> </ul> <p>It can be error prone to get locations into the correct format, particularly when a common source (Google Maps) only provides 6 decimal places of precision.</p>"},{"location":"mwp-safehomes-editor/#mwp-solution","title":"mwp solution","text":""},{"location":"mwp-safehomes-editor/#graphical-user-interface","title":"Graphical User Interface","text":"<p>Legacy Images</p> <p>The images this section are from legacy mwp, however the capability is the same.</p> <p>Note: Since mwp 7.32.?, mwp provides additional fields for the Autoland function that first appeared in INAV 7.1.0.</p> <p>mwp now offers a <code>Safe Homes</code> menu option:</p> <p></p> <p>This will launch the <code>Safe Home</code> window:</p> <p></p> <p>From here it is possible to:</p> <ul> <li>Load safehomes from a file in CLI format. A CLI diff or dump can be  used.</li> <li>Save safehomes to a file in CLI format. If a CLI diff or dump is selected, then only the <code>safehome</code> and <code>fwapproach</code> stanzas are changed; other information in the diff / dump is preserved.</li> <li>Display safehomes on the map. Active safehomes are displayed with greater opacity than inactive locations.</li> <li>Change the status (active, inactive). If a previously unused item is enabled, an icon is placed on the centre of the map for positioning.</li> <li>Clear (unset) one or all safehomes.</li> <li>Upload and Download <code>safehome</code> and <code>fwapproach</code> data to/from the flight controller.</li> <li>Manage INAV 7.1.0+ Autoland data</li> </ul> <p>Clicking the \"Edit\" button at the end of row enables editing FWA parameters:</p> <p></p> <p>Note that editing functions are only available when the <code>Safe Homes</code> window is active; if the windows is dismissed with icons displayed, then the icons remain on the map, but are not editable.</p>"},{"location":"mwp-safehomes-editor/#display-safehomes-at-startup","title":"Display safehomes at startup","text":"<p>It also is possible to set a <code>gsettings</code> key to define a file of safehomes to load at startup, and optionally display (readonly) icons.</p> <pre><code>gsettings set org.stronnag.mwp load-safehome ~/.config/mwp/safehome.txt,Y\n</code></pre> <p>This sets the default safehomes file to <code>~/.config/mwp/safehome.txt</code> and the appended <code>,Y</code> means display the icons on the map.</p> <p>If the file also contains <code>fwapproach</code> data, that will be applied as well.</p> <p>If the name part is set to <code>-FC-</code>, then the safehomes will be loaded from the flight controller, for example:</p> <pre><code>gsettings get org.stronnag.mwp load-safehome\n'-FC-,Y'\n</code></pre>"},{"location":"mwp-safehomes-editor/#example","title":"Example","text":"<p>The image below shows a blackbox replay. Note that the flight home location (brown icon) is coincident with the pale orange safehome icon.</p> <p></p>"},{"location":"mwp-safehomes-editor/#fw-approach-fwa-visualisation","title":"FW Approach (FWA) visualisation","text":"<p>Please note that for the display of the geometry of the FWA, mwp uses the same rules as the flight controller; in particular the length of \"base leg / dog leg\" depends two CLI parameters, <code>nav_fw_land_approach_length</code>, <code>nav_fw_loiter_radius</code>. These are not part of the safe home (or mission) definition, rather they are properties of the model (and thus are persisted in a CLI <code>diff</code> file).</p> <p>mwp can load these properties from a CLI <code>diff</code>/<code>dump</code> format file, as well as other CLI artefacts.</p> <p>In particular, the length of the \"base leg / dog leg\" is the maximum of:</p> <ul> <li><code>nav_fw_land_approach_length / 2</code> or</li> <li><code>nav_fw_loiter_radius * 4</code></li> </ul> <p>For example, in the first image the user had set <code>nav_fw_land_approach_length</code> to 150m (for a small, agile plane) but had accidentally left the <code>nav_fw_loiter_radius</code> at the default of <code>75m</code>. The excessive radius dominates and gives an unacceptable geometry:</p> <p></p> <p>Setting the radius to a more appropriate value for the model (40m) results in a much more acceptable geometry (still dominated by the loiter radius).</p> <p></p> <p>In summary, in order to display FWA accurately for either safe homes or missions, it is advisable to provide a CLI <code>diff</code> format file containing at a minimum, <code>set</code> values for <code>nav_fw_land_approach_length</code> and <code>nav_fw_loiter_radius</code>. For the above example:</p> <pre><code>set nav_fw_loiter_radius = 4000\nset nav_fw_land_approach_length = 15000\n</code></pre>"},{"location":"mwp-telemetry-tracker/","title":"Telemetry Tracking","text":""},{"location":"mwp-telemetry-tracker/#overview","title":"Overview","text":"<p>The mwp \"Telemetry Tracking\" function allows additional vehicles to be tracked by a single mwp instance.</p> <p>One use case is:</p> <ul> <li>The \"primary\" user is connected using either RX Telemetry or a legacy telemetry radio (3DR, HC-12, LoRA) and uses mwp as a ground station, displaying the vehicle icon, track, information widgets in the \"dock\" and maybe audio prompts.</li> <li>One or more \"secondary\" users also wish to have their vehicle's tracking symbol displayed on the mwp map. These secondary users connect to mwp from their RX using Bluetooth, USB (or perhaps WiFi). This is somewhat analogous to tracking by INAV-Radar.</li> <li>For RX Telemetry, it is necessary to set a RX UART to \"Telemetry Mirror\"; this is supported by both EdgeTX and OpenTX.</li> </ul> <p>This capability builds on extant mwp features.</p> <ul> <li>mwp already knows about all USB serial devices and bound Bluetooth serial devices</li> <li>These devices are categorised as :<ul> <li>Primary device. This will be drive the \"dock\" widgets, be tracked with a flight path and generate audio reports (if enabled). A device becomes the <code>Primary</code> device by user action (as now, from the \"Connect\" button).</li> <li>\"Radar\" devices. Predefined devices for either INAV-Radar or general aviation ADS-B reports</li> <li>Secondary devices - Unassigned deviced, available for telemetry tracking. Managed by the \"Telemetry Tracking\" dialog.</li> </ul> </li> <li>Uses extant mwp telemetry protocol decoding:<ul> <li>LTM</li> <li>MAVlink</li> <li>CRSF</li> <li>SmartPort (direct via inverter or non-inverted via MultiProtocolModule (MPM)</li> <li>Flysky 'AA'/INAV type 1 via MPM</li> </ul> </li> <li>The telemetry protocol is auto-detected.</li> </ul>"},{"location":"mwp-telemetry-tracker/#telemetry-tracking-secondary-devices","title":"Telemetry Tracking (Secondary devices)","text":"<p>The devices will be read for any push telemetry supported by mwp and INAV (e.g. LTM, MAVLink, CRSF, Smartport, MPM). The protocol will be auto-detected. When valid (3D fix, geo-referenced) telemetry data is received, a symbol and name will be displayed on the map (as for the mwp radar display). The name associated with the symbol may be:</p> <ul> <li>Defined by the user when the device is selected in the user interface ; or</li> <li>Automatically assigned by mwp :<ul> <li>For Bluetooth, the device alias if defined; or</li> <li>Derived from the device name (e.g. <code>TTRK-ttyUSB1</code>)</li> </ul> </li> </ul>"},{"location":"mwp-telemetry-tracker/#user-interface","title":"User Interface","text":"<p>Legacy Images</p> <p>The images this section are from legacy mwp, however the capability is the same.</p> <p>In order to use Telemetry Tracking, it will be necessary for the user to assign the required devices. The primary device (once connected) and any devices predefined for \"Radar\" will not be considered. Once a device has been assigned as a \"Secondary / Telemetry Tracking\" device, it may not the used as the \"Primary\" device. Likewise, an established primary device will not be offered as a secondary device.</p> <p>The \"Telemery Tracking\" device(s) may be assigned from the \"View\" / \"Telemetry Tracker\" menu option (Control-Shift T).</p> <p></p> <ul> <li>The IP entries devices are for testing; they cannot be auto-detected so must be defined by the file <code>~/.config/mwp/secdevs</code>. This file lists zero or more devices, each with protocol and optional \"Alias\" text.</li> <li>The IP devices are defined from the file; each of these has a user-defined alias. The latter two of the UDP aliases have had the alias edited by the user.</li> <li>The USB device node is auto-detected and automatically aliased <code>TTRK-ttyACM0</code>. The user can edit / override this alias if she so wishes.</li> <li>The two bluetooth devices (<code>35:53:*</code>) have aliases defined at the operating system level.  The user can edit / override this alias if she so wishes.</li> <li>If <code>/dev/ttyACM0</code> is subsequently connected as the primary device, it will not appear in this list.</li> <li>The <code>Hint</code> column lets the user define the specific protocol to used (vice let it be auto-detected). The default, \"Auto\", should work in most cases, other than perhaps MPM on OpenTX.</li> </ul> <p>Tracking devices are enabled / disabled using the \"Enable\" check-button. Once a device is enabled, mwp will attempt to read data from it and display it. The device is closed by toggling the \"Enable\" button. Once disabled, its resources are freed. If a USB device is physically removed when enabled, its resources will also be freed.</p>"},{"location":"mwp-telemetry-tracker/#visualisation","title":"Visualisation","text":"<p>\"Telemetry Tracked\" objects are displayed on the map can be inspected using the existing mwp radar display functionality. \"Telemetry Tracking\" may be used at the same time as the extant \"INAV-Radar and \"ADS-B\" tracking.</p> <p>And example of visualisation is:</p> <p></p> <p>The \"Primary\" vehicle (a flying wing) has the standard mwp visualisation attributes. The other icons, <code>Replay 0</code> and <code>Replay 1</code> are \"secondary\" tracks from other pilot's CRSF telemetry (but it could be any of LTM, Mavlink, CRSF, SPort or Flysky 'AA' (INAV type 1)).  Note also that <code>Replay 0</code> has not reported for  over 5 minutes (\"stale\"); maybe it's crashed? At least the pilot knows where to start looking.</p>"},{"location":"mwp-telemetry-tracker/#icon","title":"Icon","text":"<p>All \"Telemetry Tracked\" vehicles use a common icon (<code>inav-telem.svg</code>). The default icon may be overridden by the user if so desired.</p>"},{"location":"mwp-telemetry-tracker/#constraints","title":"Constraints","text":"<p>Linux preferred, due to the <code>udev</code> dependency for device enumeration. On other platforms it will be necessary to define devices a priori using the <code>~/.config/mwp/secdevs</code> file. This file is maintained by the \"Telemetry Tracker\" GUI editor.</p> <p>An example <code>secdevs</code> file might be:</p> <pre><code># name, hint, alias\nudp://:23456,Auto,Replay 0\nudp://:23457,CRSF,Replay 1\nudp://:23458,MPM\nudp://:23459,INAV\ntcp://localhost:43210,Sport,Sport player\n</code></pre>"},{"location":"mwp-telemetry-usage/","title":"Additional Notes on \"telemtry\"","text":""},{"location":"mwp-telemetry-usage/#telemetry-categorisation","title":"Telemetry Categorisation","text":"<p>mwp is designed to manage INAV / MulitWii telemetry and some RC protocols. These essentially breaks down into two types:</p> <ul> <li>Polled Telemetry: MSP (Multiwii serial protocol). In this case, mwp will issue a request for data and the FC will reply;</li> <li>Unsolicited Push Telemetry: LTM, INAV flavour MAVLink, CRSF, Smartport, IBus, GCSS MQTT. mwp is a passive listener, in particular, it will do nothing to solicit data.</li> </ul>"},{"location":"mwp-telemetry-usage/#implications-for-data-transports","title":"Implications for data transports","text":""},{"location":"mwp-telemetry-usage/#serial-point-to-point","title":"\"Serial\" / Point to point","text":"<p>For \"dumb\" transports (serial UART, Bluetooth), there are no specific implications on telemetry type. The link is essentially physical and there is no dependency on either party to provide a \"reply address\".</p>"},{"location":"mwp-telemetry-usage/#ip-protocols","title":"IP Protocols","text":""},{"location":"mwp-telemetry-usage/#tcp","title":"TCP","text":"<p>mwp implements a TCP Client, so it needs a \"listener\" to which it can connect. This will always work for (polled) MSP, and may work for push protocols if the peer starts the push without specific request on connect.</p>"},{"location":"mwp-telemetry-usage/#udp","title":"UDP","text":"<p>UDP is slightly more problematic as the both ends need to know the respective peer address. This is typically retrieved from a received packet (e.g. <code>getpeername</code>).</p> <p>For polled telemetry, specify the peer address URI as <code>udp://peer:port</code>. The peer will know where to send the reply from the sender address in the request packet sent by mwp.</p> <p>For peer pushed telemetry, mwp does not send anything, so it is set up as a UDP listener; <code>udp://:port</code> (note there is no peer name, <code>INADDR_ANY</code>, <code>[::]</code>, <code>0.0.0.0</code> is implicit. mwp does not require to even evince the peer name, as it may not return any data.</p>"},{"location":"mwp-telemetry-usage/#udp-special-cases","title":"UDP Special cases","text":"<p>Some devices require that both the UDP sender and receiver use the same port. Early (e.g. 2015vintage ESP-01 Serial - IP devices) had this requirement. This may be specified using the <code>bind</code> parameter in the device URI e.g.:</p> <pre><code># both sides use port 14014, remote (FC) is host name \"esp-air\"\nudp://esp-air:14014/?bind=14014\n</code></pre> <p>Not that for a push telemetry protocol, this does not absolve the remote of the requirement to push unsolicited telemetry data.</p>"},{"location":"mwp-terrain-avoidance-quick-guide/","title":"Terrain Avoidance Quick Guide","text":"<p>There's already quite a long article on  mwp's terrain analysis tool; this is a quick summary of how to use it in three steps.</p>"},{"location":"mwp-terrain-avoidance-quick-guide/#1-load-your-mission","title":"1. Load your mission","text":"<p>First load (or create) the mission in mwp. Here, the pilot chooses to take a cruise around the lake and adjacent country side. The brown / grey icon at the top of the mission is the planned home location.  At first glance, the terrain looks quite benign.</p> <p></p>"},{"location":"mwp-terrain-avoidance-quick-guide/#2-set-your-avoidance-parameters","title":"2. Set your avoidance parameters","text":"<p>By right clicking on any waypoint, we can select Terrain Analysis. No internet connection is required if you already have cached imagery and DEM tiles.</p> <ul> <li>Home is taken from the planned home location</li> <li>The pilot elects for 30m clearance above terrain</li> <li>Uses the same altitude definition (Relative / Absolute) as is set in the extant mission</li> <li>Replace the mission altitudes with the altitudes generated from the analysis</li> <li>Highlight any extreme climb / dive angles</li> </ul> <p></p> <p>On clicking Apply, the analysis will run.</p>"},{"location":"mwp-terrain-avoidance-quick-guide/#3-review-the-output","title":"3. Review the output","text":"<p>The output is displayed as a chart of the terrain (green), the original mission (red), the avoidance margin (blue, 30m in this example), and the adjusted mission (orange). There is also a Climb / Dive analysis.</p> <p></p> <p>There are a few places that could benefit from further manual adjustment, but in general it looks pretty good.</p> <ul> <li>We could eliminate the unnecessary small dips at WP37, WP41 and WP43</li> <li>It is unlikely we'll try the extreme climb from HOME to WP1; the mission will probably be invoked some distance from home.</li> </ul> <p>So it looks good. Or does it?</p>"},{"location":"mwp-terrain-avoidance-quick-guide/#terrain-may-not-be-the-only-hazard","title":"Terrain may not be the only hazard","text":"<p>The terrain analysis is only as good as the terrain data. If we zoom in closely, or look at a difference map source (e.g. OpenTopo), or examine the route in 3D (Google Earth) via flightlog2kml / mission2kml, maybe from fl2xui we can see another hazard. Between WP36-WP37 and WP47-WP48 there are high voltage overhead transmission lines. Hitting these, or at WP48, the tower would be sub-optimal.</p> <p> </p> <p>A re-plan seems like a good idea, at least adding significant altitude on these legs of the mission.</p>"},{"location":"mwp-text-to-speech/","title":"Text to Speech","text":""},{"location":"mwp-text-to-speech/#overview","title":"Overview","text":"<p>On all platforms, an external <code>TTS</code> (Text to speech) application may be defined by the <code>--voice-command</code> option. Alternately, on POSIX platforms, a speech library may be dynamically loaded at run time. This requires the desired speech library to have been available when mwp was compiled.</p>"},{"location":"mwp-text-to-speech/#built-in-libraries","title":"Built-in libraries","text":"<ul> <li>Espeak / Espeak-ng</li> <li>Speech Dispatcher</li> <li>Flite</li> </ul> <p>None of these provide very good speech synthesis</p>"},{"location":"mwp-text-to-speech/#external-commands","title":"External Commands","text":"<p>You can use an external command on all platforms (it is the only option on Windows). Any external speech command should:</p> <ul> <li>Read lines of text to be spoken from <code>stdin</code> (standard input)</li> <li>Directly output the synthesised speech</li> <li>Only require invoking once, reading <code>stdin</code> for new text until it is closed.</li> </ul>"},{"location":"mwp-text-to-speech/#external-command-usage","title":"External command usage","text":"<p>The simplest way is to add a <code>--voice-command</code> line to your  cmdopts file.</p> <p>Examples:</p> <pre><code># Espeak-ng\n--voice-command=\"espeak-ng\"\n</code></pre> <pre><code># Speech Dispatcher\n--voice-command=\"spd-say -t female2 -e\"\n</code></pre> <pre><code># piper-tts\n# Choose your model, I have like the Scottish lady ...\n#VMODEL=/usr/share/piper-voices/en/en_GB/jenny_dioco/medium/en_GB-jenny_dioco-medium.onnx\n#VMODEL=/usr/share/piper-voices/en/en_GB/aru/medium/en_GB-aru-medium.onnx\nVMODEL=/usr/share/piper-voices/en/en_GB/alba/medium/en_GB-alba-medium.onnx\n--voice-command=\"sh -c \\\"piper-tts -q --model $VMODEL --output-raw | aplay -q -r 22050 -f S16_LE -t raw -\\\"\"\n</code></pre> <p>In the <code>piper-tts</code> example, (by far the best TTS for Linux), the voice model file is defined by an environment variable <code>VMODEL</code> which is evaluated by mwp before the voice command is invoked, making it easy to test out different voices.</p>"},{"location":"mwp-text-to-speech/#flite-specifics","title":"Flite specifics","text":"<p>mwp can use the <code>flite</code> text to speech engine directly (as well as espeak or speech-dispatcher. Flite is enabled if:</p> <ul> <li>You have the flite development files installed</li> </ul> <p>Flite is available at run-time if:</p> <ul> <li>The flite version is 2.0 or later.</li> </ul> <p>Unfortunately, it is non-trivial to detect the flite version at mwp build time.</p> <p>Flite provides reasonable quality voices with low overhead, including some female voices.</p>"},{"location":"mwp-text-to-speech/#configuration","title":"Configuration","text":"<p>Flite is configured using two <code>gsettings</code> keys:</p> Key Usage <code>speech-api</code> Defines the speech API to be used, one of <code>none</code>, <code>espeak</code>, <code>speechd</code> or <code>flite</code> <code>flite-voice</code> The voice file to be used. If not specified, the internal <code>slt</code> (female) voice is used. The value takes the absolute path name to a voice file, optionally followed by a <code>,</code> and a floating point speed factor (see below) <pre><code>$ gsettings set org.stronnag.mwp speech-api flite\n$ gsettings set org.stronnag.mwp flite-voice-file /home/jrh/.config/mwp/cmu_us_clb.flitevox,0.9\n</code></pre>"},{"location":"mwp-text-to-speech/#flite-discussion","title":"Flite Discussion","text":""},{"location":"mwp-text-to-speech/#voice-files","title":"Voice Files","text":"<p>flite can use external voice files that provide better quality than the built-in voices. Your distro may provide these voice files in an optional package, or you can download from http://www.festvox.org, e.g. for flite 2.1 http://www.festvox.org/flite/packed/flite-2.1/voices/ (replace 2.1 with 2.0 etc., not all the 2.1 voices may exist for 2.0). The following script will bulk download the non-Indic voices; you can test them out with the <code>flite</code> application.</p> <pre><code>#!/bin/bash\n\nBASE=http://www.festvox.org/flite/packed/flite-2.1/voices\n\nfor V in cmu_us_aew.flitevox cmu_us_ahw.flitevox cmu_us_aup.flitevox \\\n  cmu_us_awb.flitevox cmu_us_axb.flitevox cmu_us_bdl.flitevox \\\n  cmu_us_clb.flitevox cmu_us_eey.flitevox cmu_us_fem.flitevox \\\n  cmu_us_gka.flitevox cmu_us_jmk.flitevox cmu_us_ksp.flitevox \\\n  cmu_us_ljm.flitevox cmu_us_lnh.flitevox cmu_us_rms.flitevox \\\n  cmu_us_rxr.flitevox cmu_us_slp.flitevox cmu_us_slt.flitevox\ndo\n  wget -P . $BASE/$V\ndone\n</code></pre>"},{"location":"mwp-text-to-speech/#replay-speed","title":"Replay Speed","text":"<p>The default replay speed for some flite voices is rather slow. The optional rate setting in the gsettings <code>flite-voice-file</code> key may be used to increase the rate.</p>"},{"location":"mwp-windows-msys/","title":"Windows (MSys2)","text":""},{"location":"mwp-windows-msys/#overview","title":"Overview","text":"<p>mwp has, since December 2024, had somewhat functional support for  building <code>mwptools</code> using the Windows Msys2 toolchain with the aim of providing a native Windows version of mwp.</p> <ul> <li>A \"portable\" Windows Installer is published in the \"Snapshot\" builds (Github release area).</li> <li>May be built locally using the Msys2</li> </ul>"},{"location":"mwp-windows-msys/#status","title":"Status","text":"<p>Somewhat experimental, however most things work.</p>"},{"location":"mwp-windows-msys/#building","title":"Building","text":"<p>It is necessary to install the Msys2 toolchain.</p>"},{"location":"mwp-windows-msys/#system-build-dependencies","title":"System Build Dependencies","text":"<ul> <li>Add <code>export LC_ALL=C.utf8</code> to <code>.profile</code> (<code>.bash_profile</code>) so the <code>blueprint</code> UI definitions will compile.</li> <li>Set your Msys terminal to UTF-8 as well (Options from the title bar icon) </li> <li>It may also be neccesary to set Windows to use UTF-8.</li> <li>Add <code>export LC_ALL=C.utf8</code> to <code>.profile</code> (<code>.bash_profile</code>).</li> </ul> <p>Then install dependencies.</p> <pre><code> pacman -S  --needed mingw-w64-ucrt-x86_64-gtk4 mingw-w64-ucrt-x86_64-gstreamer mingw-w64-ucrt-x86_64-cairo \\\n   mingw-w64-ucrt-x86_64-pango mingw-w64-ucrt-x86_64-mosquitto mingw-w64-ucrt-x86_64-libshumate \\\n   mingw-w64-ucrt-x86_64-libadwaita mingw-w64-ucrt-x86_64-libsecret mingw-w64-ucrt-x86_64-libsoup3 git \\\n   mingw-w64-ucrt-x86_64-vala mingw-w64-ucrt-x86_64-meson mingw-w64-ucrt-x86_64-go \\\n   mingw-w64-ucrt-x86_64-blueprint-compiler mingw-w64-ucrt-x86_64-gcc mingw-w64-ucrt-x86_64-gtk4-media-gstreamer mingw-w64-ucrt-x86_64-librsvg \\\n   mingw-w64-ucrt-x86_64-sdl2 mingw-w64-ucrt-x86_64-readline mingw-w64-ucrt-x86_64-gst-plugins-base-libs\n</code></pre> <p>Optional, but recommended: <pre><code>pacman -S --needed unzip mingw-w64-ucrt-x86_64-ruby\n</code></pre> * Note that the packages are (mainly) prefixed <code>mingw-w64-ucrt-</code> (vice standard Arch Linux).</p> <p>Then follow the documented build instructions using <code>meson</code> and <code>ninja</code>.</p>"},{"location":"mwp-windows-msys/#pkgbuild","title":"PKGBUILD","text":"<p>There is also a <code>pacman</code> <code>PKGBUILD</code> file in the <code>docs/windows-pkg</code> directory. You can build your own Msys2 package (currently from the <code>development</code> branch) using this <code>PKGBUILD</code>.</p> <ul> <li>Create / enter a build directory, any name your like, e.g.    <code>mkdir msys-builds &amp;&amp; cd msys-builds</code></li> <li>Copy <code>docs/windows-pkg/PKGBUILD</code> there:     <pre><code>cp &lt;PATHTO&gt;/mwptools/docs/windows-pkg ./\n</code></pre></li> <li>Now you can build the package:     <pre><code>makepkg-mingw -C -f\n</code></pre>     This will generate a Msys2 packag named like (the name includes a git tag and commit id)  <code>mingw-w64-x86_64-mwptools-24.12.02.r76.c1e34843-1-any.pkg.tar.zst</code> which can be installed with <code>pacman</code> <pre><code>pacman -U mingw-w64-x86_64-mwptools-24.12.02.r76.c1e34843-1-any.pkg.tar.zst\n</code></pre></li> <li>Note that you can build and install in one command:     <code>makepkg-mingw -C -f -i</code> After you've done this once, subsequently, after the repo has been updated, you can rerun the build / package generation by rerunning <code>makepkg-mingw</code> (and <code>pacman</code> to install) as required.</li> </ul>"},{"location":"mwp-windows-msys/#windows-installer","title":"Windows Installer","text":"<p>A Windows Installer may be provided.</p> <p>Run the installer. Select the option to install a desktop icon if you wish. Options are provided for a System or Portable (user local) installation.</p> <ul> <li>If you select a portable (user local) installation, the \"DejaVu Mono\" fonts cannot be installed, resulting in an ugly side panel.</li> <li>The portable (user local) installation may be removed by deleting the installation directory.</li> <li>The installer may not set the \"Start In\" directory correctly.</li> </ul>"},{"location":"mwp-windows-msys/#binary-components-and-open-source-licences","title":"Binary Components and Open Source Licences","text":"<p>The Windows installer includes components distributed under various Open Source Licences:</p> <p>The following  binary components are from the Msys2 Project.</p> <ul> <li>Gtk and dependencies: LGPL2 see https://gitlab.gnome.org/GNOME/gtk</li> <li>DejuVu Fonts: Bitsream Licence and other see https://dejavu-fonts.github.io/License.html</li> <li>miniunzip: Zlib see  https://www.winimage.com/zLibDll/minizip.html</li> <li>Gstreamer : LGPL2 see https://gstreamer.freedesktop.org</li> </ul> <p>Also included (replay tools):</p> <ul> <li>INAV <code>blackbox_decode</code> : GPL3 https://github.com/iNavFlight/blackbox-tools</li> <li><code>fl2ltm</code> : GPL3 https://github.com/stronnag/bbl2kml</li> </ul>"},{"location":"mwp-windows-msys/#post-install-tasks","title":"Post Install Tasks","text":""},{"location":"mwp-windows-msys/#pkgbuild-msys-2-local-build","title":"PKGBuild / Msys 2 local build","text":"<ul> <li>Install any required GStreamer packages</li> <li>Install <code>blackbox_decode</code> and <code>fl2ltm</code></li> <li>Install the DejuVu <code>Mono</code> fonts as Windows fonts</li> </ul>"},{"location":"mwp-windows-msys/#all-installation-methods","title":"All installation methods","text":""},{"location":"mwp-windows-msys/#audio","title":"Audio","text":"<p>Voice assistance requires a spawned \"audio (text to speech) helper\". The following third party tools are suitable.</p> <ul> <li>voice.exe an open source program by Eli Fulkerson uses the Windows Speech Synthesis engine, and works perfectly. Sounds great (similar to <code>piper-tts</code> on Linux). The <code>--voice-command</code>  option may be set permanently in <code>%LOCALAPPDATA%\\mwp\\cmdopts</code>, for example:     <pre><code>    # -m option gives a female voice ... (voice -h for other options)\n    --voice-command \"voice.exe -m\"\n</code></pre></li> <li>The Windows espeak port also works as an external helper via <code>--voice-command espeak</code> (having set an appropriate <code>PATH</code>). The voice is somewhat robotic. The <code>--voice-command</code>  option may be set permanently in <code>%LOCALAPPDATA%\\mwp\\cmdopts</code>, for example:     <pre><code>    --voice-command espeak.exe\n</code></pre></li> </ul>"},{"location":"mwp-windows-msys/#terrain-plots-terrain-analysis-line-of-sight","title":"Terrain Plots (Terrain Analysis / Line of sight)","text":"<p>Requires a third party <code>gnuplot</code>. The <code>gnuplot</code> in Mys2 behaves somewhat strangely and is not suitable. Gnuplot Windows binary. Install the Msys2 version.</p>"},{"location":"mwp-windows-msys/#path","title":"PATH","text":"<p>The above external applications will need to be on the <code>PATH</code> available to the installed mwp.</p>"},{"location":"mwp-windows-msys/#known-issues","title":"Known issues","text":"<ul> <li>Bluetooth in general may be unreliable, in some part due to the difficulty in consistently enumerating BT devices.</li> <li>BLE is not available</li> <li>Terrain Analysis and Line of Sight Analysis is only available \"off-line\"</li> <li>In the event that mwp should crash, it may leave behind some spawned applications, for example one of more of <code>fl2ltm</code>, <code>blackbox_decode</code>, <code>espeak</code>, <code>voice</code>, <code>bproxy</code>, <code>gmproxy</code>, <code>gdbus</code>. In particular, mwp may not restart if an <code>gdbus</code> orphaned remains. In such cases, the user is advised to clean up using the Task Manager.</li> </ul>"},{"location":"mwp-windows-msys/#data-locations","title":"Data Locations","text":""},{"location":"mwp-windows-msys/#configuration-files","title":"Configuration Files","text":"<ul> <li><code>%UserProfile%\\AppData\\Local\\mwp</code> / <code>$LOCALAPPDATA/mwp</code> (<code>~/.config/mwp</code> on POSIX systems).</li> </ul>"},{"location":"mwp-windows-msys/#map-caches","title":"Map caches:","text":"<ul> <li><code>%UserProfile%\\AppData\\Local\\Microsoft\\Windows\\INetCache</code> / <code>$LOCALAPPDATA/Microsoft/Windows/INetCache</code> (<code>~/.cache</code> on POSIX systems).</li> <li>And sub-directories:<ul> <li><code>shumate</code> : Tile caches</li> <li><code>mwp/DEMs</code> : Digital Elevation Models (aka Terrain data)</li> </ul> </li> </ul> <p>Neither of these locations are cleared by an uninstall.</p>"},{"location":"mwp-windows-msys/#settings","title":"Settings","text":"<p>mwp maintains documented settings in a Registry like Gtk component which can be assessed by the command line tool <code>gsettings</code>. If you use Msys2, this will be installed. If you use the installer it is also  installed; but it is necessary to establish its path to use it (and enable it to find the settings):</p> <ul> <li> <p>The mwp Windows Installer will install <code>gsettings</code>, this will need <code>C:\\Program Files\\mwptools\\bin</code> to be on the <code>PATH</code> or <code>cd  \"C:\\Program Files\\mwptools\"</code> and invoke <code>bin/gsettings</code>.  e.g.:</p> <pre><code>PS C:\\Users\\win11&gt; $env:Path += \";C:\\Program Files\\mwptools\\bin\"\nPS C:\\Users\\win11&gt; gsettings list-recursively org.stronnag.mwp\norg.stronnag.mwp adjust-tz true\n...\n## show current in the voltage box ...\nPS C:\\Users\\win11&gt; gsettings set org.stronnag.mwp smartport-fuel-unit 'mAh'\n</code></pre> </li> </ul> <p>You may also the graphical mwpset application to maintain settings.</p>"},{"location":"mwp-windows-msys/#other","title":"Other","text":"<p>Note that mwp creates and consumes IP services. It may be necessary to ensure that <code>mwp.exe</code> is white-listed in the Windows firewall.</p>"},{"location":"mwp-windows-msys/#reporting-issues","title":"Reporting Issues","text":"<p>Please see the general guidance, in particular:</p> <ul> <li>Build issues require the full build text, not just some random subset</li> <li>Run time issues require the \"stderr\" log (<code>mwp_stderr_YYYY-MM_DD.txt</code>) as well as any artefacts that cause an issue (BBL, ETX log, mission files etc.).</li> </ul> <p>Previously, these folders defaulted to GLib's <code>Environment.get_home_dir()</code> which was <code>$HOME</code> / <code>%HOME%</code> everywhere. Now they default to:</p> <ul> <li>Normal (POSIX) OS: <code>Environment.get_home_dir()</code> aka <code>$HOME</code></li> <li>Windows: <code>Environment.get_user_special_dir(UserDirectory.DOCUMENTS)/mwp</code>  which is <code>Documents/mwp</code> . This means for Msys2, you now get the same directory regardless of whether you're the Windows user or the Msys2 user (i.e. <code>c:/Users/&lt;NAME&gt;/Documents/mwp</code>.</li> </ul> <p>The user may change the log location via the Environment Variable <code>MWP_LOG_DIR</code>.</p>"},{"location":"mwp_support/","title":"Troubleshooting and Support","text":""},{"location":"mwp_support/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Please ensure you've completed all the steps in the installation guide.</li> <li>The migration guide provides some useful hints for the current  Gtk4 based mwp.</li> <li>Please read the Help section in the installation guide</li> <li>There are a couple of articles on (rare) serial issues on the wiki:<ul> <li>Serial USB Checklist</li> <li>Serial USB Rarely asked questions</li> </ul> </li> </ul>"},{"location":"mwp_support/#support","title":"Support","text":""},{"location":"mwp_support/#how-where","title":"How, where","text":"<ul> <li>GitHub Issues preferred</li> <li>irc.libera.chat #mwptools</li> <li>Most likely you will be requested to raise a GitHub Issue for non-trivial cases or if there is an Information requirement. Hint, you can easily cut out the middle-man here.</li> <li>Ensure you're running the latest <code>master</code> version.</li> <li>See also Information requirements. Without this information, it is unlikely that any, non-trivial, support can be given. Please note that images are unlikely to be helpful compared to log files.</li> </ul>"},{"location":"mwp_support/#supported-os","title":"\"Supported\" OS","text":"<ul> <li>Arch Linux</li> <li>Alpine Linux (Edge)</li> <li>Chimera Linux</li> <li>Debian Testing (<code>trixie</code>, <code>sid</code>), and contemporaneous derivatives.</li> <li>Fedora latest</li> <li>FreeBSD latest <code>RELEASE</code></li> <li>Supported Desktop Enviroment / Window Managers: basically must comply with XDG standards, specifically GNOME, KDE, xfce, LXqt, labwc, wayfire.</li> </ul>"},{"location":"mwp_support/#tolerated-unsupported-os","title":"Tolerated / Unsupported OS","text":"<ul> <li>Windows (via Msys2)</li> <li>MacOS (Homebrew)</li> </ul>"},{"location":"mwp_support/#supported-infrastructure","title":"Supported infrastructure","text":"<ul> <li>Native hardware (x64_x86, ia32, aarch64, riscv64).</li> <li>Open source OS (Linux or FreeBSD)</li> <li>Non-proprietary video driver.</li> <li>qemu/kvm virtualised instances.</li> <li>Little endian (big endian never tested).</li> <li>Recent release of mwp</li> </ul>"},{"location":"mwp_support/#information-requirements","title":"Information requirements","text":""},{"location":"mwp_support/#clear-description-of-the-issue","title":"Clear description of the issue","text":"<ul> <li>A step of steps to reproduce the issue</li> <li>The actual and expected outcomes</li> <li>Include mwp's console log, from your home directory (<code>Documents\\mwp</code> for Windows), <code>mwp_stderr_YYYY-MM-DD.txt</code>, e.g. <code>$HOME/mwp_stderr_2021-12-28.txt</code>. Do not delete any information from this file; the contents are there for a purpose. Or paste the whole terminal output into a file (or copy / paste into the issue). The terminal output may include information from system components that are not the mwp log (e.g. GDK / GTK / Wayland messages).</li> <li>If your issue concerns telemetry, include a sample of data that causes the issue. Raw logs may be captured with the <code>--raw-log</code> option.</li> <li>If you're having a problem playing a blackbox log (or other flight log), include the problematic log.</li> </ul> <p>Due to Github's file type theatre, it may be necessary to encapsulate such artefacts in <code>gzip</code>, <code>tar.gz</code> or <code>zip</code> file.</p> <p>Issues that do not meet these information requirements most likely be ignored / closed without explanation.</p>"},{"location":"mwp_support/#unsupported","title":"Unsupported","text":"<ul> <li>Anything else!</li> </ul> <p>Problem reports on non-supported platforms may receive some consideration, however it's unlikely that too much time be expended on such environments unless the problem can also be demonstrated on a supported platform (or it's an interesting issue). Compliance with the Information requirements above is mandatory.</p>"},{"location":"mwp_video_player/","title":"Playing Video in mwp","text":"<p>mwp provides support for live and replay video.</p> <ul> <li>In ground station mode, in order to repeat the FPV feed to the mwp screen, presumably for the enjoyment of spectators;</li> <li>During Blackbox replay, to show the FPV recorded video during the replay.</li> </ul>"},{"location":"mwp_video_player/#video-player-options","title":"Video Player Options","text":"<p>mwp offers two alternate video player implementations:</p> <ul> <li>The default uses the standard GTK4 <code>Gtk.Video</code> widget. This is available on all platforms.</li> <li> <p>The \"hand-crafted\" player from legacy mwp is also available with a run time dependency on the <code>gstgtk4</code> Gstreamer plugin. This is available only on modern operating systems and its package name is OS dependent, for example:</p> <ul> <li>Arch:  <code>gst-plugin-gtk4</code></li> <li>Debian (Sid / Trixie): <code>gstreamer1.0-gtk4</code></li> <li>FreeBSD: <code>gstreamer1-plugins-rust</code></li> <li>Void: <code>gst-plugins-rs1</code></li> </ul> </li> </ul> <p>The <code>gstgtk4</code> player may have better (accelerated) performance and may play more media formats. It is also more tolerant of errors.</p> <p>In order force use of the <code>gstgtk4</code> player it is necessary:</p> <ul> <li>To use an operating system that supports the GStreamer <code>gstgtk4</code>  plugin.</li> <li>Set the environment variable <code>MWP_USE_GSTGTK4</code> (to anytihng).</li> </ul> <p>The <code>gstgtk4</code> player contains <code>(gstgtk4)</code> in the title bar.</p> <p>Either player can play streaming camera formats such as <code>rtsp</code> and <code>hls</code> if the appropriate GStreamer plugins are installed.</p> <p>Legacy Images</p> <p>The images this section are from legacy mwp, however the capability is the same.</p>"},{"location":"mwp_video_player/#live-stream-mode-gcs","title":"Live stream mode (GCS)","text":"<p>There is now a Video Stream option under the view menu.</p> <p></p> <p>Selecting this option opens the source selection dialogue. Camera devices offering a \"video4linux\" interface (i.e most webcams) will be auto-detected. There is also the option to enter a URI, which could be a <code>http</code>/<code>https</code>, <code>rtsp</code> or other standard streaming protocol, or even a file.</p> <p></p> <p>The selected source will then play in a separate window. This window will remain above the mwp application and can be resized, minimised and moved.</p> <p>In stream mode, there are minimal video controls; a play/pause button and volume control. Note the volume is that of the video, the overall volume is controlled by the system volume control.</p> <p>Up to 10 recent URIs are persisted. In order to access this list it is necessary to click the \"expander\" icon at the end of URI text entry box. The recent files list is stored in a text file <code>~/.config/mwp/recent-video.txt</code>. This file may be maintained with a text editor if required.</p>"},{"location":"mwp_video_player/#blackbox-replay-mode-bbl-replay","title":"Blackbox replay mode (BBL replay)","text":"<p>The Blackbox log replay chooser also offers a video replay option.</p> <p></p> <p>Here the user can select a media file and start options, i.e. whether and when to start the video replay with respect to the start of the BB log replay.</p> <ul> <li>In order for mwp to start the replay, the Start check-button must be selected. If it is:</li> <li>The user can enter an optional time (minutes : seconds) that defines when the video starts relative to the start of the BB log:<ul> <li>No time is entered, or the time is 0:00 : The video starts at the start of the BBL replay.</li> <li>The time is positive (e.g. 2:34.5 (two minutes, 34.5 seconds), as the example: Here the video would start when BB log starts, at an offset 2:34.5 into the video (i.e. the pilot started FPV recording 2m 34.5s before arming the aircraft).</li> <li>If the time is negative (including \"-0\" minutes), then the start of the video is delayed by that amount; so -0:57 would delay the start of the video by 57 seconds relative to the start of BB log replay.</li> <li>Pausing the replay will pause the video, and vice-versa.</li> </ul> </li> </ul> <p>When playing a file (vice a stream), the player gains a progress bar (which can be used to position the stream and \"beginning\" and \"end\" buttons.</p>"},{"location":"mwp_video_player/#other-os","title":"Other OS","text":"<ul> <li>FreeBSD. FreeBSD offers a video4linux emulation that works with mwp. Cameras are not auto-detected but will be recognised if plugged in before mwp is invoked. In any case, the URI <code>v4l2:///dev/video0</code> (for example) can be used in streaming mode if required.</li> </ul>"},{"location":"mwpset/","title":"mwp Settings Editor","text":""},{"location":"mwpset/#mwpset","title":"mwpset","text":""},{"location":"mwpset/#overview","title":"Overview","text":"<p><code>mwpset</code> is an application to manage mwp settings.</p> <ul> <li>Graphical settings editor</li> <li>Save updated settings to back-end settings database</li> <li>Backup and restore settings</li> </ul> <p>It provides a unified GUI tool across all operating systems but does not preclude the use of standard OS tools like <code>gsettings</code>, <code>dconf</code> or <code>dconf-editor</code>.</p>"},{"location":"mwpset/#usage","title":"Usage","text":"<pre><code>$ mwpset [schema]\n</code></pre> <p>The default scehma is <code>org.stronnag.mwp</code>; however any <code>gsettings</code> / <code>dconf</code> schema can be specified.</p> <p>On MacOS, the {{ mmwp }} <code>ini</code> settings file <code>~/.config/mwp/mwp.ini</code> is used.</p>"},{"location":"mwpset/#ui","title":"UI","text":"<p>The UI presents an alphabetical list of setting keys and their current value. Clicking on the \"Edit Icon\" (or double clicking) on a row will open the setting editor.</p> <p></p> <p>The edit dialog shows settings name, summary, description default value and a type specific widget to change the value.</p>"},{"location":"mwpset/#setting-edit-dialog","title":"Setting Edit Dialog","text":"<ul> <li>For enumerations and \"choices\" (including boolean) a drop down menu is presented.</li> <li>For other entries, there is a text entry box.</li> <li>Where a range (min, max) is enforced, the range values are also shown.</li> </ul> <ul> <li>Clicking the \"Default\" button will apply the default.</li> <li>Clicking \"Apply\" will update the value.</li> <li>Where a new value is out of range, the prior value will be restored.</li> <li>If the new value is accepted, the edit window is closed.</li> </ul> <p>After a value has been changed, it is shown in a highlight colour in the settings list.</p> <p></p> <p>Changed settings may be saved back to the settings database using the \"Save\" button. Once the new settings are saved, they are immediately available in a running <code>mwp</code> application.</p> <p>In a few cases, mwp caches settings on startup. Changes to these settings will not take effect until mwp is restarted.</p>"},{"location":"mwpset/#settings-window-menu","title":"Settings Window Menu","text":"<p>The settings window menu provides options :</p> <ul> <li>Backup : Backup settings to a file</li> <li>Restore : Restore settings from a file (in the format written by Backup).</li> <li>Quit</li> </ul> <p>When settings are restored, any changed settings  compared to the current values are shown in a highlight colour. It is necessary to Save any changed settings for them to take effect.</p>"},{"location":"mwpset/#localisation","title":"Localisation","text":"<p>Any floating point numbers will be displayed using either point or comma as the radix point according to the user's locale. Floating point numbers should be edited using the locale specific radix.</p> <p>The backup file is a <code>dconf</code> compatible <code>.ini</code> file. This is always written with a \"point\" radix and should not changed.</p> <p>Backup files are portable between machines / operating systems and may be used to transfer settings between machines.</p>"},{"location":"mwpsettings/","title":"mwp Gsettings","text":""},{"location":"mwpsettings/#list-of-mwp-settings","title":"List of mwp settings","text":"Name Summary Description Default adjust-tz Adjust FC's TZ (and DST) Option for whether mwp should adjust FC's TZ (and DST) based on the local clock true armed-msp-placebo Antidote to armed menus placebo Whether to suppress desensitising of MSP action items when armed. false arming-speak Speak arming states Whether to reporting arming state by audio false assist-key Ublox Assist now key Ublox Assist now key. Setting blank ('') disables, unless the API key is in the <code>libsecret</code> credential store. \"\" atexit Something that is executed at exit e.g. <code>gsettings set org.gnome.settings-daemon.plugins.power idle-dim true</code>. See also <code>manage-power</code> (and consider setting <code>manage-power</code> to <code>true</code> instead). \"\" atstart Something that is executed at startup e.g. <code>gsettings set org.gnome.settings-daemon.plugins.power idle-dim false</code>. See also <code>manage-power</code> (and consider setting to true). \"\" audio-on-arm Start audio on arm Option to start audio on arm (and stop on disarm) true auto-follow Set auto-follow Option to set auto-follow on start (track vehicle) true auto-restore-mission Whether to automatically import a mission in FC memory to MWP If the FC holds a valid mission in memory, and there is no mission loaded into MWP, this setting controls whether MWP automatically downloads the mission. false autoload-geozones Autoload geozones from FC Autoload geozones from FC on FC connect, remove from display on FC disconnect false autoload-safehomes Load safehomes on connect If true, then safehomes will be loaded from the FC on connection. false baudrate Baud rate Serial baud rate 115200 beep Beep for alerts Option to emit an alert sound for alerts. true blackbox-decode Name of the blackbox_decode application Name of the blackbox_decode application (in case there are separate for iNav and betaflight) \"blackbox_decode\" bluez-disco Use Bluetooth discovery (Linux only) Only discovered Bluetooth serial devices with non-zero RSSI will be offered true default-altitude Default altitude Default Altitude for mission (m) 20 default-latitude Default Latitude Default Latitude when no GPS 50.909528 default-loiter Default Loiter time Default Loiter time 30 default-longitude Default Longitude Default Longitude when no GPS -1.532936 default-map Default Map Default map key \"\" default-nav-speed Default Nav speed Default Nav speed (m/s). For calculating durations only. 7.0 default-zoom Default Map zoom Default map zoom 15 delta-minspeed Minimum speed for elapsed distance updates Minimum speed for elapsed distance updates (m/s). Default is zero, which means the elapsed distance is always updated; larger values will take out hover / jitter movements. 0.0 device-names Device names A list of device names to be added to those that can be auto-discovered [] display-distance Distance units 0=metres, 1=feet, 2=yards 0 display-dms Position display Show positions as dd:mm:ss rather than decimal degrees false display-speed Speed units 0=metres/sec, 1=kilometres/hour, 2=miles/hour, 3=knots 0 dump-unknown dump unknown dump unknown message payload (debug aid) false espeak-voice Default espeak voice Default espeak voice (see espeak documentation) \"en\" flash-warn Flash storage warning If a dataflash is configured for black box, and this key is non-zero, a warning in generated if the data flash is greater than \"flash-warn\" percent full. 0 flite-voice-file Default flite voice file Default flite voice file (full path, *.flitevox), see flite documentation) \"\" forward Types of message to forward Types of message to forward (none, LTM, minLTM, minMAV, all, MSP1, MSP2, MAV1, MAV2) \"minLTM\" ga-alt Units for GA (ADSB) Altiude 0=m, 1=ft, 2=FL 0 ga-range Units for GA (ADSB) Range 0=m, 1=km, 2=miles, 3=nautical miles 0 ga-speed Units for GA (ADSB) Speed 0=m/s, 1=kph, 2=mph, 3=knots 0 geouser User account on geonames.org A user account to query geonames.org for blackbox log timezone info. A default account of 'mwptools' is provided; however users are requested to create their own account. \"mwptools\" gpsd-host Gpsd provider Provider for GCS icon location via gpsd. Default is \"localhost\", can be set to other host name or IP address. Setting blank ('') disables. \"localhost\" gpsintvl Gps sanity time (m/s) Gps sanity time (m/s), check for current fix 2000 ident-limit MSP_IDENT limit for MSP recognition Timeout value in seconds for a MSP FC to reply to a MSP_INDENT probe. Effectively a timeout counter in seconds. Set to a negative value to disable. 60 ignore-nm Ignore Network Manager Linux / FreeBSD : Set to true to always ignore NM status (may slow down startup) false kml-path Directory for KML overlays Directory for KML overlays, default / not set = current directory \"\" log-on-arm Start logging on arm Option to start logging on arm (and stop on disarm) false log-path Directory for replay log files Directory for log files (for replay), default = current directory \"\" log-save-path Directory for storing log files Directory for log files (for save), default / not set = current directory \"\" los-margin Margin(m) for LOS Analysis Margin(m) for LOS Analysis 0 mag-sanity Enable mag sanity checking Mwp offers a primitive mag sanity checker that compares compass heading with GPS course over the ground using LTM (only). There are various hard-coded constraints (speed &gt; 3m/s, certain flight modes) and two configurable parameters that should be set here in order to enable this check. The parameters are angular difference (\u2070) and duration (s). The author finds a settings of 45,3 (i.e. 45\u2070 over 3 seconds) works OK, detecting real instances (a momentarily breaking cable) and not reporting false positives. \"\" manage-power Manage power and screen Whether to manage idle and screen saver false map-sources Additional Map sources JSON file defining additional map sources \"\" mapbox-apikey Mapbox API Key Mapbox API key, enables Mapbox as a map Provider. Setting blank ('') disables, unless the API key is in the <code>libsecret</code> credential store. \"\" mavlink-sysid Sysid for synthesised MAVLink System ID in the range 2-255 (see MAVlink documentation and particularly the GCS guidance, 2nd paragraph ibid) 106 max-climb-angle Maximum climb angle highlight for terrain analysis If non-zero, any climb angles exceeding the specified value will be highlighted in Terrain Analysis - Climb / Dive report. Note that the absolute value is taken as a positive (climb) angle 0.0 max-dive-angle Maximum dive angle highlight for terrain analysis If non-zero, any dive angles exceeding the specified value will be highlighted in Terrain Analysis Climb / Dive report. Note that the absolute value is taken as a negative (dive) angle 0.0 max-home-delta Home position delta (m) Maximum variation of home position without verbal alert 2.5 max-radar-slots Maximum number of INAV Radar vehicles Maximum number of vehicles reported by INAV Radar 4 max-wps Maximum number of WP supported Maximum number of WP supported (should match most capable FC firmware) 120 min-dem-zoom Minimum zoom for DEM loading DEMs will not be fetched if zoom is below this value 9 mission-icon-alpha Alpha for mission icons Alpha (opacity) for mission icons in the range 0 - 255. 160 mission-meta-tag Use meta vice mwp in mission file If true, the legacy 'mwp' tag for optional data in mission files is named 'meta' false mission-path Directory for mission files Directory for mission files, default / not set = current directory \"\" msp2-adsb MSP2_ADSB_VEHICLE_LIST usage Options for requesting MSP2_ADSB_VEHICLE_LIST. \"off\": never request, \"on:\" always request, \"auto:\" heuristic based on serial settings / bandwidth \"off\" mwxml-version MultiMission XML version Version value in MW XML mission files. Legacy MW requires <code>2.3 pre8</code>. Note that INAV mission files may not be NOT compatible with legacy MW (and vice versa). If not set, the mwp version number is used. \"\" no-poller-pause Don't pause the MSP poller for bulk transfers Traditionally, mwp pauses the MSP poller for bulk transfers (WP, Geozone, Safehome). This option allows polling to continue, interleaved with the bulk transfer. false osd-mode Data items overlaid on the map OSD 0 = none, 1 = current WP/Max WP, 2 = next WP distance and course. This is a mask, so 3 means both OSD items. 3 p-height Internal setting 720 p-is-fullscreen Internal setting false p-is-maximised Internal setting true p-pane-width Internal setting Please do not change this unless you appreciate the consequences 0 p-width Internal setting 1280 poll-timeout Poll messages timeout (ms) Timeout in milliseconds for telemetry poll messages. Note that timer loop has a resolution of 10ms. 900 pos-is-centre Determines position label content Whether the position label is the map centre or the pointer location false radar-alert-altitude Altitude below which ADS-B alerts may be generated Target altitude (metres) below which ADS-B proximity alerts may be generated. Requires that 'radar-alert-range' is also set (non-zero). Setting to 0 disables. Note that ADS-B altitudes are AMSL (or geoid). 0 radar-alert-min-speed Speed above which ADS-B alerts may be generated Target speed (metres/sec) above which ADS-B proximity alerts may be generated. Requires that 'radar-alert-altitude' and \"radar-alert-range\" are also set. 10 radar-alert-range Range below which ADS-B alerts may be generated Target range (metres) below which ADS-B proximity alerts may be generated. Requires that 'radar-alert-altitude' is also set (non-zero). Setting to 0 disables. 0 radar-list-max-altitude Maximum altitude for targets to show in the radar list view Maximum altitude (metres) to include targets in the radar list view. Targets higher than this value will show only in the map view. This is mainly for ADS-B receivers where there is no need for high altitude targets to be shown. Setting to 0 disables. Note that ADS-B altitudes are AMSL (or geoid). 0 rings-colour Range rings colour Range rings colour as well know string or #RRGGBBAA \"#ffffff20\" rth-autoland Set land on RTH waypoints Automatically assert land on RTH waypoints false say-bearing Whether audio report includes bearing Whether audio report includes bearing true show-sticks Whether to show stick poisitons in log replay If \"yes\", stick position is shown bottom right during log replay, if \"no\" , never shown. If \"icon\", then it shown iconified (bottom right) \"icon\" sidebar-type Internal setting Options for the sidebar type. Unless you know better, leave at auto \"auto\" smartport-fuel-unit User selected fuel type Units label for smartport fuel (none, %, mAh, mWh) \"none\" speak-amps When to speak amps/hr used Enumeration of none, live-n, all-n n=1,2,4 : n = how often spoken (modulus basically) \"none\" speak-interval Interval between voice prompts Interval between voice prompts, 0 disables 15 speech-api API for speech synthesis On of espeak, speechd, flite. Only change this if you know you have the required development files at build time \"espeak\" speechd-voice Default speechd voice Default speechd voice (see speechd documentation) \"male1\" stats-timeout Timeout for flight statistics display (s) Timeout before the flight statistics popup automatically closes. A value of 0 means no timeout. 30 symbol-scale Symbol scale Symbol scale factor, scales map symbols as multiplier (see also <code>touch-scale</code>), 1.0 touch-scale Touch symbol scale Symbol scale factor, scales map symbols as multiplier (for touch screens); (see also <code>symbol-scale</code>), 1.0 uc-mission-tags Upper case mission XML tags If true, MISSION, VERSION and MISSIONITEM tags are upper case (for interoperability with legacy Android applications) false uilang Language Handling \"en\" do everything as English (UI numeric decimal points, voice), \"ev\" do voice as English (so say 'point' for decimals even when shown as 'comma') \"\" view-mode UAV view mode Options for model view map display \"inview\" vlevels Voltage levels Semi-colon(;) separated list of cell voltages values for transition between voltage label colours \"\" wp-dist-size Font size (points) for OSD WP distance display Font size (points) for OSD WP distance display 56.0 wp-spotlight Style for the 'next waypoint' highlight Defines RGBA colour for 'next way point' highlight \"#ffffff60\" wp-text-style Style of text used for next WP display Defines the way the WP numbers are displayed. Font, size and RGBA description (or well known name, with alpha) \"Sans 72/#ff000060\" zone-detect Application to return timezone from location If supplied, the application will be used to return the timezone (in preference to geonames.org). The application should take latitude and longitude as parameters. See samples/tzget.sh \"\""},{"location":"replay-tools/","title":"Replay Tools","text":"<p>In order to replay log files, mwp has a number of external dependencies, in particular the flightlog2x <code>flightlog2kml</code> and <code>fl2ltm</code> tool provided by the bbl2kml repository. As well as providing replay tools for mwp, the  bbl2kml tools offer the facility to generate  attractive animated KML / KMZ files for visualisation in google-earth.</p> <p></p> Flight mode view <p></p> RSSI view <p></p> Efficiency view <p>Analysis</p> <p>The RSSI view shows why the aircraft is playing \"failsafe ping-pong\" at the right extreme of flight</p> <p>bbl2kml binary packages are provided for many popular platforms.</p>"},{"location":"replay-tools/#log-replay","title":"Log replay","text":"<p>mwp can replay a number of \"flight log\" formats. Other artefacts such as mission files / safehomes / (geozones) can be displayed while the replay is in progress.</p>"},{"location":"replay-tools/#location-rebase","title":"Location rebase","text":"<p>You may wish to obfuscate the location of log replay, particularly if you are publishing screen shots or vidoes. The <code>--rebase</code> option allows this. <code>--rebase</code> requires a latitude and longitude of the relocated position; the latitude and longitude may be separated by comma, semi-colon or space (the latter two quoted or shell escape) and may be decimal degrees or DD:MM:SS.ss format. The following would relocate a replay to Narita Airport in Japan (plausible denial, protect the innocent etc.):</p> <pre><code>mwp --rebase 35.761000,140.378945 -b reloc-test.TXT -m reloc-test.mission\nmwp --rebase 35.761000\\;140.378945 -b reloc-test.TXT -m reloc-test.mission\nmwp --rebase 35.761000\\ 140.378945 -b reloc-test.TXT -m reloc-test.mission\nmwp --rebase \"35:45:39.6N 140:22:44.2E\" -b reloc-test.TXT -m reloc-test.mission\n</code></pre>"},{"location":"replay-tools/#blackbox-replay","title":"Blackbox replay","text":"<p>In order to replay blackbox logs, you additionally need inav blackbox tools, specifically <code>blackbox_decode</code>). Binary packages are provided for many popular platforms. The minimum required version in 0.4.4, the latest release is recommended.</p>"},{"location":"replay-tools/#opentx-edgetx-logs-crsf-and-smartport","title":"OpenTX / EdgeTX logs (CRSF and Smartport)","text":"<p>OpenTX enables the storage of CRSF and Smartport telemetry logs on a transmitter's SD-Card. These logs contain telemetry information transmitted from the flight controller.</p> <p>mwp can replay these logs, in a similar manner to the replay of Blackbox or mwp logs, albeit with less detail and typically at lower data rates.</p> <ul> <li>Enable RX telemetry on the FC</li> <li>Enable telemetry logging on the TX</li> <li>Post flight, transfer the log from the LOGS directory of the SD card to your computer</li> <li>Replay the log using the Replay OTX Log (or Load OTX Log for a \"fast-forward\" rendering)</li> <li>Limited support is available of TX logs from Ardupilot.</li> </ul> <p>No addition software requirements.</p>"},{"location":"replay-tools/#bulletgcss-logs","title":"BulletGCSS Logs","text":"<p>No addition software requirements.</p>"},{"location":"replay-tools/#ardupilot-logs","title":"Ardupilot logs","text":"<p>Requires Ardupilot's mavlogdump.py.</p>"},{"location":"replay-tools/#mwp-json-logs","title":"mwp JSON logs","text":"<p>No addition requirements.</p>"},{"location":"replay-tools/#mwp-raw-logs","title":"mwp \"raw\" logs","text":"<p>mwp \"raw\" logs are either recorded directly in mwp (<code>--raw-log</code>) for indirectly using the external <code>mwp-serial-cap</code> tool.  The logs generated by <code>mwp</code> and <code>mwp-serial-cap</code> contain meta-data describing the size and time of each item recorded; <code>mwp</code> can also play 3rd party logs that are 'plain' rw data (i.e. without any timing meta-data).</p> <p>Recent versions of <code>mwp</code> contain a \"Replay mwp RAW log\" menu item that automates the manual process described below. This provides a dialogue to select the raw log file and an optional delay which is applied every 16 bytes read.</p> <p>Otherwise it is necessary to build and install <code>mwp-log-replay</code> and run it outside of mwp,</p> <pre><code># Start mwp as a UDP listener, port is arbitrary, here 40001 is chosen\n## -a connect immediately without user intervention\n## -d serial-device. No host part means it listens for remote connections\n## listen on UDP port 40001\n\nmwp  -a -d udp://:40001\n\n# In another  terminal  (even other machine if you replace localhost with the machine running mwp)\n\nmwp-log-replay -d udp://localhost:40001 /path/to/my/logfile.raw\n</code></pre> <p>Raw logs containing MSP, LTM, MAVLink, CRSF and MPM Smartport and IBUS messages can be replayed.</p>"},{"location":"replay-tools/#pause-resume","title":"Pause / Resume","text":"<p>The playing state may be toggled with the space bar. If a video is associated with the blackbox replay, then pausing the video will pause the blackbox replay and vice-versa.</p>"},{"location":"replay-tools/#display-of-rc-stick-positions","title":"Display of RC Stick positions","text":"<p>Where such data is available (Blackbox, OTX/ETX logs), mwp can display the position of the 'sticks'. This is displayed in the bottom right corner of the map.</p> <ul> <li>Initially, a \"refresh\" icon is shown</li> <li>Clicking this icon will show the sticks display</li> <li>A right mouse click on the sticks display reveals a \"Hide\" option. Clicking this reverts to the icon.</li> </ul>"},{"location":"replay-tools/#interactive-player","title":"Interactive player","text":"<p>The (new, July 2025) \"interactive\" player loads a somewhat familiar chooser for Blackbox and OTX/ETX logs.</p> <ul> <li>Selecting a log entry and clicking \"OK\" will present the player; if the (default) \"Autostart\" chooser option was enabled, then replay starts immediately, otherwise the replay can be manually started.</li> <li>The replay may be paused / advanced / retarded / restarted using the play button / slider / goto start / goto end buttons.</li> <li>Closing the slider window terminates the replay.</li> <li>If the log file contains multiple logs,  there will be a player menu so one can switch logs without having to re-parse the whole file.</li> </ul> <p></p>"},{"location":"replay-tools/#other-notes","title":"Other notes","text":"<ul> <li>Some feature of the extant replay will not be implemented at first (video linking, mission \"OSD\" (if at all)).</li> <li>The \"Flight Statistics\" dialog is updated whenever the replay is paused (or closed). It always details for  the whole flight rather than incremental  values.</li> <li>Direction (GGS v. mag) analysis is not yet implemented.</li> <li>The new chooser / player will be used for command line<code>-b, --replay-bbox</code> and drag / drop files on to the mwp window if the environment variable <code>MWP_PREFER_XLOG</code> is set (to anything), e.g: <pre><code>  $ MWP_PREFER_XLOG=1 mwp -b /t/inav-contrib/LOG00006.TXT\n</code></pre></li> </ul>"},{"location":"running/","title":"Running mwp","text":""},{"location":"running/#video-tutorials","title":"Video Tutorials","text":""},{"location":"running/#tutorial-playlist","title":"Tutorial Playlist","text":"<p>All the developer's tutorial videos are in a YouTube playlist. These refer to the legacy version.</p>"},{"location":"running/#graphical-user-interface","title":"Graphical User Interface","text":"<p>Once you've built and / or installed mwp.</p> <p>The install process installs an desktop icon and <code>mwp.desktop</code> application file </p> <p>The <code>desktop</code> file tells the window manager where to find mwp and on modern desktop environments (e.g. Gnome Shell, xfce, kde), mwp will be added to the system application menu and / or 'finder'.</p> <ul> <li>It is also possible to run mwp from a terminal, passing additional options if required.</li> <li>Such options can be added to a configuration file for persistence or use from the graphical icon.</li> </ul>"},{"location":"running/#touch-screen","title":"Touch Screen","text":"<p>The mwp  map and map symbols are 'touch-aware'.</p> <ul> <li>You can drag map symbols using touch</li> <li>You can invoke \"right mouse button\" actions by a long press.</li> </ul>"},{"location":"running/#command-line-options","title":"Command line options","text":"<p>mwp's command line options may be displayed with the <code>--help</code> option:</p> <pre><code>$ mwp --help\nUsage:\n  mwp.exe [OPTION\u2026]\n\nHelp Options:\n  -h, --help                          Show help options\n  --help-all                          Show all help options\n  --help-gapplication                 Show GApplication options\n\nApplication Options:\n  -a, --auto-connect                  Legacy, ignored)\n  --build-id                          show build id\n  --centre=position                   Centre position (lat lon or named place)\n  -H, --centre-on-home                Centre on home\n  --cli-file                          CLI File\n  -c, --connect                       connect to first device (does not set auto flag)\n  --debug-flags                       Debug flags (mask)\n  --debug-help                        list debug flag values\n  -d, --device=device-name            Serial device\n  --dont-maximise                     Legacy, ignored\n  --force-mag                         force mag for vehicle direction\n  -t, --force-type=type-code_no       Model type\n  -4, --force4                        Force ipv4\n  --forward-to=device-name            forward telemetry to\n  --full-screen                       Legacy, ignored\n  -k, --kmlfile=file-name             KML file\n  -m, --mission=file-name             Mission file\n  -M, --mod-points=N                  Modulo points to show in GPS trail\n  -S, --n-points=N                    Number of points shown in GPS trail\n  -N, --no-poll                       don't poll for nav info\n  -T, --no-trail                      don't display GPS trail\n  --offline                           force offline proxy mode\n  --radar-device=device-name          dedicated inav radar device\n  -r, --raw-log                       log raw serial data to file\n  --really-really-run-as-root         no reason to ever use this\n  --rebase=lat,lon                    rebase location (for replay)\n  --relaxed-msp                       don't check MSP direction flag\n  -b, --replay-bbox=file-name         replay bbox log file\n  -p, --replay-mwp=file-name          replay mwp log file\n  --rings=number,interval             Range rings (number, interval(m)), e.g. --rings 10,20\n  -s, --serial-device=device_name     Serial device\n  -v, --version                       show version\n  --voice-command=command string      External speech command\n</code></pre>"},{"location":"running/#bash-completion","title":"Bash completion","text":"<p>mwp installation also installs a 'bash completion' script. Note this is only available after you log in, so on first install, it's only available after the next login.</p> <p>This facilitates automatic command completion, so you don't have to remember all the options or be always typing <code>mwp --help</code>.</p> <p>Typing <code>mwp</code> and then <code>&lt;TAB&gt;</code> will first display the option lead <code>--</code>; then a subsequent <code>&lt;TAB&gt;&lt;TAB&gt;</code> will display all the options. If one then typed <code>ra&lt;TAB&gt;&lt;TAB&gt;</code>, it would complete to:</p> <pre><code>$ mwp --ra\n--radar-device  --raw-log\n</code></pre> <p>Further entry (e.g. <code>d</code>) would complete the command (<code>--radar-device</code>).</p>"},{"location":"running/#adding-options-to-a-running-mwp","title":"Adding options to a running mwp","text":"<p>Certain options, like <code>--replay-bbox</code>, <code>--mission</code> allow you to add a file to a running mwp. So if mwp was running, either from the command line or Desktop Environment icon, then (for example):</p> <pre><code>mwp --mission file-i-forgot.mission\n</code></pre> <p>would load the mission <code>file-i-forgot.mission</code> into the running mwp rather than starting a new instance.</p>"},{"location":"running/#drag-and-drop","title":"Drag and Drop","text":"<p>You can drag and drop relevant files onto the mwp map:</p> <ul> <li>Blackbox Logs</li> <li>Mission Files</li> <li>KML Overlays</li> <li>CLI files</li> </ul>"},{"location":"running/#cli-files","title":"CLI Files","text":"<p>mwp can extract the following artefacts from a CLI File (<code>diff</code> or <code>dump</code>):</p> <ul> <li>Missions</li> <li>Safe Homes</li> <li>FW Approach definitions</li> <li><code>set</code> parameters affecting visualisation (<code>nav_fw_land_approach_length</code>, <code>nav_fw_loiter_radius</code>).</li> <li>GeoZones</li> </ul>"},{"location":"ui/","title":"User interface","text":""},{"location":"ui/#main-window","title":"Main Window","text":"<p>The mwp main window and the main user interface elements are:</p> <ol> <li>Menu Icon. Invokes the main menu. The menu options are described later.</li> <li>Map and Mission settings</li> <li>Communications and telemetry settings</li> <li>Side Bar Visibility</li> <li>Map window</li> <li>Side Bar Elements</li> <li>Mouse location (user preference units, cursor or map centre location)</li> <li>Flight controller information</li> <li>Vehicle Visualisation settings</li> <li>Sensor status and flight timer</li> </ol> <p>In the sections that follow, there will be a brief summary of each part; more detail will then provided in subsequent sections.</p>"},{"location":"ui/#menu-bar-1","title":"Menu Bar (1)","text":"<p>The following tables summarise the available menu options. Where usage is not obvious, operation will be described later on.</p>"},{"location":"ui/#file-menu","title":"File Menu","text":"Item Usage Open Mission Offers a dialog to open a mission file Append Mission file Appends a mission to the current mission set (creates a multi-mission element) Save Mission Saves the mission to the current mission file, overwriting any extant content Save Mission As Saves the mission to a user selected file. For a multi-mission the user can choose not to save specified mission segments. CLI File Loads CLI artefacts from a CLI File Download Mission from FC Downs a (multi-) mission from the flight controller Upload Mission to FC &gt; Upload Active Mission Uploads the current mission segment to the flight controller Upload Mission to FC &gt; Upload All Missions Uploads all mission segments to the flight controller Restore Mission from EEPROM Restores the EEPROM stored mission from the flight controller Save Mission to EEPROM Saves the current mission segment(s) to the flight controller. The current active mission segment (in a multi-mission) is set as the active mission in the FC Interactive Flightlog player Replays a flightlog2kml supported log format in an interactive player Legacy replayers &gt; Replay blackbox log Replays a Blackbox log file Legacy replayers &gt; Replay OTX et al Replays an OpenTX / EdgeTX CSV log file. (Also BulletGCSS and Ardupilot logs where available) Replay mwp log Replay a mwp (JSON) log file Replay mwp RAW log Replay a mwp raw (binary) log file Stop Replay Stops a running replay Static Overlay &gt; Load Loads a static KML format overlay file Static Overlay &gt; Remove Removes a loaded KML file from the display Geozones Invokes the INAV Geozones editor Safe Homes Invokes the INAV safe-home editor UBlox Assist Now Invokes the Assist Now dialog (download / store / restore / upload GPS data Quit Cleanly quits the application, saving the display layout"},{"location":"ui/#edit-menu","title":"Edit Menu","text":"Item Usage Set FollowMe Point Displays the Follow Me dialogue Preferences Displays the preferences dialogue All Settings Runs mwpset providing access to all of mwp's <code>gsettings</code> Survey / Area Planner Invokes the area-planner to generate search or survey plans as a mission. Mission Manager Display the multi-mission dialogue to remove segments from a multi-mission CLI serial terminal Displays the INAV CLI using the current connection Get FC Mission Info Display the mission status from a connected FC Seed current map Shows a dialogue to seed the map cache for offline (field) use Reboot FC Reboots a connected flight controller Audio Test Reads out the mwp version number as an audio test"},{"location":"ui/#view-menu","title":"View Menu","text":"Item Usage Zoom to Mission Zooms the map to the currently loaded mission Set location as default Sets the current location as the default (startup) location Centre on position ... Shows the \"Centre on Position\" selector and \"favourite places\" editor\" Measure Distance Invokes the distance measurement tool GPS Statistics Displays FC GPS status (rate, packets, errors, timeouts, HDOP/EPV/EPH) Radar View Displays the Radar (inav radar / ADS-B) view Radar Devices Configure the Radar (inav radar / ADS-B) devices Telemetry Tracker Displays the Telemetry Tracker UI Flight Statistics Display the flight statistic dialogue (also automatic on disarm) Video Stream Opens the (live) video stream window ADSB altitude legend Toggles display of the ADSB altitude legend GCS Location Displays the indicative GCS location icon"},{"location":"ui/#help-menu","title":"Help Menu","text":"Item Usage Online Manual Opens this document in the default browser Shortcut keys list Displays the short cut keys list About Displays version, author and copyright information"},{"location":"ui/#map-and-mission-settings-2","title":"Map and Mission Settings (2)","text":"<p>A number of different map products are available. mwp offers the mapping library (<code>libshumate</code>) defaults, MapBox, Esri Clarity, Esri World Imagery. (deprecated Bing Map), and user defined options, for example anonymous maps.</p> <p>These map products have different maximum zoom levels, (typically between 18-20), and in at least one case, are not globally consistent (Esi World Imagery has imagery tiles at zoom 19 in populated areas but returns a \"no data\" tile at zoom 19 in less populated areas). mwp cannot 'fix' this.</p> <p>Note that Bing Maps is deprecated by Microsoft, and MapBox will only be offered if the user has supplied a MapBox API key. The Bing option will be removed some time after the service is ended (though cached data should still work).</p> <p>The zoom level may be selected from the control here, or by zooming the map with the mouse wheel.</p> <p>The user may add a \"Gazetteer\" layer (Places and Transportation) overlay to any other map product, by toggling the \"Gazetteer\" button:</p> <p></p> <p></p> <p>The +Add WPs (Edit WPs)  button enables mission edit mode (click on the map to create a WP, drag to move, right mouse button for properties). Graphical WP editing may be augmented by the table orientated mission table view, which allows additional control (altitude, speed, special functions, for example fly-by-home waypoints).</p> <p>The \"Active Mission\" drop down supports INAV 4.0+ multi-mission. There is also a mission manager item under the Edit menu.</p>"},{"location":"ui/#communications-and-telemetry-settings-3","title":"Communications and telemetry settings (3)","text":"<p>There is a (blue \"!\" in the example) 'navigation safe' status icon. If this icon is shown (i.e. navigation is unsafe, then clicking on the item will provide more information:</p> <p></p> <p>The Device drop-down offers detected and pre-set (Preferences) devices for the FC / telemetry port. The device syntax is described the Device and Protocol definition chapter.</p> <p>The Protocol Selection drop-down (showing Auto in the reference image) allows the user to provide a hint as to communication protocols available on Device. These are further described in the Device and Protocol definition article.</p> <p>The Connect / Disconnect button connects / disconnects the displayed device.</p>"},{"location":"ui/#side-bar-visibility-4","title":"Side Bar Visibility (4)","text":"<p>Toggling this button will hide or show the side bar (6).</p>"},{"location":"ui/#map-area-5","title":"Map Area (5)","text":"<p>The map area displays the currently selected map at the desired zoom level. The map may be managed using familiar controls (drag, scroll wheel etc).</p>"},{"location":"ui/#side-bar-elements-6","title":"Side Bar elements (6)","text":"<p>The side bar displays a set if user defined UI elements (\"dockets\") that display flight / sensor information.</p> <p>See Side Bar Management. In the main window screen shot (left to right, top to bottom) we have:</p> <ul> <li>Artificial horizon</li> <li>Vario Indicator</li> <li>RSSI / LQ Indocator</li> <li>Direction Status (Heading (Position Estimator/Compass v. GPS). Useful to diagnose mag EMF interference on multi-rotors).</li> <li>Flight View. General geo-spatial information.</li> <li>Battery status. Current usage is also shown when available.</li> </ul>"},{"location":"ui/#location-7","title":"Location (7)","text":"<p>The location of the mouse pointer on the map. Position in the user's preferred format and ground elevation are shown.</p>"},{"location":"ui/#fc-information-8","title":"FC Information (8)","text":"<p>Displays the firmware, version and build with API information, profile and flight mode.</p>"},{"location":"ui/#vehicle-visualisation-9","title":"Vehicle Visualisation (9)","text":"<ul> <li>Follow : user setting <code>auto-follow</code>. whether the map always displays the aircraft icon and tracks (requires GPS).</li> <li>In View / Centre On / Moviong Map : Defined how to scroll the map to keep the aircraft in view.<ul> <li>In View : The map is only panned when the vehicle would otherwise be off-screen.</li> <li>Centre On  : The vehicle is always centre of the screen and the map pans as required.</li> <li>Moving Map  : The vehicle is always centre of the screen, vertically aligned, the map pans and rotates as required.</li> </ul> </li> </ul>"},{"location":"ui/#sensors-and-flight-status-10","title":"Sensors and flight status (10)","text":"<ul> <li>Logger : Generate mwp logs (JSON format).</li> <li>Audio : user setting <code>audio-on-arm</code>. Whether to \"speak\" status information.</li> </ul> <p>The green / red bars show gyro / acc / baro / mag / gps / sonar sensor status. If a required sensor fails, a map annotation will be displayed, together with an audible alarm (image from legacy version).</p> <p></p>"}]}